<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jay's Cookbook</title>
        <description>Menca personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Sun, 04 Feb 2024 22:30:41 +0900</pubDate>
        <lastBuildDate>Sun, 04 Feb 2024 22:30:41 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>[Javascript]: var, let, const 키워드</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#var&quot; id=&quot;markdown-toc-var&quot;&gt;var&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#let&quot; id=&quot;markdown-toc-let&quot;&gt;let&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#const&quot; id=&quot;markdown-toc-const&quot;&gt;const&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#결론&quot; id=&quot;markdown-toc-결론&quot;&gt;결론&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;var&quot;&gt;var&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;은 중복 선언을 허용한다&lt;/li&gt;
  &lt;li&gt;함수 레벨 스코프이다&lt;/li&gt;
  &lt;li&gt;변수 호이스팅이 일어난다&lt;/li&gt;
  &lt;li&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;은 런타임 이전에 무조건 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;로 초기화되어서 런타임에 선언문을 만나기 전에 참조 에러가 안생기고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;를 참조한다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;let&quot;&gt;let&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;중복 선언은 금지하지만, 재할당은 허용한다 (재할당은 새로운 메모리 주소에 새로운 값을 저장하고 식별자가 새로운 메모리 주소와 바인딩되는 것을 말한다)&lt;/li&gt;
  &lt;li&gt;블록 레벨 스코프이다&lt;/li&gt;
  &lt;li&gt;변수 호이스팅이 발생하지만, 초기화가 런타임 때 선언문을 만났을 때 일어난다&lt;/li&gt;
  &lt;li&gt;(변수가 런타임 이전에 등록은 되지만, 초기화는 런타임 때 선언문을 만났을 때 일어나기 때문에 그 전에 참조하면 참조 에러가 난다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;const&quot;&gt;const&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;중복 선언도 금지하고, 재할당도 금지한다&lt;/li&gt;
  &lt;li&gt;블록 레벨 스코프이다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;과 마찬가지로 변수 호이스팅이 발생하지만, 호이스팅 발생하지 않는 것처럼 선언문 이 후에 참조할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;ES6 이후로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;은 사용하지 않아도 된다&lt;/li&gt;
  &lt;li&gt;일단 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt;를 사용하자&lt;/li&gt;
  &lt;li&gt;재할당이 필요한 경우는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;을 사용하자&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 24 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/js-var-let-const</link>
                <guid isPermaLink="true">http://localhost:4000/js-var-let-const</guid>
                
                <category>javascript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Javascript]: 지역 변수와 전역 변수</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#전역-변수&quot; id=&quot;markdown-toc-전역-변수&quot;&gt;전역 변수&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#전역-변수의-문제점&quot; id=&quot;markdown-toc-전역-변수의-문제점&quot;&gt;전역 변수의 문제점&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#전역-변수-사용-억제하는-방법&quot; id=&quot;markdown-toc-전역-변수-사용-억제하는-방법&quot;&gt;전역 변수 사용 억제하는 방법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#지역-변수&quot; id=&quot;markdown-toc-지역-변수&quot;&gt;지역 변수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;전역-변수&quot;&gt;전역 변수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;전역 변수는 런타임 이전에 선언문이 실행되어 생성되고, 런타임에 할당문이 실행되어 값을 가지게 된다&lt;/li&gt;
  &lt;li&gt;전역 변수는 전역 객체(브라우저에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt;, 노드에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global&lt;/code&gt;)와 생명 주기가 같다&lt;/li&gt;
  &lt;li&gt;그래서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window&lt;/code&gt;는 웹페이지를 닫기 전까지, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global&lt;/code&gt;은 노드에서 프로세스를 종료하기 전까지 살아있기 때문에 전역 변수도 그 때 까지 살아서 메모리를 점유한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;전역-변수의-문제점&quot;&gt;전역 변수의 문제점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;긴 생명 주기&lt;/strong&gt;: 생명주기가 길어서 메모리 리소스를 오랜 기간 점유한다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스코프 체인 상에서 종점에 존재&lt;/strong&gt;: 검색 속도가 가장 느리다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;전역-변수-사용-억제하는-방법&quot;&gt;전역 변수 사용 억제하는 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;즉시 실행 함수&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모듈화&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;지역-변수&quot;&gt;지역 변수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;지역 변수는 &lt;span class=&quot;red__line&quot;&gt;함수가 호출되어 함수 안의 코드가 실행될 때, 함수 안에서 정의된 변수들의 선언문이 실행되어 생성&lt;/span&gt;되고, 이 후 해당 할당문 위치에 왔을 때 실제로 값이 할당된다&lt;/li&gt;
  &lt;li&gt;그래서 함수 안에서 정의된 지역 변수는 그 함수가 호출되지 않으면 함수 내부의 변수 선언문도 실행되지 않는다&lt;/li&gt;
  &lt;li&gt;(전역 변수는 함수 호출과 같은 진입점이 없어 바로 선언문이 실행되는 것과 대비되는 점이다)&lt;/li&gt;
  &lt;li&gt;이처럼 &lt;span class=&quot;red__line&quot;&gt;호이스팅은 스코프를 단위로 동작&lt;/span&gt;한다&lt;/li&gt;
&lt;/ul&gt;

</description>
                <pubDate>Wed, 24 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/js-global-variable</link>
                <guid isPermaLink="true">http://localhost:4000/js-global-variable</guid>
                
                <category>javascript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Javascript]: 스코프</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#스코프&quot; id=&quot;markdown-toc-스코프&quot;&gt;스코프&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#스코프-결정-방식&quot; id=&quot;markdown-toc-스코프-결정-방식&quot;&gt;스코프 결정 방식&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스코프-종류&quot; id=&quot;markdown-toc-스코프-종류&quot;&gt;스코프 종류&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스코프-체인&quot; id=&quot;markdown-toc-스코프-체인&quot;&gt;스코프 체인&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#렉시컬-스코프&quot; id=&quot;markdown-toc-렉시컬-스코프&quot;&gt;렉시컬 스코프&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;스코프&quot;&gt;스코프&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;스코프는 &lt;span class=&quot;very__important&quot;&gt;식별자의 유효범위&lt;/span&gt;를 의미한다&lt;/li&gt;
  &lt;li&gt;자바스크립트 엔진이 식별자를 검색할 때 &lt;strong&gt;스코프 체인&lt;/strong&gt;을 통해 식별자를 참조하고 있는 코드의 스코프에서 시작해 상위 스코프 방향으로 이동하며 선언된 식별자를 검색한다&lt;/li&gt;
  &lt;li&gt;상위 스코프에서 유효한 식별자는 하위 스코프에서도 자유롭게 참조할 수 있지만, 하위 스코프에서 유효한 식별자는 상위 스코프에서 참조할 수 없다&lt;/li&gt;
  &lt;li&gt;식별자중에서 변수는 정의할 수 있는 키워드 종류가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; 이렇게 세 가지가 있는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;로 정의된 변수는 함수 레벨 스코프를 가지고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt;로 정의된 변수를 블록 레벨 스코프를 가진다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스코프-결정-방식&quot;&gt;스코프 결정 방식&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;very__important&quot;&gt;식별자가 선언된 위치&lt;/span&gt;에 의해 스코프가 결정된다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 글로벌 스코프를 가진다&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 지역 스코프를 가진다&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x를 참조하고 있는 이 코드는 자기 자신의 스코프에서 먼저 x를 찾고, 없으면 점점 상위 스코프로 확장한다. 여기서는 자신의 스코프에 'local'이 있다&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// x를 참조하고 있는 이 코드는 자기 자신의 스코프가 글로벌이다. 그래서 글로벌에 정의된 'global'을 참조한다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;스코프-종류&quot;&gt;스코프 종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스코프는 크게 &lt;strong&gt;글로벌 스코프&lt;/strong&gt;와 &lt;strong&gt;지역 스코프&lt;/strong&gt;가 있다&lt;/li&gt;
  &lt;li&gt;글로벌 스코프에서 정의된 변수는 어디서든 참조할 수 있다&lt;/li&gt;
  &lt;li&gt;지역 스코프는 자신 스코프와 하위 스코프에서만 참조할 수 있다
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;로 정의된 변수는 함수 안에서 정의되었을 때만 지역 스코프로 여겨지고, 그 외의 경우에는 글로벌 스코프로 여겨진다&lt;/li&gt;
      &lt;li&gt;ES6에서 부터 블록 레벨 스코프를 지원하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; 라는 키워드를 만들었다&lt;/li&gt;
      &lt;li&gt;덕분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;문, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;문, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt;문, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt;문에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt;로 정의한 변수가 자신 스코프를 지역 스코프로 다룰 수 있게 되었다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스코프-체인&quot;&gt;스코프 체인&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;코드에서 &lt;span class=&quot;context__flow&quot;&gt;식별자를 참조하게 되면, 자바스크립트 엔진이 해당 식별자의 값을 찾게된다&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;이 때 식별자의 찾는 순서는, 식별자를 참조한 코드의 자신 스코프에서 점점 상위 스코프, 마지막으로 없으면 글로벌 스코프까지 순차적으로 탐색하게 된다&lt;/li&gt;
  &lt;li&gt;이렇게 &lt;span class=&quot;very__important&quot;&gt;자신 스코프 -&amp;gt; 상위 스코프들 -&amp;gt; 글로벌 스코프 순&lt;/span&gt;으로 찾는 모습이 마치 체인처럼 보여 스코프 체인이라 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;렉시컬-스코프&quot;&gt;렉시컬 스코프&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;context__flow&quot;&gt;함수는 다른 식별자들과 다르게 정의된 곳의 코드와 참조(호출)된 곳의 코드의 스코프가 다를 수 있다&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;very__important&quot;&gt;정의된 곳을 상위 스코프로 결정하는 방식을 렉시컬 스코프&lt;/span&gt; 또는 정적 스코프라 한다&lt;/li&gt;
  &lt;li&gt;참조된 곳을 상위 스코프로 결정하는 방식을 동적 스코프라 한다&lt;/li&gt;
  &lt;li&gt;자바스크립트를 비롯한 대부분의 프로그래밍 언어는 &lt;strong&gt;렉시컬 스코프 방식을 따른다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// foo 함수의 경우 정의된 곳과 참조된 곳 모두 글로벌 스코프다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// bar 함수의 경우 정의된 곳은 글로벌 스코프, 참조된 곳은 foo 함수 스코프다&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 그래서 bar 함수 안에서 x를 찾기 위해 상위 스코프로 이동할 때,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// bar 함수가 정의된 글로벌 스코프가 상위 스코프다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 그래서 글로벌 스코프에서 x를 찾는다 -&amp;gt; 1을 출력&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Tue, 23 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/js-scope</link>
                <guid isPermaLink="true">http://localhost:4000/js-scope</guid>
                
                <category>javascript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[node.js] Intro</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Mon, 22 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/nodejs-intro</link>
                <guid isPermaLink="true">http://localhost:4000/nodejs-intro</guid>
                
                <category>nodejs</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>[Javascript]: 함수</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#함수&quot; id=&quot;markdown-toc-함수&quot;&gt;함수&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#함수-정의&quot; id=&quot;markdown-toc-함수-정의&quot;&gt;함수 정의&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#함수-리터럴&quot; id=&quot;markdown-toc-함수-리터럴&quot;&gt;함수 리터럴&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#함수-선언문&quot; id=&quot;markdown-toc-함수-선언문&quot;&gt;함수 선언문&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#함수-표현식&quot; id=&quot;markdown-toc-함수-표현식&quot;&gt;함수 표현식&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#함수-생성-시점과-함수-호이스팅&quot; id=&quot;markdown-toc-함수-생성-시점과-함수-호이스팅&quot;&gt;함수 생성 시점과 함수 호이스팅&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#화살표-함수&quot; id=&quot;markdown-toc-화살표-함수&quot;&gt;화살표 함수&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#참조에-의한-전달과-외부-상태의-변경&quot; id=&quot;markdown-toc-참조에-의한-전달과-외부-상태의-변경&quot;&gt;참조에 의한 전달과 외부 상태의 변경&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#다양한-함수의-형태&quot; id=&quot;markdown-toc-다양한-함수의-형태&quot;&gt;다양한 함수의 형태&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#즉시-실행-함수&quot; id=&quot;markdown-toc-즉시-실행-함수&quot;&gt;즉시 실행 함수&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#중첩-함수&quot; id=&quot;markdown-toc-중첩-함수&quot;&gt;중첩 함수&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#콜백-함수&quot; id=&quot;markdown-toc-콜백-함수&quot;&gt;콜백 함수&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;함수&quot;&gt;함수&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;프로그래밍에서 함수는 일련의 과정을 문(statement)으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다&lt;/li&gt;
  &lt;li&gt;함수를 이용하면 코드의 재사용성을 높이고 가독성을 향상시킨다&lt;/li&gt;
  &lt;li&gt;자바스크립트에서 함수는 &lt;span class=&quot;very__important&quot;&gt;호출할 수 있는 객체&lt;/span&gt;다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;함수-정의&quot;&gt;함수 정의&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자바스크립트에서 함수를 정의하는 방법에는 &lt;strong&gt;함수 선언문&lt;/strong&gt;, &lt;strong&gt;함수 표현식&lt;/strong&gt;, &lt;strong&gt;Function 생성자 함수&lt;/strong&gt; 그리고 &lt;strong&gt;화살표 함수&lt;/strong&gt;가 있다
    &lt;ul&gt;
      &lt;li&gt;함수 선언문과 함수 표현식은 함수 리터럴을 통해 정의한다&lt;/li&gt;
      &lt;li&gt;Function 생성자 함수는 거의 사용하지 않는다 (권장하는 방식이 아니다)&lt;/li&gt;
      &lt;li&gt;화살표 함수는 ES6에서 도입된 것으로 위의 방식들을 간략화한 방법이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;함수-리터럴&quot;&gt;함수 리터럴&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수라는 객체를 표현하는 방식을 의미한다&lt;/li&gt;
  &lt;li&gt;숫자 리터럴은 숫자 값으로 표기해야 하고, 문자열 리터럴도 따옴표로 묶어야 되듯이, 함수 리터럴도 함수 리터럴로 인식되려면 규칙이 필요하다&lt;/li&gt;
  &lt;li&gt;함수 리터럴은 function 키워드, 함수 이름, 매개변수 목록, 함수 몸체로 구성된다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 기본 방식&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// function 키워드, 함수 이름, 매개변수 목록, 함수 몸체&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 매개변수 없어도 된다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 함수 이름 없어도 된다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 하지만, 식별자에 할당해야 한다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;함수 리터럴은 함수 선언문 또는 함수 표현식, 이 두 가지 함수 정의에 사용된다&lt;/li&gt;
  &lt;li&gt;만약 함수 이름이 없다면, 무조건 함수 표현식으로 정의하는데만 사용되야 한다
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 식별자가 필요합니다&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 표현식&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;함수 이름이 있다면,
    &lt;ul&gt;
      &lt;li&gt;값으로 평가되는 문맥인 경우, 예를 들어 변수에 할당하거나 피연산자로 사용하면 이는 &lt;strong&gt;함수 표현식&lt;/strong&gt;으로 정의한 것이다&lt;/li&gt;
      &lt;li&gt;단독으로 사용하면 이는 &lt;strong&gt;함수 선언문&lt;/strong&gt;으로 정의한 것이다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 선언문&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 표현식&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수-선언문&quot;&gt;함수 선언문&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수 선언문은 함수 리터럴의 이름을 생략할 수 없다&lt;/li&gt;
  &lt;li&gt;(변수에 할당도 못하는데 함수 이름까지 없으면 함수를 식별할 수가 없으니까)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;함수 호출은 함수 이름에 의해서가 아니라 함수 객체를 가리키는 식별자로 호출한다&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;그래서 함수 선언문도 암묵적으로는 함수 이름과 똑같은 식별자를 자바스크립트 엔진이 생성하고, 거기에 함수 객체를 할당한다&lt;/li&gt;
  &lt;li&gt;이렇게 자바스크립트 엔진이 식별자를 생성해 함수 객체를 할당한 후부터 함수를 값처럼 사용할 수 있다 (일급 객체)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 함수 선언문&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 자바스크립트 엔진이 암묵적으로 아래와 같이 변경한다&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수-표현식&quot;&gt;함수 표현식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수 표현식으로 함수를 정의하면, 자바스크립트 엔진이 별다른 과정을 거치지 않아도 값으로 사용할 수 있다&lt;/li&gt;
  &lt;li&gt;함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다 (재귀 함수의 경우에는 함수 이름 필요)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;함수-생성-시점과-함수-호이스팅&quot;&gt;함수 생성 시점과 함수 호이스팅&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성된다. 그리고 자바스크립트 엔진은 함수 이름과 동일한 이름으로 식별자를 암묵적으로 생성하고 생성된 함수 객체를 할당한다&lt;/li&gt;
  &lt;li&gt;이렇게 런타임 이전에 이미 함수 객체가 생성되어 있기 때문에, 런타임에 함수 선언문 이전부터 함수를 참조하고 호출할 수 있다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이를 함수 호이스팅이라고 한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;반면 함수 표현식은 런타임 이전에는 함수를 할당한 변수의 선언문 까지만 실행되고, 해당 변수에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;가 할당되어 있다. 그리고 런타임에 비로소 함수 객체가 생성되어 변수에 할당된다&lt;/li&gt;
  &lt;li&gt;함수 표현식은 런타임에서 함수 표현식을 만났을 때 비로소 함수 객체가 할당되기 때문에 표현식 이전에 함수를 참조하고 호출할 수 없다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이렇게 변수 선언문만 런타임 전에 실행되고, 할당문은 런타임에 실행되는 방식을 변수 호이스팅이라 한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;결론적으로 함수 호이스팅은 함수를 호출하기 전에 함수를 선언해야 한다는 당연한 규칙을 위배하기 때문에 권장되지 않고, &lt;span class=&quot;very__important&quot;&gt;변수 호이스팅 되는 함수 표현식으로 함수를 정의할 것을 권장한다&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;화살표-함수&quot;&gt;화살표 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;화살표 함수는 ES6에서 도입되었으며 함수를 정의할 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function&lt;/code&gt; 키워드 대신 화살표 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt;를 사용한다&lt;/li&gt;
  &lt;li&gt;화살표 함수는 항상 익명 함수로 정의한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;화살표 함수는 단순히 위의 정의 방법들을 단순화하기 위한 용도가 아니라, &lt;strong&gt;화살표 함수만의 특징과 용도가 있다&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;화살표 함수는 생성자 함수로 사용할 수 없다&lt;/li&gt;
  &lt;li&gt;기존 함수와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; 바인딩 방식이 다르다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prototype&lt;/code&gt; 프로퍼티가 없다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arguments&lt;/code&gt; 객체를 생성하지 않는다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;(중요한 부분이기 때문에 나중에 26장 공부한 후 보충한다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참조에-의한-전달과-외부-상태의-변경&quot;&gt;참조에 의한 전달과 외부 상태의 변경&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;함수의 매개변수로 전달한 인자를 함수 안에서 조작하면 어떻게 될까?
    &lt;ul&gt;
      &lt;li&gt;원시값은 원본이 훼손되지 않는다&lt;/li&gt;
      &lt;li&gt;객체는 원본이 훼손된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; 으로 정의한 원시값을 변경하면, 값을 새로운 메모리에 할당하고 해당 메모리에 저장된 값을 수정한다. 그래서 원본 값은 보존된다&lt;/li&gt;
  &lt;li&gt;객체는 변경 가능한 타입이기 때문에, 원시값을 변경하면, 해당 메모리에 있는 원시값이 그대로 수정된다. 그래서 원본 값이 훼손된다&lt;/li&gt;
  &lt;li&gt;이렇게 함수가 외부 상태를 변경하는 것은 변화의 추적을 어렵게 하기 때문에 지양되는 방식이다. 그래서 깊은 복사를 통해 매개변수에 전달하면 이러한 부수 효과를 피할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 외부 상태를 건드리는 비순수 함수&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;prim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 외부 상태&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lee&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 100&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { name: 'Lee' }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;changeVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 100 --&amp;gt; 원시값은 원본이 보존&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { name: 'Kim' } --&amp;gt; 객체는 원본이 훼손&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;다양한-함수의-형태&quot;&gt;다양한 함수의 형태&lt;/h2&gt;

&lt;h3 id=&quot;즉시-실행-함수&quot;&gt;즉시 실행 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수 정의와 동시에 즉시 호출되는 함수를 즉시 실행 함수라고 한다&lt;/li&gt;
  &lt;li&gt;즉시 실행 함수는 단 한 번만 호출되며 다시 호출할 수 없다&lt;/li&gt;
  &lt;li&gt;즉시 실행 함수는 그룹 연산자 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(...)&lt;/code&gt;로 먼저 함수 리터럴 + 호출 연산자를 감싸줘야 한다
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;그룹 연산자가 없으면 함수 선언문으로 여겨지고 함수 선언문은 함수 객체가 아니기 때문에 뒤의 함수 호출 연산자를 붙일 수 없다&lt;/li&gt;
  &lt;li&gt;그룹 연산자로 감싸줘야 함수 리터럴, 즉 함수 객체로 평가되고 뒤에 호출 연산자를 붙일 수 있다&lt;/li&gt;
  &lt;li&gt;즉시 실행 함수도 일반 함수처럼 인수를 전달할 수 있고 값을 반환할 수도 있다
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;중첩-함수&quot;&gt;중첩 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라 한다&lt;/li&gt;
  &lt;li&gt;그리고 중첩 함수를 포함하는 함수를 외부 함수라 한다&lt;/li&gt;
  &lt;li&gt;중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;콜백-함수&quot;&gt;콜백 함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;반복되는 부분을 함수로 만들어 &lt;strong&gt;다른 함수 매개변수에 인자로 전달되는 함수를 콜백 함수&lt;/strong&gt;라 한다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;콜백 함수를 인자로 받는 함수를 고차 함수&lt;/strong&gt;라 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callBackFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;higherOrderFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;higherOrderFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callBackFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Mon, 22 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/js-function</link>
                <guid isPermaLink="true">http://localhost:4000/js-function</guid>
                
                <category>javascript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[FastAPI]</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.guru99.com/docker-interview-questions.html&quot; target=&quot;_blank&quot;&gt;Guru99, 43+ Docker Interview Questions and Answers (2022)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 22 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/fastapi-intro</link>
                <guid isPermaLink="true">http://localhost:4000/fastapi-intro</guid>
                
                <category>FastAPI</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>[Javascript]: 원시 값과 객체의 비교</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#원시-값과-객체의-비교&quot; id=&quot;markdown-toc-원시-값과-객체의-비교&quot;&gt;원시 값과 객체의 비교&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#원시-값&quot; id=&quot;markdown-toc-원시-값&quot;&gt;원시 값&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#객체&quot; id=&quot;markdown-toc-객체&quot;&gt;객체&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;원시-값과-객체의-비교&quot;&gt;원시 값과 객체의 비교&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;원시 타입의 값, 즉 원시 값은 변경 불가능한 값이다&lt;/li&gt;
  &lt;li&gt;원시 값을 변수에 할당하면 메모리에는 실제 값이 저장된다&lt;/li&gt;
  &lt;li&gt;원시 값을 갖는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달된다. 이를 &lt;strong&gt;값에 의한 전달&lt;/strong&gt;이라 한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원시 값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;로 선언하면 재할당 할 수 있는데, 재할당은 원본 값을 변경하는 것이 아니고 새로운 메모리 공간에 값을 저장한 후, 변수가 참조하던 메모리 공간의 주소를 변경한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;객체는 변경 가능한 값이다.&lt;/li&gt;
  &lt;li&gt;객체를 변수에 할당하면 메모리에는 참조 값이 저장된다&lt;/li&gt;
  &lt;li&gt;객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달된다. 이를 &lt;strong&gt;참조에 의한 전달&lt;/strong&gt;이라 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원시-값&quot;&gt;원시 값&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;원시 값을 저장하려면 먼저 확보해야 하는 메모리 공간의 크기를 결정해야 한다.&lt;/li&gt;
  &lt;li&gt;단 ECMAScript 사양에 문자열(2바이트)과 숫자(8바이트) 이외의 원시 타입은 크기를 명확히 규정하지 않아, 브라우저에 따라 다를 수 있다&lt;/li&gt;
  &lt;li&gt;(문자열은 문자 1개당 2바이트. 숫자는 어떤 크기의 숫자든 8바이트이다)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// copy에는 score에 할당된 원시 값 80이 새로운 메모리 공간에 복사되어 새로운 메모리 공간의 주소와 바인딩 된다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 이를 값에 의한 전달이라 한다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;객체&quot;&gt;객체&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;객체를 할당한 변수에는 실제 객체를 저장하고 있는 메모리의 메모리 주소를 저장하고 있다&lt;/li&gt;
  &lt;li&gt;참조값은 이렇게 객체가 저장된 메모리 공간의 주소를 말한다&lt;/li&gt;
  &lt;li&gt;(이렇게 객체를 메모리 주소를 저장하는 방식으로 설계한 이유는, 복사할 때 객체 전체를 복사하면 메모리 낭비가 커질 수 있어서이다)&lt;/li&gt;
  &lt;li&gt;이러한 방식의 단점은 원시값과는 다르게 여러 개의 식별자가 하나의 객체를 공유하게 되어서 예상치 못한 문제가 발생할 수 있다&lt;/li&gt;
  &lt;li&gt;객체 값 자체를 복사하고 싶으면 깊은 복사를 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;깊은 복사를 지원하는 lodash 와 같은 라이브러리를 사용하면 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lee&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/js_primitive_and_object_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Sun, 21 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/js-primitive-and-object</link>
                <guid isPermaLink="true">http://localhost:4000/js-primitive-and-object</guid>
                
                <category>javascript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[NLP] 태스크(5): 기계 번역 (준비중)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Sun, 21 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/ai-nlp-task-machine-translation</link>
                <guid isPermaLink="true">http://localhost:4000/ai-nlp-task-machine-translation</guid>
                
                <category>NLP</category>
                
                
                <category>AI</category>
                
            </item>
        
            <item>
                <title>[Javascript]: 객체 리터럴</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#객체-리터럴&quot; id=&quot;markdown-toc-객체-리터럴&quot;&gt;객체 리터럴&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로퍼티&quot; id=&quot;markdown-toc-프로퍼티&quot;&gt;프로퍼티&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#메서드&quot; id=&quot;markdown-toc-메서드&quot;&gt;메서드&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;객체-리터럴&quot;&gt;객체 리터럴&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;객체 타입은 다양한 타입의 값을 하나의 단위로 구성한 복합적인 자료구조이다&lt;/li&gt;
  &lt;li&gt;객체는 프로퍼티와 메서드로 구성된 집합체이다&lt;/li&gt;
  &lt;li&gt;객체는 변경 가능한 자료구조이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lee&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;프로퍼티&quot;&gt;프로퍼티&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로퍼티 키가 네이밍 규칙을 따르지 않으면 따옴표로 감싸줘야 한다&lt;/li&gt;
  &lt;li&gt;프로퍼티 키로 숫자 리터럴을 사용하면 따옴표는 붙지 않지만 내부적으로 문자열로 변환된다&lt;/li&gt;
  &lt;li&gt;존재하지 않는 프로퍼티에 접근하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;를 반환한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메서드&quot;&gt;메서드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;메서드 내부에서 사용한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; 키워드는 객체 자신을 가리키는 참조변수다&lt;/li&gt;
  &lt;li&gt;ES6에서는 메서드를 정의할 때, 메서드 축약표현을 사용할 수 있다
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lee&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sat, 20 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/js-object-literal</link>
                <guid isPermaLink="true">http://localhost:4000/js-object-literal</guid>
                
                <category>javascript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[NLP] 태스크(4): 자연어 생성 (준비중)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Sat, 20 Jan 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/ai-nlp-task-nlg</link>
                <guid isPermaLink="true">http://localhost:4000/ai-nlp-task-nlg</guid>
                
                <category>NLP</category>
                
                
                <category>AI</category>
                
            </item>
        
    </channel>
</rss>