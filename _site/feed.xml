<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Code Museum</title>
        <description>Jay Tech personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 05 May 2022 02:44:48 +0900</pubDate>
        <lastBuildDate>Thu, 05 May 2022 02:44:48 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>Data Engineering Series [Part6]: 데이터 파이프라인 구축하기(1)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터-파이프라인-설계&quot; id=&quot;markdown-toc-데이터-파이프라인-설계&quot;&gt;데이터 파이프라인 설계&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;데이터-파이프라인-설계&quot;&gt;데이터 파이프라인 설계&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/data_engineering_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Thu, 21 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series6</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series6</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part5]: 데이터 멱등성과 ACID Transaction</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb&quot; target=&quot;_blank&quot;&gt;Avoiding Double Payments in a Distributed Payments System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/407507&quot; target=&quot;_blank&quot;&gt;Naver D2: DBMS는 어떻게 트랜잭션을 관리할까?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/cs/transactions-intro&quot; target=&quot;_blank&quot;&gt;Baeldung: Introduction to Transactions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://betterprogramming.pub/a-deep-dive-into-idempotence-1a39393df7e6&quot; target=&quot;_blank&quot;&gt;Yuchen Z., A Deep Dive Into Idempotence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=12f5wB2qHI8&quot; target=&quot;_blank&quot;&gt;Youtube: ACID 2.0: Designing Better API’s and Messages - Improving Talks Series&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 20 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series5</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series5</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Apache Spark Series [Part6]: 몽고DB에서 스파크(pyspark)로 데이터 읽어오기(feat.Docker)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#도커-컴포즈로-컨테이너-띄우기&quot; id=&quot;markdown-toc-도커-컴포즈로-컨테이너-띄우기&quot;&gt;도커 컴포즈로 컨테이너 띄우기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spark-client-컨테이너에서-pyspark-셸을-실행&quot; id=&quot;markdown-toc-spark-client-컨테이너에서-pyspark-셸을-실행&quot;&gt;spark-client 컨테이너에서 pyspark 셸을 실행&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pyspark-셸에서-몽고db와-연결&quot; id=&quot;markdown-toc-pyspark-셸에서-몽고db와-연결&quot;&gt;pyspark 셸에서 몽고DB와 연결&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;도커-컴포즈로-컨테이너-띄우기&quot;&gt;도커 컴포즈로 컨테이너 띄우기&lt;/h1&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spark-client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kimziont/spark:1.0&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spark-client&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spark-master&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-c&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;apt -y install python-is-python3&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sleep infinity&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;spark-master&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kimziont/spark-master:1.0&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spark-master&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4041:8080&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-c&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./spark/sbin/start-master.sh &amp;amp;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sleep infinity&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;spark-worker1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kimziont/spark-worker:1.0&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;worker1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spark-master&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4042:8081&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-c&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./spark/sbin/start-worker.sh spark://spark-master:7077 &amp;amp;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sleep infinity&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;spark-worker2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kimziont/spark-worker:1.0&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;worker2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spark-master&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4043:8081&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-c&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;./spark/sbin/start-worker.sh spark://spark-master:7077 &amp;amp;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;sleep infinity&lt;/span&gt;
    
    &lt;span class=&quot;na&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo:latest&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;27017:27017&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;MONGO_INITDB_ROOT_USERNAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;MONGO_INITDB_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;마스터의 UI는 디폴트로 8080포트로 보여준다, 워커는 8081포트이다&lt;/li&gt;
  &lt;li&gt;워커들은 마스터의 7077포트로 연결될 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;spark-client-컨테이너에서-pyspark-셸을-실행&quot;&gt;spark-client 컨테이너에서 pyspark 셸을 실행&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/pyspark &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt; spark://spark-master:7077 &lt;span class=&quot;nt&quot;&gt;--packages&lt;/span&gt; org.mongodb.spark:mongo-spark-connector_2.12:3.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;pyspark-셸에서-몽고db와-연결&quot;&gt;pyspark 셸에서 몽고DB와 연결&lt;/h1&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pyspark.sql import SparkSession

spark = SparkSession.builder.master('spark://spark-master:7077').config('spark.mongodb.input.uri', 'mongodb://root:root@mongodb:27017/quickstart.topicData?authSource=admin').getOrCreate()

df = spark.read.format(&quot;mongo&quot;).option(&quot;uri&quot;, &quot;mongodb://root:root@mongodb:27017/quickstart.topicData?authSource=admin&quot;).load()

df.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/manual/reference/connection-string/&quot; target=&quot;_blank&quot;&gt;MongoDB 공식문서: Connection String URI Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authSource&quot; target=&quot;_blank&quot;&gt;MongoDB 공식문서: Connection String URI Format: authSource&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/58305720/error-connecting-from-pyspark-to-mongodb-with-password&quot; target=&quot;_blank&quot;&gt;Error connecting from pyspark to mongodb with password&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 17 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spark-series6</link>
                <guid isPermaLink="true">http://localhost:4000/spark-series6</guid>
                
                <category>Spark</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>MySQL 옵티마이저를 이용한 실행 최적화</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392703&amp;amp;orderClick=LAG&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;Real MySQL 8.0 (1권) 책&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 13 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/mysql-series9</link>
                <guid isPermaLink="true">http://localhost:4000/mysql-series9</guid>
                
                <category>MySQL</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>MySQL 트랜잭션과 잠금</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#트랜잭션&quot; id=&quot;markdown-toc-트랜잭션&quot;&gt;트랜잭션&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#acid&quot; id=&quot;markdown-toc-acid&quot;&gt;ACID&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#트랜잭션-관련-실행-명령어&quot; id=&quot;markdown-toc-트랜잭션-관련-실행-명령어&quot;&gt;트랜잭션 관련 실행 명령어&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#페이지-캐시&quot; id=&quot;markdown-toc-페이지-캐시&quot;&gt;페이지 캐시&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#캐싱&quot; id=&quot;markdown-toc-캐싱&quot;&gt;캐싱&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#캐시-만료&quot; id=&quot;markdown-toc-캐시-만료&quot;&gt;캐시 만료&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#페이지-동기화&quot; id=&quot;markdown-toc-페이지-동기화&quot;&gt;페이지 동기화&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#페이지-고정&quot; id=&quot;markdown-toc-페이지-고정&quot;&gt;페이지 고정&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#페이지-교체-알고리즘&quot; id=&quot;markdown-toc-페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#복구&quot; id=&quot;markdown-toc-복구&quot;&gt;복구&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#wal&quot; id=&quot;markdown-toc-wal&quot;&gt;WAL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#언두undo-로그와-리두redo-로그&quot; id=&quot;markdown-toc-언두undo-로그와-리두redo-로그&quot;&gt;언두(Undo) 로그와 리두(Redo) 로그&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스틸steal과-포스force-정책&quot; id=&quot;markdown-toc-스틸steal과-포스force-정책&quot;&gt;스틸(Steal)과 포스(Force) 정책&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#동시성-제어&quot; id=&quot;markdown-toc-동시성-제어&quot;&gt;동시성 제어&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#잠금&quot; id=&quot;markdown-toc-잠금&quot;&gt;잠금&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#격리-수준&quot; id=&quot;markdown-toc-격리-수준&quot;&gt;격리 수준&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h1&gt;
&lt;p&gt;DBMS에서 트랜잭션이란 &lt;strong&gt;하나의 논리적 작업 단위&lt;/strong&gt;를 의미하며, &lt;strong&gt;여러 작업(DB의 읽기, 쓰기)을 한 단계로 표현&lt;/strong&gt;하는 방법입니다.&lt;/p&gt;

&lt;h2 id=&quot;acid&quot;&gt;ACID&lt;/h2&gt;

&lt;p&gt;이러한 트랜잭션을 정의하기 위해서는 다음의 4가지 속성이 보장되어야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원자성(Atomicity)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션은 더 작은 단계로 나눌 수 없습니다. 트랜잭션과 관련된 작업은 모두 실행되거나 모두 실패해야 합니다.&lt;/li&gt;
  &lt;li&gt;All or Nothing&lt;/li&gt;
  &lt;li&gt;ex) A에서 B로 계좌이체를 할 때, A가 출금이 되면 B도 반드시 입금이 되어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;일관성(Consistency)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션이 일어나더라도 데이터베이스의 제약이나 규칙은 그대로 지켜져야 합니다.&lt;/li&gt;
  &lt;li&gt;사용자가 제어할 수 있는 유일한 속성입니다.&lt;/li&gt;
  &lt;li&gt;ex) 고객 정보 DB에서 이름을 반드시 입력하도록 제약을 두었다면 트랜잭션 또한 이러한 제약을 가져야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;격리성(Isolation)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 트랜잭션은 다른 트랜잭션으로부터 간섭없이 독립적으로 수행되어야 합니다.&lt;/li&gt;
  &lt;li&gt;동시에 여러 개의 트랜잭션들이 수행될 때, 각 트랜잭션은 연속으로 실행된 것과 동일한 결과를 나타내야 합니다.&lt;/li&gt;
  &lt;li&gt;ex) A가 만원이 있는 계좌에서 B에게 3천원을 송금하던 도중 자신의 잔액을 확인할 때는 여전히 만원이 있어야 한다.&lt;/li&gt;
  &lt;li&gt;많은 데이터베이스는 성능상의 이유로 정의에 비해 약한 격리 수준을 사용합니다. (동시성 제어의 격리 수준 참고)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;지속성(Durability)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;커밋된 데이터는 장애가 발생 하더라도 데이터베이스에 저장되어야 한다.&lt;/li&gt;
  &lt;li&gt;ex) A에서 B로 송금이 완료되어 커밋을 했다면 시스템 중단, 정전으로 장애가 발생해도 DB에 데이터가 그대로 유지되어야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;트랜잭션-관련-실행-명령어&quot;&gt;트랜잭션 관련 실행 명령어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt;: A commit ends the current transaction and makes permanent all changes performed in the transaction. The transaction is a sequence of SQL statements that the database treats as a single unit. A commit also erases all savepoints in the transaction and releases transaction locks. After your data is committed, it is visible to other users of the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commit means save the cache changes to the database&lt;/p&gt;

&lt;p&gt;A SQL statement that ends a transaction, making permanent any changes made by the transaction. It is the opposite of rollback, which undoes any changes made in the transaction.&lt;/p&gt;

&lt;p&gt;InnoDB uses an optimistic mechanism for commits, so that changes can be written to the data files before the commit actually occurs. This technique makes the commit itself faster, with the tradeoff that more work is required in case of a rollback.&lt;/p&gt;

&lt;p&gt;By default, MySQL uses the autocommit setting, which automatically issues a commit following each SQL statement.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt;: A save writes your changes to the database, however at this point these changes are only visible to you within your transaction scope. The database has also generated undo information which contains the old values of your transaction which can be used to rollback your modifications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Flush&lt;/strong&gt;: flush() will synchronize your database with the current state of object/objects held in the memory but it does not commit the transaction. So, if you get any exception after flush() is called, then the transaction will be rolled back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To write changes to the database files, that had been buffered in a memory area or a temporary disk storage area. The InnoDB storage structures that are periodically flushed include the redo log, the undo log, and the buffer pool.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Rollback&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;페이지-캐시&quot;&gt;페이지 캐시&lt;/h1&gt;

&lt;p&gt;대부분의 데이터베이스는 상대적으로 속도가 느린 영구 저장소(디스크)에 접근하는 회수를 줄이기 위해 페이지(읽고 쓰는 가장 작은 단위)를 메모리에 캐시합니다. 이를 페이지 캐시(page cache)라고 하며 이 때의 메모리 영역을 버퍼 풀(buffer pool)이라고 합니다. 메모리에 있는 페이지에 변경사항이 생겼을 때 아직 디스크로 플러시(flush)되지 않은 페이지를 더티(dirty) 페이지라고 합니다.&lt;/p&gt;

&lt;p&gt;정리하면 페이지 캐시의 주요 기능은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;페이지를 메모리에 &lt;strong&gt;캐시함으로써 빠른 읽기&lt;/strong&gt;를 지원&lt;/li&gt;
  &lt;li&gt;쓰기 요청이 발생할때마다 디스크로 플러시하지 않고 &lt;strong&gt;버퍼링 후 플러시&lt;/strong&gt; 할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;캐싱&quot;&gt;캐싱&lt;/h2&gt;
&lt;p&gt;스토리지 엔진이 특정 페이지를 요청하면 우선 캐시된 버전이 있는지 확인합니다. 페이지가 있다면 반환하고 없다면 페이지 번호를 물리적 주소로 변환해 해당 페이지를 메모리로 복사하고 반환합니다.&lt;/p&gt;

&lt;p&gt;이때 해당 페이지가 저장된 버퍼는 참조상태라고 표현합니다. 작업이 끝나면 스토리지 엔진은 참조 해제해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;캐시-만료&quot;&gt;캐시 만료&lt;/h2&gt;
&lt;p&gt;일반적으로 버퍼 풀은 데이터셋보다 크기가 작기 때문에 새로운 페이지를 추가하기 위해 기존 페이지를 만료시키는 작업도 필요하게 됩니다. 페이지가 동기화됐고 고정 또는 참조 상태가 아니라면 바로 제거할 수 있습니다. 페이지를 제거할 때에는 페이지와 관련된 로그도 WAL에서 삭제합니다.&lt;/p&gt;

&lt;h2 id=&quot;페이지-동기화&quot;&gt;페이지 동기화&lt;/h2&gt;
&lt;p&gt;위에서 버퍼 풀의 메모리 용량을 관리하기 위해서는 캐시가 만료된 페이지는 제거해야 한다고 했습니다. 그리고 이때 페이지를 제거하기 위해서는 우선 페이지가 동기화되어야 한다고 했습니다. &lt;strong&gt;페이지 동기화는 더티페이지를 디스크에 반영(flush)하는 것&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;이렇게 플러시하는 것은 언제 얼마나 자주하는 것이 좋을까요? 변경 사항이 생길 때마다 플러시하게 되면 데이터 손실 가능성을 줄일 수 있겠지만 결국 잦은 디스크 접근을 유발하기 때문에 트레이드 오프가 있습니다. 그래서 데이터베이스에서는 이러한 &lt;strong&gt;플러시를 주기적으로 하게 되며 이 시점을 체크포인트(checkpoint)&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;p&gt;체크포인트 시점에 플러시가 일어나는데 이 때 플러시는 디스크에 있는 데이터베이스에 데이터가 저장되는 것을 의미하지는 않습니다. &lt;strong&gt;플러시는 메모리에 있는 페이지에 요청된 작업 명령들을 디스크의 WAL(Write Ahead Log)에 남겨두고 페이지와 싱크를 맞추는 것&lt;/strong&gt;입니다. &lt;del&gt;(보통 커밋이 일어나면 플러시도 그 과정에 포함되어 플러시를 디스크에 저장하는 것으로 정의하기도 함. 애매하네)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;정리하면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;캐시가 만료된 페이지를 삭제하려면 먼저 페이지를 동기화 해야 한다.&lt;/li&gt;
  &lt;li&gt;동기화된 시점을 체크포인트라고 한다.&lt;/li&gt;
  &lt;li&gt;동기화는 플러시하는 것이며 플러시는 페이지의 변경시 요청된 작업 명령을 디스크의 WAL에 기록하는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;페이지-고정&quot;&gt;페이지 고정&lt;/h2&gt;
&lt;p&gt;가까운 시간 내에 요청될 확률이 높은 페이지는 캐시에 가둬 두는 것이 좋습니다. 이를 페이지 고정(pinning)이라고 합니다. 예를 들어 이진 트리 탐색에서 트리의 상위 노드는 접근될 확률이 높기 때문에 이러한 상위 노드는 고정해두면 성능 향상에 도움이 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/h2&gt;
&lt;p&gt;저장 공간이 부족한 캐시에 새로운 페이지를 추가하려면 일부 페이지를 만료시켜야 한다고 했습니다. 하지만 빈번하게 요청될 수 있는 페이지를 만료시키면 같은 페이지를 여러 차례 페이징하는 상황이 발생할 수 있습니다. 페이지 교체 알고리즘은 다시 요청될 확률이 가장 낮은 페이지를 만료시키고 해당 위치에 새로운 페이지를 페이징합니다.&lt;/p&gt;

&lt;p&gt;하지만 페이지의 요청 순서는 일반적으로 특정 패턴이 없기 때문에 어떤 페이지가 다시 요청될지 정확하게 예측하는 것은 불가능 합니다. 그래서 보통은 그 기준을 &lt;strong&gt;최근에 요청&lt;/strong&gt;되었는지 여부, &lt;strong&gt;요청된 빈도수&lt;/strong&gt; 등으로 합니다. 관련 알고리즘에는 FIFO(First In First Out), LRU(Least Recently Used), LFU(Least Frequently Used), CLOCK-sweep 알고리즘이 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;복구&quot;&gt;복구&lt;/h1&gt;
&lt;p&gt;데이터베이스 시스템은 각자 다른 안정성과 신뢰성 문제를 내재한 하드웨어와 소프트웨어 계층으로 구성됩니다. 따라서 여러 지점에서 장애가 발생할 수 있고, 데이터베이스 개발자는 이러한 장애 시나리오를 고려해 데이터를 저장해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;wal&quot;&gt;WAL&lt;/h2&gt;
&lt;p&gt;선행 기록 로그(WAL)는 장애 및 트랜잭션 복구를 위해 디스크에 저장하는 추가 자료 구조입니다. WAL은 페이지에 캐시된 데이터가 디스크로 커밋(&lt;del&gt;책에서는 플러시라고 표기&lt;/del&gt;)될 때 까지 관련 작업 이력의 유일한 디스크 기반 복사본입니다.&lt;/p&gt;

&lt;p&gt;WAL에 있는 각각의 로그에는 단조 증가하는 고유 로그 시퀀스 번호(LSN: Log Sequence Number)가 있습니다.&lt;/p&gt;

&lt;p&gt;WAL의 주요 기능은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;장애 발생 시 WAL을 기반으로 마지막 메모리 상태를 재구성한다. (undo)&lt;/li&gt;
  &lt;li&gt;WAL의 로그를 재수행해서 트랜잭션을 커밋한다. (redo)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언두undo-로그와-리두redo-로그&quot;&gt;언두(Undo) 로그와 리두(Redo) 로그&lt;/h2&gt;
&lt;p&gt;UNDO는 왜 필요할까?&lt;/p&gt;

&lt;p&gt;오퍼레이션 수행 중에 수정된 페이지들이 버퍼 관리자의 버퍼 교체 알고리즘에 따라서 디스크에 출력될 수 있다. 버퍼 교체는 전적으로 버퍼의 상태에 따라서 결정되며, 일관성 관점에서 봤을 때는 임의의 방식으로 일어나게 된다. 즉 아직 완료되지 않은 트랜잭션이 수정한 페이지들도 디스크에 출력될 수 있으므로, 만약 해당 트랜잭션이 어떤 이유든 정상적으로 종료될 수 없게 되면 트랜잭션이 변경한 페이지들은 원상 복구되어야 한다. 이러한 복구를 UNDO라고 한다. 만약 버퍼 관리자가 트랜잭션 종료 전에는 어떤 경우에도 수정된 페이지들을 디스크에 쓰지 않는다면, UNDO 오퍼레이션은 메모리 버퍼에 대해서만 이루어지면 되는 식으로 매우 간단해질 수 있다. 이 부분은 매력적이지만 이 정책은 매우 큰 크기의 메모리 버퍼가 필요하다는 문제점을 가지고 있다. 수정된 페이지를 디스크에 쓰는 시점을 기준으로 다음과 같은 두 개의 정책으로 나누어 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;STEAL: 수정된 페이지를 언제든지 디스크에 쓸 수 있는 정책&lt;/li&gt;
  &lt;li&gt;No-STEAL: 수정된 페이지들을 최소한 트랜잭션 종료 시점(EOT, End of Transaction)까지는 버퍼에 유지하는 정책
STEAL 정책은 수정된 페이지가 어떠한 시점에도 디스크에 써질 수 있기 때문에 필연적으로 UNDO 로깅과 복구를 수반하는데, 거의 모든 DBMS가 채택하는 버퍼 관리 정책이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REDO는 왜 필요할까?&lt;/p&gt;

&lt;p&gt;이제는 UNDO 복구의 반대 개념인 REDO 복구에 대해서 알아볼 것인데, 앞서 설명한 바와 같이 커밋한 트랜잭션의 수정은 어떤 경우에도 유지(durability)되어야 한다. 이미 커밋한 트랜잭션의 수정을 재반영하는 복구 작업을 REDO 복구라고 하는데, REDO 복구 역시 UNDO 복구와 마찬가지로 버퍼 관리 정책에 영향을 받는다. 트랜잭션이 종료되는 시점에 해당 트랜잭션이 수정한 페이지들을 디스크에도 쓸 것인가 여부로 두 가지 정책이 구분된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FORCE: 수정했던 모든 페이지를 트랜잭션 커밋 시점에 디스크에 반영하는 정책&lt;/li&gt;
  &lt;li&gt;No-FORCE: 수정했던 페이지를 트랜잭션 커밋 시점에 디스크에 반영하지 않는 정책&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 주의 깊게 봐야 할 부분은 No-FORCE 정책이 수정했던 페이지(데이터)를 디스크에 반영하지 않는다는 점이지 커밋 시점에 어떠한 것도 쓰지 않는다는 것은 아니다. 어떤 일들을 했었다고 하는 로그는 기록하게 되는데 이 부분은 아래에서 자세히 설명한다.
FORCE 정책을 따르면 트랜잭션이 커밋되면 수정되었던 페이지들이 이미 디스크 상의 데이터베이스에 반영되었으므로 REDO 복구가 필요 없게 된다. 반면에 No-FORCE 정책을 따른다면 커밋한 트랜잭션의 내용이 디스크 상의 데이터베이스 상에 반영되어 있지 않을 수 있기 때문에 반드시 REDO 복구가 필요하게 된다. 사실 FORCE 정책을 따르더라도 데이터베이스 백업으로부터의 복구, 즉 미디어(media) 복구 시에는 REDO 복구가 요구된다. 거의 모든 DBMS가 채택하는 정책은 No-FORCE 정책이다.&lt;/p&gt;

&lt;p&gt;정리해보면 DBMS는 버퍼 관리 정책으로 STEAL과 No-FORCE 정책을 채택하고 있어, 이로 인해서 UNDO 복구와 REDO 복구가 모두 필요하게 된다.&lt;/p&gt;

&lt;h2 id=&quot;스틸steal과-포스force-정책&quot;&gt;스틸(Steal)과 포스(Force) 정책&lt;/h2&gt;
&lt;p&gt;DBMS는 스틸/노스틸 정책과 포스/노포스 정책을 기반으로 메모리에 캐시된 변경 사항을 &lt;strong&gt;디스크로 플러시하는 시점을 결정&lt;/strong&gt;합니다. 이러한 정책들은 &lt;strong&gt;복구 알고리즘 선택에 큰 영향&lt;/strong&gt;을 미칩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스틸(Steal)&lt;/strong&gt;&lt;br /&gt;
트랜잭션이 완료되지 않은 상태에서 데이터를 디스크에 기록할 것인가?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Steal&lt;/strong&gt;: 기록한다(Undo 필요)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No-Steal&lt;/strong&gt;: 기록하지 않는다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;버퍼 관리자가 트랜잭션 종료 전에는 어떤 경우에도 수정된 페이지들을 디스크에 쓰지 않는다면, UNDO 오퍼레이션은 메모리 버퍼에 대해서만 이루어지면 되는 식으로 매우 간단해질 수 있다. 이 부분은 매력적이지만 이 정책은 매우 큰 크기의 메모리 버퍼가 필요하다는 문제점을 가지고 있다. 수정된 페이지를 디스크에 쓰는 시점을 기준으로 다음과 같은 두 개의 정책으로 나누어 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;STEAL: 수정된 페이지를 언제든지 디스크에 쓸 수 있는 정책&lt;/li&gt;
  &lt;li&gt;No-STEAL: 수정된 페이지들을 최소한 트랜잭션 종료 시점(EOT, End of Transaction)까지는 버퍼에 유지하는 정책&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;STEAL 정책은 수정된 페이지가 어떠한 시점에도 디스크에 써질 수 있기 때문에 필연적으로 UNDO 로깅과 복구를 수반하는데, 거의 모든 DBMS가 채택하는 버퍼 관리 정책이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;포스(Force)&lt;/strong&gt;&lt;br /&gt;
트랜잭션이 완료된 후 바로 데이터를 디스크에 기록할 것인가?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Force&lt;/strong&gt;: 바로 기록한다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No-Force&lt;/strong&gt;: 바로 기록하지 않는다(Redo 필요)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;성능상의 이유로 때로는 트랜잭션이 완료되기도 전에 디스크에 기록하기도 하고 완료되고 나서도 기록하지 않기도 합니다.&lt;/p&gt;

&lt;p&gt;스틸과 포스 정책은 트랜잭션 언두와 리두 작업과 관련되기 때문에 매우 중요합니다.&lt;/p&gt;

&lt;h1 id=&quot;동시성-제어&quot;&gt;동시성 제어&lt;/h1&gt;

&lt;h2 id=&quot;잠금&quot;&gt;잠금&lt;/h2&gt;

&lt;h2 id=&quot;격리-수준&quot;&gt;격리 수준&lt;/h2&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158392703&amp;amp;orderClick=LAG&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;Real MySQL 8.0 (1권) 책&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791161754963&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;데이터베이스 인터널스 책&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/407507&quot; target=&quot;_blank&quot;&gt;Naver D2: DBMS는 어떻게 트랜잭션을 관리할까?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://happycloud-lee.tistory.com/156&quot; target=&quot;_blank&quot;&gt;온달의 해피클라우드: ACID 이해하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/sory1008/220708909773#&quot; target=&quot;_blank&quot;&gt;노력 이기는 재능 없고 노력 외면하는 결과도 없다: [MySQL Internals] FLUSH&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.6/en/glossary.html#glos_flush&quot; target=&quot;_blank&quot;&gt;MySQL 공식문서: MySQL Glossary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4201455/sqlalchemy-whats-the-difference-between-flush-and-commit&quot; target=&quot;_blank&quot;&gt;stackoverflow: SQLAlchemy: What’s the difference between flush() and commit()?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 12 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/mysql-series8</link>
                <guid isPermaLink="true">http://localhost:4000/mysql-series8</guid>
                
                <category>MySQL</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>Network Series [Part8]: SSH(Secure SHell)이란 무엇인가</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://doubleoctopus.com/security-wiki/protocol/secure-socket-shell/&quot;&gt;The Secret Security Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 11 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/network-series8</link>
                <guid isPermaLink="true">http://localhost:4000/network-series8</guid>
                
                <category>Network</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Network Series [Part7]: 소켓(Socket)이란 무엇인가</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/net_20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://helloworld-88.tistory.com/215&quot; target=&quot;_blank&quot;&gt;곰돌이 놀이터: 소켓 통신이란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://junb51.tistory.com/2&quot; target=&quot;_blank&quot;&gt;아무거나올리는블로그: Socket Programming - Socket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15108139/difference-between-socket-programming-and-http-programming/47637847#47637847&quot; target=&quot;_blank&quot;&gt;stackoverflow: difference between socket programming and Http programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 11 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/network-series7</link>
                <guid isPermaLink="true">http://localhost:4000/network-series7</guid>
                
                <category>Network</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Kafka Series [Part7]: Kafka Connector</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#why-connector&quot; id=&quot;markdown-toc-why-connector&quot;&gt;Why Connector?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kafka-connect&quot; id=&quot;markdown-toc-kafka-connect&quot;&gt;Kafka Connect&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#kafka-connect-구성요소&quot; id=&quot;markdown-toc-kafka-connect-구성요소&quot;&gt;Kafka Connect 구성요소&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#connect-connector&quot; id=&quot;markdown-toc-connect-connector&quot;&gt;Connect? Connector?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#standalone과-distributed-workers&quot; id=&quot;markdown-toc-standalone과-distributed-workers&quot;&gt;Standalone과 Distributed Workers&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#debezium&quot; id=&quot;markdown-toc-debezium&quot;&gt;Debezium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#도커-컴포즈-파일&quot; id=&quot;markdown-toc-도커-컴포즈-파일&quot;&gt;도커 컴포즈 파일&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kafka-컨테이너에서-워커-실행-모드-설정&quot; id=&quot;markdown-toc-kafka-컨테이너에서-워커-실행-모드-설정&quot;&gt;kafka 컨테이너에서 워커 실행 모드 설정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kafka-컨테이너에서-커넥터-워커-실행&quot; id=&quot;markdown-toc-kafka-컨테이너에서-커넥터-워커-실행&quot;&gt;kafka 컨테이너에서 커넥터 워커 실행&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#connect-제외한-아무-컨테이너나의-경우-kafka-컨테이너에서-rest-api를-이용해-커넥터-등록실행&quot; id=&quot;markdown-toc-connect-제외한-아무-컨테이너나의-경우-kafka-컨테이너에서-rest-api를-이용해-커넥터-등록실행&quot;&gt;connect 제외한 아무 컨테이너(나의 경우 kafka 컨테이너)에서 REST API를 이용해 커넥터 등록/실행&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#기타-커넥터-관련-rest-api&quot; id=&quot;markdown-toc-기타-커넥터-관련-rest-api&quot;&gt;기타 커넥터 관련 REST API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#커넥터와-백엔드java-spring의-관계&quot; id=&quot;markdown-toc-커넥터와-백엔드java-spring의-관계&quot;&gt;커넥터와 백엔드(Java Spring)의 관계&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;why-connector&quot;&gt;Why Connector?&lt;/h1&gt;

&lt;p&gt;커넥터 없이도 프로듀서 컨슈머 사용 가능&lt;/p&gt;

&lt;p&gt;하지만 커넥터를 이용하면 카프카를 사용하면서 발생할 수 있는 장애에 대한 복구를 비롯한 필요한 기능들을 따로 개발할 필요없이 사용가능&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kafka_56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;kafka-connect&quot;&gt;Kafka Connect&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka Connect는 다른 데이터 시스템을 Kafka와 통합하는 과정을 표준화한 프레임워크&lt;/li&gt;
  &lt;li&gt;통합을 위한 Connector 개발, 배포, 관리를 단순화&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kafka-connect-구성요소&quot;&gt;Kafka Connect 구성요소&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Connector&lt;/strong&gt;: Task를 관리하여 데이터 스트리밍을 조정하는 jar파일&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt;: 데이터 시스템간의 전송 방법을 구현한 구현체&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Worker&lt;/strong&gt;: Connector와 Task를 실행하는 프로세스&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Converter&lt;/strong&gt;: 데이터 포맷을 변환하는데 사용하는 구성요소&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trasform&lt;/strong&gt;: 데이터를 변환하는데 사용하는 구성요소&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/kafka_55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect-connector&quot;&gt;Connect? Connector?&lt;/h2&gt;
&lt;p&gt;커넥트는 커넥터를 실행시키기 위한 환경(프레임워크)을 제공해줌. 커넥트 위에서 커넥터 설치하고 커넥터(jar파일) 실행하면 됨&lt;/p&gt;

&lt;p&gt;커넥트 이미지로 인스턴스 띄우고 거기서 각종 커넥터 다운로드 받아서 커넥터를 몽고db, mysql, s3같은데 RESTapi로 등록&lt;/p&gt;

&lt;h2 id=&quot;standalone과-distributed-workers&quot;&gt;Standalone과 Distributed Workers&lt;/h2&gt;

&lt;p&gt;Worker 프로세스를 한 개만 띄우는 Standalone 모드와 여러개 실행시키는 Distributed 모드가 있다.&lt;/p&gt;

&lt;p&gt;보통 확장성과 내결함성을 이유로 Distributed 모드를 많이 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kafka_58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;debezium&quot;&gt;Debezium&lt;/h1&gt;

&lt;p&gt;Debezium은 변경 데이터 캡처를 위한 오픈 소스 분산 플랫폼이다.&lt;/p&gt;

&lt;p&gt;Debezium 에서 변경된 데이터 캡쳐를 위해 mysql의 경우 binlog, postgresql의 경우 replica slot(logical)을 이용하여 데이터베이스에 커밋하는 데이터를 감시하여 Kakfa, DB, ElasticSearch 등 미들웨어에 이벤트를 전달한다&lt;/p&gt;

&lt;h1 id=&quot;도커-컴포즈-파일&quot;&gt;도커 컴포즈 파일&lt;/h1&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.2'&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongo:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mongodb&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;27017:27017&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MONGO_INITDB_ROOT_USERNAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MONGO_INITDB_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  

  &lt;span class=&quot;na&quot;&gt;zookeeper&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper:3.7&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2181:2181&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ZOO_MY_ID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;ZOO_PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2181&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data/zookeeper/data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data/zookeeper/datalog:/datalogco&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wurstmeister/kafka&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9092:9092&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_BROKER_ID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_ZOOKEEPER_CONNECT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper:2181&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_LISTENERS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_ADVERTISED_LISTENERS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_LISTENER_SECURITY_PROTOCOL_MAP&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_INTER_BROKER_LISTENER_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PLAINTEXT&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./data/kafka/data:/tmp/kafka-logs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zookeeper&lt;/span&gt;
  
  &lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;confluentinc/cp-kafka-connect:latest.arm64&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;connect1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_BOOTSTRAP_SERVERS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kafka:29092&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_REST_ADVERTISED_HOST_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;connect1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_GROUP_ID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;connect-cluster&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_KEY_CONVERTER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.connect.json.JsonConverter&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_VALUE_CONVERTER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.connect.json.JsonConverter&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_CONFIG_STORAGE_TOPIC&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;connect-configs&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_OFFSET_STORAGE_TOPIC&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;connect-offsets&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_STATUS_STORAGE_TOPIC&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;connect-status&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_STATUS_STORAGE_REPLICATION_FACTOR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_PLUGIN_PATH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/java/,/usr/share/confluent-hub-components/mongodb-kafka-connect-mongodb/lib/&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;CONNECT_REST_PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8083&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;18083:8083&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./connectors/1:/usr/share/confluent-hub-components&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;-c&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.7.0&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;/etc/confluent/docker/run &amp;amp;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;sleep infinity&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile_producer&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile_consumer&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mongodb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;kafka-컨테이너에서-워커-실행-모드-설정&quot;&gt;kafka 컨테이너에서 워커 실행 모드 설정&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opt/kafka/config
vi connect-distributed.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# connect 컨테이너에서 커넥터(jar파일)가 설치되어 있는 경로 설정&lt;/span&gt;
plugin.path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/share/java/,/usr/share/confluent-hub-components/mongodb-kafka-connect-mongodb/lib/

&lt;span class=&quot;c&quot;&gt;# 컨버터 설정&lt;/span&gt;
key.converter&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.apache.kafka.connect.json.JsonConverter
value.converter&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;org.apache.kafka.connect.json.JsonConverter
key.converter.schemas.enable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;value.converter.schemas.enable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;kafka-컨테이너에서-커넥터-워커-실행&quot;&gt;kafka 컨테이너에서 커넥터 워커 실행&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/connect-distributed.sh ./config/connect-distributed.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;connect-제외한-아무-컨테이너나의-경우-kafka-컨테이너에서-rest-api를-이용해-커넥터-등록실행&quot;&gt;connect 제외한 아무 컨테이너(나의 경우 kafka 컨테이너)에서 REST API를 이용해 커넥터 등록/실행&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Accept:application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type:application/json'&lt;/span&gt; http://connect1:8083/connectors &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;name&quot;: &quot;mongo-sink&quot;,
      &quot;config&quot;: {
         &quot;connector.class&quot;:&quot;com.mongodb.kafka.connect.MongoSinkConnector&quot;,
         &quot;connection.user&quot;: &quot;root&quot;,
         &quot;connectioin.password&quot;: &quot;root&quot;,
         &quot;connection.uri&quot;:&quot;mongodb://root:root@mongodb:27017&quot;,
         &quot;database&quot;:&quot;quickstart&quot;,
         &quot;collection&quot;:&quot;topicData&quot;,
         &quot;topics&quot;:&quot;taxi&quot;,
        &quot;key.converter&quot;: &quot;org.apache.kafka.connect.json.JsonConverter&quot;,
        &quot;value.converter&quot;: &quot;org.apache.kafka.connect.json.JsonConverter&quot;,
        &quot;key.converter.schemas.enable&quot;: &quot;false&quot;,
        &quot;value.converter.schemas.enable&quot;: &quot;false&quot;
         }
     }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;기타-커넥터-관련-rest-api&quot;&gt;기타 커넥터 관련 REST API&lt;/h1&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 커넥터 상태 확인(커넥터 등록과 태스크 실행이 RUNNING이면 성공)&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://connect1:8083/connectors/mongo-sink/status

&lt;span class=&quot;c&quot;&gt;# 커넥터 삭제&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; DELETE http://connect1:8083/connectors/mongo-sink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;커넥터와-백엔드java-spring의-관계&quot;&gt;커넥터와 백엔드(Java Spring)의 관계&lt;/h1&gt;

&lt;p&gt;커넥터가 있으면 알아서 커넥터가 토픽에서 데이터를 가져와 DB로 잘 반영을하는 것 같다.&lt;/p&gt;

&lt;p&gt;이런거보면 딱히 스프링부트 같은 걸 이용해서 백엔드 프로그램을 개발하지 않아도 되는 것 같아보인다.&lt;/p&gt;

&lt;p&gt;하지만 만약 내가 스프링부트 같은 거를 엄청 잘 알아서 직접 개발하는데 불편함이 없다면 왠만한 것들은 스프링 부트를 이용하고 부분적으로 특정 프로듀서/컨슈머는 커넥터를 사용하는 것이 아마 가장 좋은 방법이 아닐까 라는 생각이 든다.&lt;/p&gt;

&lt;p&gt;나는 지금 스프링부트를 모른다. 심지어 자바 언어도 써본 적이 없다. 커넥터는 아예 러닝 커브가 없는 것은 아니지만 훨씬 쉽다.&lt;/p&gt;

&lt;p&gt;하지만 백엔드의 중요한 철학들을 공부하는 것은 굉장히 중요해보인다.&lt;/p&gt;

&lt;p&gt;결론은 지금 당장 구현이 필요한 부분들은 커넥터로 구현을 하고, 백엔드 공부는 스프링 부트를 통해서 계속 하자.&lt;/p&gt;

&lt;p&gt;백엔드 공부를 스프링 부트로 하기로 한 이유는, 내가 사용하고 있는 언어는 파이썬이지만 데이터 엔지니어링 공부에서 자바 언어는 필요해보인다. (데이터 엔지니어링 분야의 관련 오픈 소스들이 자바로 많이 개발됨)&lt;/p&gt;

&lt;p&gt;파이썬으로 백엔드를 구현하도록 해주는 장고나 플라스크도 있지만, 아직은 스프링 부트를 사용하는 비중이 더 커보이고 뭔가 공부하는 관점에서는 스프링 부트가 더 도움이 많이 될 것 같다.&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.confluent.io/5.0.0/installation/docker/docs/installation/connect-avro-jdbc.html&quot; target=&quot;_blank&quot;&gt;Confluent 공식문서: Kafka Connect Tutorial on Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/confluentinc/cp-kafka-connect&quot; target=&quot;_blank&quot;&gt;Connect 도커 이미지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/hub/mongodb/kafka-connect-mongodb&quot; target=&quot;_blank&quot;&gt;Confluent 공식문서: MongoDB 커넥터&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/docs/kafka-connector/current/&quot; target=&quot;_blank&quot;&gt;MongoDB 공식문서: MongoDB 커넥터를 위한 Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kudl.tistory.com/entry/CDC-debezium-설정&quot; target=&quot;_blank&quot;&gt;kudl: CDC - debezium 설정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.confluent.io/learn-kafka/kafka-connect/docker/&quot; target=&quot;_blank&quot;&gt;Confluent 공식문서: 커넥터 관련 강의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.confluent.io/home/connect/self-managed/userguide.html&quot; target=&quot;_blank&quot;&gt;Confluent 공식문서: Connect 관련 configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sup2is.github.io/2020/06/08/kafka-connect-example.html&quot; target=&quot;_blank&quot;&gt;sup2is: Kafka Connect로 데이터 허브 구축하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mongodb-university/kafka-edu/tree/main/docs-examples/examples/v1.7/quickstart&quot; target=&quot;_blank&quot;&gt;깃허브: mongodb-university/kafka-edu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained/&quot; target=&quot;_blank&quot;&gt;Kafka Connect Deep Dive – Converters and Serialization Explained&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongsil-jeong.tistory.com/35&quot; target=&quot;_blank&quot;&gt;정몽실이: 카프카 커넥트 실행&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/62728894/spring-kafka-jdbc-connector-compatibility&quot;&gt;Stackoverflow: Connector and Spring Kafka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 11 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/kafka-series7</link>
                <guid isPermaLink="true">http://localhost:4000/kafka-series7</guid>
                
                <category>Kafka</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Finance Series [Part3]: 펀더멘털 분석</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791160077131&amp;amp;orderClick=LAG&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;미국 주식 투자 바이블 책&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 10 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/finance-series2</link>
                <guid isPermaLink="true">http://localhost:4000/finance-series2</guid>
                
                <category>Finance</category>
                
                
                <category>Economics</category>
                
            </item>
        
            <item>
                <title>Finance Series [Part2]: 연방 준비 시스템의 이해</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791160077131&amp;amp;orderClick=LAG&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;미국 주식 투자 바이블 책&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 10 Apr 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/finance-series1</link>
                <guid isPermaLink="true">http://localhost:4000/finance-series1</guid>
                
                <category>Finance</category>
                
                
                <category>Economics</category>
                
            </item>
        
    </channel>
</rss>