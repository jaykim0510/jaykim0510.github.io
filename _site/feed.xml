<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Code Museum</title>
        <description>Jay Tech personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 12 Aug 2022 23:41:32 +0900</pubDate>
        <lastBuildDate>Fri, 12 Aug 2022 23:41:32 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>Data Engineering Series [Part26]: I ü§ç Logs(2) Data Integration</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#two-complications&quot; id=&quot;markdown-toc-two-complications&quot;&gt;Two Complications&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#data-is-more-diverse&quot; id=&quot;markdown-toc-data-is-more-diverse&quot;&gt;Data is More Diverse&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#the-explosion-of-specialized-data-systems&quot; id=&quot;markdown-toc-the-explosion-of-specialized-data-systems&quot;&gt;The Explosion of Specialized Data Systems&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#log-structured-data-flow&quot; id=&quot;markdown-toc-log-structured-data-flow&quot;&gt;Log-Structured Data Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#experience-at-linkedin&quot; id=&quot;markdown-toc-experience-at-linkedin&quot;&gt;Experience at LinkedIn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#relationship-to-etl-and-data-warehouse&quot; id=&quot;markdown-toc-relationship-to-etl-and-data-warehouse&quot;&gt;Relationship to ETL and Data Warehouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#etl-and-scalability&quot; id=&quot;markdown-toc-etl-and-scalability&quot;&gt;ETL and Scalability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-should-we-put-the-data-transformations&quot; id=&quot;markdown-toc-where-should-we-put-the-data-transformations&quot;&gt;Where Should We Put the Data Transformations?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#decoupling-systems&quot; id=&quot;markdown-toc-decoupling-systems&quot;&gt;Decoupling Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scaling-a-log&quot; id=&quot;markdown-toc-scaling-a-log&quot;&gt;Scaling a Log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Ï∞∏Í≥†&quot; id=&quot;markdown-toc-Ï∞∏Í≥†&quot;&gt;Ï∞∏Í≥†&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Data Integration and Logs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Data Integration means making available all the data (that an organization has) to all the services and systems that need it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The more recognizable term ETL(populating a relational data warehouse) usually covers only a limited part of data integration.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Capturing all the relevant data and being able to put it together in an applicable processing environment&lt;/li&gt;
  &lt;li&gt;This data has to be modeled in a uniform way to make it easy to read and process&lt;/li&gt;
  &lt;li&gt;Process this data in various ways: MapReduce, real-time query systems, ans so on&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Focus on step-by-step&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reliable and complete data flow&lt;/li&gt;
  &lt;li&gt;Refining data modeling and consistency&lt;/li&gt;
  &lt;li&gt;Better visualization, reporting, algorithmic processing and prediction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How can we build reliable data flow throughout all the data systems?&lt;/p&gt;

&lt;h1 id=&quot;two-complications&quot;&gt;Two Complications&lt;/h1&gt;

&lt;p&gt;Two things have made data integration an increasingly difficult proflem.&lt;/p&gt;

&lt;h2 id=&quot;data-is-more-diverse&quot;&gt;Data is More Diverse&lt;/h2&gt;

&lt;p&gt;Transactional data - things that &lt;strong&gt;are&lt;/strong&gt;,  Event data - things that &lt;strong&gt;happen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Log = Data structure what event data is logged&lt;/p&gt;

&lt;p&gt;Event data is generated from Web service, Financial organization, IoT&lt;/p&gt;

&lt;p&gt;This type of event data shakes up traditional data integration approaches because it tends to be several orders of magnitude larger than transactional data.&lt;/p&gt;

&lt;h2 id=&quot;the-explosion-of-specialized-data-systems&quot;&gt;The Explosion of Specialized Data Systems&lt;/h2&gt;

&lt;p&gt;ex. OLAP, Search service, Batch processing, Graph analysis&lt;/p&gt;

&lt;h1 id=&quot;log-structured-data-flow&quot;&gt;Log-Structured Data Flow&lt;/h1&gt;

&lt;p&gt;Log is the natural problem data structure for handling data flow between systems.&lt;/p&gt;

&lt;h1 id=&quot;experience-at-linkedin&quot;&gt;Experience at LinkedIn&lt;/h1&gt;

&lt;h1 id=&quot;relationship-to-etl-and-data-warehouse&quot;&gt;Relationship to ETL and Data Warehouse&lt;/h1&gt;

&lt;h1 id=&quot;etl-and-scalability&quot;&gt;ETL and Scalability&lt;/h1&gt;

&lt;h1 id=&quot;where-should-we-put-the-data-transformations&quot;&gt;Where Should We Put the Data Transformations?&lt;/h1&gt;

&lt;h1 id=&quot;decoupling-systems&quot;&gt;Decoupling Systems&lt;/h1&gt;

&lt;h1 id=&quot;scaling-a-log&quot;&gt;Scaling a Log&lt;/h1&gt;

&lt;h1 id=&quot;Ï∞∏Í≥†&quot;&gt;Ï∞∏Í≥†&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewEng.laf?barcode=9781491909386&amp;amp;ejkGb=BNT&amp;amp;mallGb=ENG&quot; target=&quot;_blank&quot;&gt;Ï±Ö I Heart Logs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/logika-io/try-kill-batch-processing-with-unified-log-stream-processing-d92709117f74&quot; target=&quot;_blank&quot;&gt;Try Kill batch processing with unified log stream processing‚Ä¶&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 01 Aug 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series26</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series26</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part25]: I ü§ç Logs(1) Introduction</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-log&quot; id=&quot;markdown-toc-what-is-a-log&quot;&gt;What Is a Log?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#logs-in-database&quot; id=&quot;markdown-toc-logs-in-database&quot;&gt;Logs in Database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#logs-in-distributed-system&quot; id=&quot;markdown-toc-logs-in-distributed-system&quot;&gt;Logs in Distributed System&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#log-centric-design-pattern&quot; id=&quot;markdown-toc-log-centric-design-pattern&quot;&gt;Log-Centric Design Pattern&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what-is-a-log&quot;&gt;What Is a Log?&lt;/h1&gt;

&lt;p&gt;Yet other than perhaps occasionally tailing a log file, most engineers don‚Äôt think much about logs. To help remedy that, I‚Äôll give an overview of how logs work in distributed systems, and then give some practical applications of these concepts to a variety of common uses: data integration, enterprise architecture, real-time data processing, and data system design.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2022-07-02 05:30:44] method=POST user=crazyboy0510 path=/movies/comment-create/ movie_id=16
[2022-07-02 05:30:57] method=GET user=crazyboy0510 path=/movies/movie-play/7 movie_id=7
[2022-07-02 05:31:15] method=GET user=crazyboy0510 path=/movies/movie-play/16 movie_id=16
[2022-07-02 05:31:18] method=GET user=crazyboy0510 path=/movies/movie-play/7 movie_id=7
[2022-07-02 05:31:19] method=GET user=crazyboy0510 path=/movies/movie-play/7 movie_id=7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every programmer is familiar with this kind of log - a series of loosely structured requests, errors, or other messages in a sequence of rotating text files.&lt;/p&gt;

&lt;p&gt;The purpose of logs quickly becomes an input to queries in order to understand behavior across many machines, something that English text in files is not nearly as appropriate for as the kind of structured log I‚Äôll be talking about.&lt;/p&gt;

&lt;p&gt;The log I‚Äôll be discussing is a little more general and closer to what in the database or systems called a ‚Äòcommit log‚Äô. It is append-only sequence of records ordered by time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logs_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each rectangle represents a record that was appended to the log. Records are stored in the order they were appended. The contents and format of the records aren‚Äôt important for the purposes of this discussion. To be concrete, we can just imagine each record to be a JSON blob.&lt;/p&gt;

&lt;p&gt;The log entry number can be thought of as the ‚Äòtimestamp‚Äô of the entry. this is convenient property of being decoupled from any particular physical clock. This property is essential as we get to distributed systems.&lt;/p&gt;

&lt;p&gt;A log is just kind of table or file where the records are sorted by time&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;table: array of records  
file: array of bytes  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However it is important that we thing about the log as an &lt;strong&gt;abstract data structure, not a text file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Logs have a specific purpose: &lt;strong&gt;they record what happened and when&lt;/strong&gt;. For distributed data systems, this is the heart of the problem.&lt;/p&gt;

&lt;h1 id=&quot;logs-in-database&quot;&gt;Logs in Database&lt;/h1&gt;

&lt;p&gt;The usage in databases has to do with keeping in sync a variety of data structures and indexes in the presence of crashes. To make this atomic and durable, a database uses a log to write out information about the records it will be modifying before applying the changes to all the various data structures that it maintains.&lt;/p&gt;

&lt;p&gt;The log is the record of what happened, and each table or index is a projection of this history into some useful data structure or index.&lt;/p&gt;

&lt;p&gt;Over time, the usage of the log grew from &lt;strong&gt;an implementation detail of the ACID database properties&lt;/strong&gt; to a &lt;strong&gt;method for replicating data between databases&lt;/strong&gt;. It turns out that the sequence of changes that happened on the database is exactly what is needed to keep a remote replica database in sync. Oracle, MySQL, PostreSQL, and MongoDB include log shipping protocols to transmit portions of a log to replica databases that act as slaves. The slaves can then apply the changes recorded in the log to their own local data structures to stay in sync with the master.&lt;/p&gt;

&lt;p&gt;In fact, the use of logs is variations on the two uses in database internals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The log is used as a publish/subscribe mechanism to transmit data to other replicas&lt;/li&gt;
  &lt;li&gt;The log is used as a consistency mechanism to order the updates that are applied to multiple replicas&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;logs-in-distributed-system&quot;&gt;Logs in Distributed System&lt;/h1&gt;

&lt;p&gt;The same problems that databases solve with logs (like distributing data to replicas and agreeing on update order) are among the most fundamental problems for all distributed systems.&lt;/p&gt;

&lt;p&gt;The log-centric approach to distributed systems arises from a simple observation&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If two identical, deterministic processes begin in the same state and get the same inputs in the same order, they will produce the same output and end in the same state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Desterministic means that the processing isn‚Äôt timing dependent)&lt;/p&gt;

&lt;p&gt;The application to distributed computing is pretty obvious. You can reduce the problem of making multiple machines all do the same thing to the problem of implementaing a consistent log to feed input to theses processes. The purpose of the log here is to squeeze all the nondeterminism out of the input stream to ensure that each replica stays in sync.&lt;/p&gt;

&lt;p&gt;Discrete log entry numbers act as a clock for the state of the replicas - you can describe the state of each replica by a single number: the timestamp for the maximum log entry that it has processed. Two replicas at the same time will be in the same state.&lt;/p&gt;

&lt;h2 id=&quot;log-centric-design-pattern&quot;&gt;Log-Centric Design Pattern&lt;/h2&gt;

&lt;p&gt;There are many variations on how this principle can be applied., depending on what is put in the log. For example, we can log the incoming requests to a service and have each replica process these independently. Or we can have one instance that processed requests and log the state changes that the service undergoes in response to a request.&lt;/p&gt;

&lt;p&gt;Database people generally differentiate between physical and logical logging. Physical or row-based logging means logging the contents of each row that is changed (Î°úÏö∞Î≥Ñ Ïã§Ï†ú Î≥ÄÍ≤ΩÎêú Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•ÌïòÎäî Í≤É). Logical or statement logging  means logging the SQL commands that lead to the row changes (insert, update, and delete statements).&lt;/p&gt;

&lt;p&gt;The distributed systems distinguished two broad approaches to processing and replication. The &lt;strong&gt;state machine model&lt;/strong&gt; keep a log of the incoming requests and &lt;strong&gt;each replica processes each request&lt;/strong&gt; in log order. &lt;strong&gt;primary backup&lt;/strong&gt; elect one replica as the leader. This leader processes requests in the order they arrive and logs the changes to its state that occur as a result of processing the requests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/logs_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 01 Aug 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series25</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series25</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Coding Test Series [Part22]: ÌñâÎ†¨(Matrix) - Î¨∏Ï†ú</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#matrix&quot; id=&quot;markdown-toc-matrix&quot;&gt;Matrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;matrix&quot;&gt;Matrix&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/tag/matrix/&quot; target=&quot;_blank&quot;&gt;Leetcode: Two-Pointers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üíü ‚úÖ ‚ùé&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Î¨∏Ï†ú Î¶¨Ïä§Ìä∏
---------------------------------------------EASY 3Î¨∏Ï†ú
- Richest Customer Wealth
- Flipping an Image
- Matrix Diagonal Sum
- The K Weakest Rows in a Matrix
- Toeplitz Matrix
- Shift 2D Grid
- Transpose Matrix

---------------------------------------------MEDIUM 5Î¨∏Ï†ú
- Sort the Matrix Diagonally
- Remove All Ones With Row and Column Flips
- Candy Crush
- Max Area of Island
- Rotate Image
- Sparse Matrix Multiplication
- Game of Life
- Construct Quad Tree
- Spiral Matrix II
- Walls and Gates
- Number of Islands
- Rotting Oranges
- Shortest Path in Binary Matrix
- Word Search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
                <pubDate>Mon, 01 Aug 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/matrix</link>
                <guid isPermaLink="true">http://localhost:4000/matrix</guid>
                
                <category>Coding_Test</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>MySQL Series [Part15] IntelliJ IDEÎ•º Ïù¥Ïö©Ìïú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏãúÍ∞ÅÌôî</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#Ï∞∏Í≥†&quot; id=&quot;markdown-toc-Ï∞∏Í≥†&quot;&gt;Ï∞∏Í≥†&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;Ï∞∏Í≥†&quot;&gt;Ï∞∏Í≥†&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/creating-diagrams.html&quot; target=&quot;_blank&quot;&gt;IntelliJ: Database diagrams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 29 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/mysql-series15</link>
                <guid isPermaLink="true">http://localhost:4000/mysql-series15</guid>
                
                <category>MySQL</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>MySQL Series [Part14] MySQL Optimizing SELECT Statements</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#optimization-overview&quot; id=&quot;markdown-toc-optimization-overview&quot;&gt;Optimization Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#things-to-consider-for-optimization&quot; id=&quot;markdown-toc-things-to-consider-for-optimization&quot;&gt;Things to Consider for Optimization&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#select&quot; id=&quot;markdown-toc-select&quot;&gt;SELECT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#where&quot; id=&quot;markdown-toc-where&quot;&gt;WHERE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#group-by&quot; id=&quot;markdown-toc-group-by&quot;&gt;GROUP BY&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#join&quot; id=&quot;markdown-toc-join&quot;&gt;JOIN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#subquery&quot; id=&quot;markdown-toc-subquery&quot;&gt;Subquery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#temporary-table&quot; id=&quot;markdown-toc-temporary-table&quot;&gt;Temporary Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#order-by&quot; id=&quot;markdown-toc-order-by&quot;&gt;ORDER BY&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#Ï†ïÎ†¨-Ï≤òÎ¶¨-Î∞©Î≤ï&quot; id=&quot;markdown-toc-Ï†ïÎ†¨-Ï≤òÎ¶¨-Î∞©Î≤ï&quot;&gt;Ï†ïÎ†¨ Ï≤òÎ¶¨ Î∞©Î≤ï&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Ï∞∏Í≥†&quot; id=&quot;markdown-toc-Ï∞∏Í≥†&quot;&gt;Ï∞∏Í≥†&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;optimization-overview&quot;&gt;Optimization Overview&lt;/h1&gt;

&lt;p&gt;Database performance depends on several factors at the database level, such as tables, queries, and configuration settings. These software constructs result in CPU and I/O operations at the hardware level, which you must minimize and make as efficient as possible.&lt;/p&gt;

&lt;h1 id=&quot;things-to-consider-for-optimization&quot;&gt;Things to Consider for Optimization&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Are the tables structured properly? In particular, do the columns have the right data types, and does each table have the appropriate columns for the type of work? For example, applications that perform frequent updates often have many tables with few columns, while applications that analyze large amounts of data often have few tables with many columns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are the right indexes in place to make queries efficient?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are you using the appropriate storage engine for each table, and taking advantage of the strengths and features of each storage engine you use? In particular, the choice of a transactional storage engine such as InnoDB or a nontransactional one such as MyISAM can be very important for performance and scalability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does each table use an appropriate row format? This choice also depends on the storage engine used for the table. In particular, compressed tables use less disk space and so require less disk I/O to read and write the data. Compression is available for all kinds of workloads with InnoDB tables, and for read-only MyISAM tables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Does the application use an appropriate locking strategy? For example, by allowing shared access when possible so that database operations can run concurrently, and requesting exclusive access when appropriate so that critical operations get top priority. Again, the choice of storage engine is significant. The InnoDB storage engine handles most locking issues without involvement from you, allowing for better concurrency in the database and reducing the amount of experimentation and tuning for your code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Are all memory areas used for caching sized correctly? That is, large enough to hold frequently accessed data, but not so large that they overload physical memory and cause paging. The main memory areas to configure are the InnoDB buffer pool and the MyISAM key cache.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;select&quot;&gt;SELECT&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid using *&lt;/li&gt;
  &lt;li&gt;Avoid using DISTINCT -&amp;gt; Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞Î•º ÏúÑÌï¥ ÌÖåÏù¥Î∏î ÌíÄ Ïä§Ï∫î Ìï¥ÏïºÌï®&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where&quot;&gt;WHERE&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use Indexes Where Appropriate&lt;/li&gt;
  &lt;li&gt;Avoid % Wildcard in a Predicate&lt;/li&gt;
  &lt;li&gt;Avoid using a function in the predicate of a query&lt;/li&gt;
  &lt;li&gt;BETWEEN, IN, &amp;lt;, &amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;group-by&quot;&gt;GROUP BY&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;GROUP BY ÏûëÏóÖÏùÄ ÌÅ¨Í≤å Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©ÌïòÎäî Í≤ΩÏö∞ÏôÄ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÎäî Í≤ΩÏö∞(ÏûÑÏãú ÌÖåÏù¥Î∏îÏùÑ ÏÇ¨Ïö©)&lt;/li&gt;
  &lt;li&gt;Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÎäî Í≤ΩÏö∞, Ï†ÑÏ≤¥ ÌÖåÏù¥Î∏îÏùÑ Ïä§Ï∫îÌïòÏó¨ Í∞Å Í∑∏Î£πÏùò Î™®Îì† ÌñâÏù¥ Ïó∞ÏÜçÎêòÎäî ÏÉà ÏûÑÏãú ÌÖåÏù¥Î∏îÏùÑ ÎßåÎì† Îã§Ïùå Ïù¥ ÏûÑÏãú ÌÖåÏù¥Î∏îÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Í∑∏Î£πÏùÑ Í≤ÄÏÉâÌïòÍ≥† ÏßëÍ≥Ñ Ìï®ÏàòÎ•º Ï†ÅÏö©ÌïòÎäî Í≤É
    &lt;ul&gt;
      &lt;li&gt;Ïù¥Î†áÍ≤å Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏùÑ Îïå Ìï† Ïàò ÏûàÎäî ÏµúÏÑ†Ïùò Î∞©Î≤ïÏùÄ WHEREÏ†àÏùÑ Ïù¥Ïö©Ìï¥ GROUP BY ÌïòÍ∏∞ Ï†ÑÏóê Îç∞Ïù¥ÌÑ∞ÎüâÏùÑ Ï§ÑÏù¥Îäî Í≤É&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ïù∏Îç±Ïä§Î•º Ïûò ÏÑ§Ï†ïÌïúÎã§Î©¥ ÏûÑÏãú ÌÖåÏù¥Î∏îÏùÑ ÏÉùÏÑ±ÌïòÏßÄ ÏïäÍ≥† Îπ†Î•¥Í≤å Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎã§
    &lt;ul&gt;
      &lt;li&gt;Ïù∏Îç±Ïä§Î•º ÏµúÎåÄÎ°ú ÌôúÏö©ÌïòÍ∏∞ ÏúÑÌï¥ÏÑúÎäî GROUP BY Ïª¨ÎüºÍ≥º, Ïù∏Îç±Ïä§ÎêòÏñ¥ ÏûàÎäî Ïª¨ÎüºÍ∞ÑÏùò ÏàúÏÑúÍ∞Ä Ï§ëÏöîÌï®&lt;/li&gt;
      &lt;li&gt;SELECTÏ†àÏóê ÏÇ¨Ïö©ÎêòÎäî ÏßëÍ≥ÑÌï®ÏàòÏùò Í≤ΩÏö∞ MIN(), MAX()Îäî Ïù∏Îç±Ïä§Ïùò ÏÑ±Îä•ÏùÑ ÏµúÎåÄÎ°ú ÌôúÏö©Ìï† Ïàò ÏûàÎèÑÎ°ù Ìï®&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ï∞∏Í≥†Î°ú MySQL 8.0Î∂ÄÌÑ∞Îäî GROUP BYÎ•º ÌïúÎã§Í≥† Ìï¥ÏÑú ÏïîÎ¨µÏ†ÅÏúºÎ°ú Ï†ïÎ†¨Ïù¥ Ïù¥Î£®Ïñ¥ÏßÄÏßÄ ÏïäÏùå -&amp;gt; Ï†ïÎ†¨ ÌïÑÏöîÌïòÎ©¥ Î™ÖÏãúÏ†ÅÏúºÎ°ú ORDER BY Ïç®ÏïºÌï®&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Î£®Ïä§ Ïù∏Îç±Ïä§ Ïä§Ï∫îÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Í≤ΩÏö∞
    &lt;ul&gt;
      &lt;li&gt;Î£®Ïä§ Ïù∏Îç±Ïä§ Ïä§Ï∫îÏùÄ Î†àÏΩîÎìúÎ•º Í±¥ÎÑàÎõ∞Î©¥ÏÑú ÌïÑÏöîÌïú Î∂ÄÎ∂ÑÎßå Í∞ÄÏ†∏Ïò§Îäî Ïä§Ï∫î Î∞©Ïãù&lt;/li&gt;
      &lt;li&gt;EXPLAINÏùÑ ÌÜµÌó§ Ïã§Ìñâ Í≥ÑÌöçÏùÑ ÌôïÏù∏Ìï¥Î≥¥Î©¥ Extra Ïª¨ÎüºÏóê ‚ÄòUsing index for group-by‚Äô ÎùºÍ≥† ÌëúÍ∏∞Îê®&lt;/li&gt;
      &lt;li&gt;MIN(), MAX() Ïù¥Ïô∏Ïùò Ìï®ÏàòÍ∞Ä SELECT Ï†àÏóê ÏÇ¨Ïö©ÎêòÎ©¥ Î£®Ïä§ Ïù∏Îç±Ïä§ Ïä§Ï∫îÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏùå&lt;/li&gt;
      &lt;li&gt;Ïù∏Îç±Ïä§Í∞Ä (col1 col2, col3) Ïùº Îïå , GROUP BY col1, col2 Í≥º Í∞ôÏïÑÏïº Ìï® (GROUP BY col2, col3ÏùÄ ÏïàÎê®)&lt;/li&gt;
      &lt;li&gt;SELECT Ï†àÍ≥º GROUP BY Ï†àÏùò Ïª¨ÎüºÏù¥ ÏùºÏπòÌï¥Ïïº Ìï®. SELECT col1, col2, MAX(col3) GROUP BY col1, col2 Í≥º Í∞ôÏïÑÏïº Ìï®&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ÌÉÄÏù¥Ìä∏ Ïù∏Îç±Ïä§ Ïä§Ï∫îÏùÑ ÏÇ¨Ïö©ÌïòÎäî Í≤ΩÏö∞
    &lt;ul&gt;
      &lt;li&gt;SELECT Ï†àÍ≥º GROUP BY Ï†àÏùò Ïª¨ÎüºÏù¥ ÏùºÏπòÌïòÏßÄ ÏïäÏßÄÎßå, Ï°∞Í±¥Ï†àÏùÑ Ïù¥Ïö©Ìï¥ Î≤îÏúÑ Ïä§Ï∫îÏù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞
        &lt;ul&gt;
          &lt;li&gt;SELECT c1, c2, c3 FROM t1 WHERE c2 = ‚Äòa‚Äô GROUP BY c1, c3;&lt;/li&gt;
          &lt;li&gt;SELECT c1, c2, c3 FROM t1 WHERE c1 = ‚Äòa‚Äô GROUP BY c2, c3;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;join&quot;&gt;JOIN&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;INNER joins, order doesn‚Äôt matter&lt;/li&gt;
  &lt;li&gt;OUTER joins, the order matters&lt;/li&gt;
  &lt;li&gt;Ïó¨Îü¨ Ï°∞Ïù∏ÏùÑ Ìè¨Ìï®ÌïòÎäî LOOP JOIN ÏóêÏÑúÎäî ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏î(Driving Table)Ïù¥ ÌñâÎì§ÏùÑ ÏµúÏÜåÌïúÏúºÎ°ú Î¶¨ÌÑ¥ÌïòÎèÑÎ°ù Ìï¥ÏïºÎê®&lt;/li&gt;
  &lt;li&gt;JOIN ÎêòÎäî Ïª¨ÎüºÏùò ÌïúÏ™ΩÏóêÎßå INDEXÍ∞Ä ÏûàÎäî Í≤ΩÏö∞Îäî INDEXÍ∞Ä ÏßÄÏ†ïÎêú TABLEÏù¥ DRIVING TABLEÏù¥ ÎêúÎã§&lt;/li&gt;
  &lt;li&gt;JOIN Ïãú ÏûêÏ£º ÏÇ¨Ïö©ÌïòÎäî ÏπºÎüºÏùÄ Ïù∏Îç±Ïä§Î°ú Îì±Î°ùÌïúÎã§&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ïù∏Îç±Ïä§ Î†àÏù∏ÏßÄ Ïä§Ï∫îÏùÄ Ïù∏Îç±Ïä§Î•º ÌÉêÏÉâ(Index Seek)ÌïòÎäî Îã®Í≥ÑÏôÄ Ïù∏Îç±Ïä§Î•º Ïä§Ï∫î(Index Scan)ÌïòÎäî Í≥ºÏ†ïÏúºÎ°ú Íµ¨Î∂ÑÌï¥ Î≥º Ïàò ÏûàÎã§. ÏùºÎ∞òÏ†ÅÏúºÎ°ú Ïù∏Îç±Ïä§Î•º Ïù¥Ïö©Ìï¥ÏÑú ÏøºÎ¶¨ÌïòÎäî ÏûëÏóÖÏóêÏÑúÎäî Í∞ÄÏ†∏Ïò§Îäî Î†àÏΩîÎìúÏùò Í±¥ÏàòÍ∞Ä ÏÜåÎüâ(Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞Ïùò 20% Ïù¥ÎÇ¥)Ïù¥Í∏∞ ÎïåÎ¨∏Ïóê Ïù∏Îç±Ïä§ Ïä§Ï∫î ÏûëÏóÖÏùÄ Î∂ÄÌïòÍ∞Ä ÏûëÍ≥†, ÌäπÏ†ï Ïù∏Îç±Ïä§ ÌÇ§Î•º Ï∞æÎäî Ïù∏Îç±Ïä§ ÌÉêÏÉâ ÏûëÏóÖÏù¥ Î∂ÄÌïòÍ∞Ä ÎÜíÏùÄ Ìé∏Ïù¥Îã§.&lt;/p&gt;

&lt;p&gt;JOIN ÏûëÏóÖÏóêÏÑú ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÏùÑ ÏùΩÏùÑ ÎïåÎäî Ïù∏Îç±Ïä§ ÌÉêÏÉâ ÏûëÏóÖÏùÑ Îã® Ìïú Î≤àÎßå ÏàòÌñâÌïòÍ≥†, Í∑∏ Ïù¥ÌõÑÎ∂ÄÌÑ∞Îäî Ïä§Ï∫îÎßå Ïã§ÌñâÌïòÎ©¥ ÎêúÎã§.&lt;/p&gt;

&lt;p&gt;ÌïòÏßÄÎßå ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏóêÏÑúÎäî Ïù∏Îç±Ïä§ ÌÉêÏÉâ ÏûëÏóÖÍ≥º Ïä§Ï∫î ÏûëÏóÖÏùÑ ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÏóêÏÑú ÏùΩÏùÄ Î†àÏΩîÎìú Í±¥ÏàòÎßåÌÅº Î∞òÎ≥µÌïúÎã§.&lt;/p&gt;

&lt;p&gt;ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÍ≥º ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏù¥ 1:1 Ï°∞Ïù∏ÎêòÎçîÎùºÎèÑ &lt;strong&gt;ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏùÑ ÏùΩÎäî Í≤ÉÏù¥ Ìõ®Ïî¨ Îçî ÌÅ∞ Î∂ÄÌïòÎ•º Ï∞®ÏßÄ&lt;/strong&gt;ÌïúÎã§.&lt;/p&gt;

&lt;p&gt;Í∑∏ÎûòÏÑú ÏòµÌã∞ÎßàÏù¥Ï†ÄÎäî Ìï≠ÏÉÅ ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÏù¥ ÏïÑÎãàÎùº ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏùÑ ÏµúÏ†ÅÏúºÎ°ú ÏùΩÏùÑ Ïàò ÏûàÍ≤å Ïã§Ìñâ Í≥ÑÌöçÏùÑ ÏàòÎ¶ΩÌïúÎã§.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT *
FROM employees e, dept_emp de
WHERE e.emp_no=de.emp_no
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ïó¨Í∏∞ÏÑú Í∞Å ÌÖåÏù¥Î∏îÏùò emp_no Ïª¨ÎüºÏóê Ïù∏Îç±Ïä§Í∞Ä ÏûàÏùÑ ÎïåÏôÄ ÏóÜÏùÑ Îïå Ï°∞Ïù∏ ÏàúÏÑúÍ∞Ä Ïñ¥ÎñªÍ≤å Îã¨ÎùºÏßÄÎäî Ìïú Î≤à ÏÇ¥Ìé¥Î≥¥Ïûê.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Îëê Ïª¨Îüº Î™®Îëê Ïù∏Îç±Ïä§Í∞Ä ÏûàÎäî Í≤ΩÏö∞
    &lt;ul&gt;
      &lt;li&gt;Ïñ¥Îäê ÌÖåÏù¥Î∏îÏùÑ ÎìúÎùºÏù¥ÎπôÏúºÎ°ú ÏÑ†ÌÉùÌïòÎì† Ïù∏Îç±Ïä§Î•º Ïù¥Ïö©Ìï¥ ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏùò Í≤ÄÏÉâ ÏûëÏóÖÏùÑ Îπ†Î•¥Í≤å Ï≤òÎ¶¨Ìï† Ïàò ÏûàÎã§&lt;/li&gt;
      &lt;li&gt;Î≥¥ÌÜµÏùò Í≤ΩÏö∞ Ïñ¥Îäê Ï™Ω ÌÖåÏù¥Î∏îÏù¥ ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÏù¥ ÎêòÎì† ÏòµÌã∞ÎßàÏù¥Ï†ÄÍ∞Ä ÏÑ†ÌÉùÌïòÎäî Î∞©Î≤ïÏù¥ ÏµúÏ†ÅÏùº ÎïåÍ∞Ä ÎßéÎã§&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;employees ÌÖåÏù¥Î∏îÏóêÎßå Ïù∏Îç±Ïä§Í∞Ä ÏûàÎäîÍ≤ΩÏö∞
    &lt;ul&gt;
      &lt;li&gt;Ïù¥ ÎïåÎäî employees ÌÖåÏù¥Î∏îÏùÑ ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÎ°ú ÏÑ†ÌÉùÌïúÎã§&lt;/li&gt;
      &lt;li&gt;ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏùÑ ÏùΩÎäî Í≤ÉÏù¥ Ìõ®Ïî¨ Îçî ÌÅ∞ Î∂ÄÌïòÎ•º Ï∞®ÏßÄÌïòÍ∏∞ ÎïåÎ¨∏Ïóê ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏóêÏÑú Ïù∏Îç±Ïä§Î•º ÌôúÏö©ÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌïúÎã§&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INNER JOINÏùÄ Ï°∞Ïù∏ ÎåÄÏÉÅ ÌÖåÏù¥Î∏î Î™®ÎëêÏóê Ìï¥ÎãπÌïòÎäî Î†àÏΩîÎìúÎßå Î∞òÌôòÌïúÎã§. Ïù¥Í∞ôÏùÄ ÌäπÏÑ± ÎïåÎ¨∏Ïóê OUTER JOINÏúºÎ°úÎßå Ï°∞Ïù∏ÏùÑ Ïã§ÌñâÌïòÎäî ÏøºÎ¶¨Îì§ÎèÑ ÏûêÏ£º Î≥¥Ïù∏Îã§. ÌïòÏßÄÎßå ÎåÄÍ∞úÏùò Í≤ΩÏö∞ OUTER JOINÏùÄ ÎåÄÏÉÅ ÌÖåÏù¥Î∏îÎì§Ïùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏùºÍ¥ÄÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå ÌïÑÏöîÌïòÎã§.&lt;/p&gt;

&lt;p&gt;MySQL ÏòµÌã∞ÎßàÏù¥Ï†ÄÎäî OUTER JOINÏãú Ï°∞Ïù∏ ÎêòÎäî ÌÖåÏù¥Î∏î(FROM A LEFT JOIN BÏóêÏÑú B)ÏùÑ ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÎ°ú ÏÑ†ÌÉùÌïòÏßÄ Î™ªÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Î¨¥Ï°∞Í±¥ ÏïûÏóê Îì±Ïû•ÌïòÎäî ÌÖåÏù¥Î∏îÏùÑ ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÎ°ú ÏÑ†ÌÉùÌïúÎã§. Í∑∏ Í≤∞Í≥º Ïù∏Îç±Ïä§ Ïú†Î¨¥Ïóê Îî∞Îùº Ï°∞Ïù∏ ÏàúÏÑúÎ•º Î≥ÄÍ≤ΩÌï®ÏúºÎ°úÏç® ÏñªÍ≤å ÎêòÎäî ÏµúÏ†ÅÌôîÏùò Ïù¥Ï†êÏùÑ ÏñªÏßÄ Î™ªÌïòÍ∏∞ ÎïåÎ¨∏Ïóê ÏøºÎ¶¨ ÏÑ±Îä•Ïù¥ ÎÇòÎπ†Ïßà Ïàò ÏûàÎã§. Í∑∏ÎûòÏÑú Íº≠ ÌïÑÏöîÌïú Í≤ΩÏö∞Í∞Ä ÏïÑÎãàÎùºÎ©¥ INNER JOINÏùÑ ÏÇ¨Ïö©ÌïòÎäî Í≤ÉÏù¥ ÏøºÎ¶¨Ïùò ÏÑ±Îä•Ïóê ÎèÑÏõÄÏù¥ ÎêúÎã§.&lt;/p&gt;

&lt;p&gt;JOINÏùò ÏàúÏÑú&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;INNER JOINÏù∏ Í≤ΩÏö∞
    &lt;ul&gt;
      &lt;li&gt;Ïñ¥Ï∞®Ìîº A and B and C Ïù¥Í∏∞ ÎïåÎ¨∏Ïóê A JOIN B JOIN CÏù¥Îì† B JOIN A JOIN CÏù¥Îì† Í∞ôÎã§.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LEFT JOINÏùò Í≤ΩÏö∞ Í≤∞Í≥ºÎèÑ ÏÑ±Îä•ÎèÑ Îã¨ÎùºÏßÑÎã§.
    &lt;ul&gt;
      &lt;li&gt;ÏùºÎã® Í∞ÄÏû• Î®ºÏ†Ä Îì±Ïû•ÌïòÎäî ÌÖåÏù¥Î∏îÏù¥ ÎìúÎùºÏù¥Îπô ÌÖåÏù¥Î∏îÏù¥ ÎêúÎã§ -&amp;gt; Ïù¥ ÎßêÏùÄ Îí§Ïóê Îî∞ÎùºÏò§Îäî ÌÖåÏù¥Î∏îÏùÄ ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏù¥ ÎêúÎã§Îäî ÎßêÏù¥Îã§ -&amp;gt; ÎìúÎ¶¨Î∏ê ÌÖåÏù¥Î∏îÏùÄ Ïù∏Îç±Ïä§Í∞Ä ÏóÜÏúºÎ©¥ ÏÑ±Îä•Ïù¥ Îñ®Ïñ¥ÏßÑÎã§ -&amp;gt; Îí§Ïóê Ï°∞Ïù∏ÎêòÎäî ÌÖåÏù¥Î∏îÏùò Ïù∏Îç±Ïä§ Ïú†Î¨¥Ïóê Îî∞Îùº ÏøºÎ¶¨ ÏÑ±Îä•Ïù¥ Îã¨ÎùºÏßÑÎã§&lt;/li&gt;
      &lt;li&gt;Í≤∞Í≥º ÏûêÏ≤¥ÎèÑ Îß® ÏïûÏóê Îì±Ïû•ÌïòÎäî ÌÖåÏù¥Î∏îÏùò Î™®Îì† Î†àÏΩîÎìúÍ∞Ä Í∏∞Ï§ÄÏù¥ ÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ÏàúÏÑúÏóê Îî∞Îùº Îã¨ÎùºÏßÑÎã§&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;INNER JOINÍ≥º OUTER JOINÏù¥ Í≤∞Ìï©ÎêòÎäî Í≤ΩÏö∞
    &lt;ul&gt;
      &lt;li&gt;Í∞ÄÎä•ÌïòÎã§Î©¥ INNER JOINÏù¥ ÏïûÏóê Ïò§ÎèÑÎ°ù ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÎã§&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subquery&quot;&gt;Subquery&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Avoid correlated sub queries as it searches row by row, impacting the speed of SQL query processing&lt;/li&gt;
  &lt;li&gt;JOINÏúºÎ°ú Ìï¥Í≤∞ÎêòÎ©¥ ÏÑúÎ∏åÏøºÎ¶¨ ÎåÄÏã† JOINÏùÑ ÏÇ¨Ïö©ÌïòÏûê&lt;/li&gt;
  &lt;li&gt;ÏÑúÎ∏åÏøºÎ¶¨ ÏïàÏóê whereÏ†àÍ≥º group byÎ•º ÌÜµÌï¥ Î∂àÎü¨Ïò§Îäî Îç∞Ïù¥ÌÑ∞ÏñëÏùÑ Í∞êÏÜåÏãúÌÇ¨ Ïàò ÏûàÏäµÎãàÎã§&lt;/li&gt;
  &lt;li&gt;ÏÑúÎ∏åÏøºÎ¶¨Îäî Ïù∏Îç±Ïä§ ÎòêÎäî Ï†úÏïΩ Ï†ïÎ≥¥Î•º Í∞ÄÏßÄÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïóê ÏµúÏ†ÅÌôîÎêòÏßÄ Î™ªÌïúÎã§&lt;/li&gt;
  &lt;li&gt;ÏúàÎèÑÏö∞ Ìï®ÏàòÎ•º Í≥†Î†§Ìï¥Î≥¥Ïûê&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;temporary-table&quot;&gt;Temporary Table&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Use a temporary table to handle bulk data&lt;/li&gt;
  &lt;li&gt;Temporary table vs Using index access&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;order-by&quot;&gt;ORDER BY&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ÎåÄÎ∂ÄÎ∂ÑÏùò SELECT ÏøºÎ¶¨ÏóêÏÑú Ï†ïÎ†¨ÏùÄ ÌïÑÏàòÏ†Å&lt;/li&gt;
  &lt;li&gt;Ï†ïÎ†¨ÏùÑ Ï≤òÎ¶¨ÌïòÎäî Î∞©Î≤ïÏùÄ &lt;strong&gt;Ïù∏Îç±Ïä§Î•º Ïù¥Ïö©ÌïòÎäî Î∞©Î≤ï&lt;/strong&gt;Í≥º &lt;strong&gt;Filesort&lt;/strong&gt;ÎùºÎäî Î≥ÑÎèÑÏùò Ï≤òÎ¶¨Î•º Ïù¥Ïö©ÌïòÎäî Î∞©Î≤ï&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Î∞©Î≤ï&lt;/td&gt;
      &lt;td&gt;Ïû•Ï†ê&lt;/td&gt;
      &lt;td&gt;Îã®Ï†ê&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ïù∏Îç±Ïä§ Ïù¥Ïö©&lt;/td&gt;
      &lt;td&gt;SELECT Î¨∏ÏùÑ Ïã§ÌñâÌï† Îïå Ïù¥ÎØ∏ Ïù∏Îç±Ïä§Í∞Ä Ï†ïÎ†¨Îèº ÏûàÏñ¥ ÏàúÏÑúÎåÄÎ°ú ÏùΩÍ∏∞Îßå ÌïòÎ©¥ ÎêòÎØÄÎ°ú Îß§Ïö∞ Îπ†Î•¥Îã§&lt;/td&gt;
      &lt;td&gt;INSERT, UPDATE, DELETE ÏûëÏóÖÏãú Î∂ÄÍ∞ÄÏ†ÅÏù∏ Ïù∏Îç±Ïä§ Ï∂îÍ∞Ä/ÏÇ≠Ï†ú ÏûëÏóÖÏù¥ ÌïÑÏöîÌïòÎØÄÎ°ú ÎäêÎ¶¨Îã§&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Filesort Ïù¥Ïö©&lt;/td&gt;
      &lt;td&gt;Ïù∏Îç±Ïä§ Ïù¥Ïö©Í≥º Î∞òÎåÄÎ°ú INSERT, UPDATE, DELETE ÏûëÏóÖÏù¥ Îπ†Î•¥Îã§&lt;/td&gt;
      &lt;td&gt;Ï†ïÎ†¨ ÏûëÏóÖÏù¥ ÏøºÎ¶¨ Ïã§Ìñâ Ïãú Ï≤òÎ¶¨ÎêòÏñ¥ ÏøºÎ¶¨Ïùò ÏùëÎãµ ÏÜçÎèÑÍ∞Ä ÎäêÎ†§ÏßÑÎã§&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;FilesortÎ•º ÏÇ¨Ïö©Ìï¥Ïïº ÌïòÎäî Í≤ΩÏö∞&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ï†ïÎ†¨ Í∏∞Ï§ÄÏù¥ ÎÑàÎ¨¥ ÎßéÏïÑÏÑú Î™®Îì† Ïù∏Îç±Ïä§Î•º ÏÉùÏÑ±ÌïòÎäî Í≤ÉÏù¥ Î∂àÍ∞ÄÎä•Ìïú Í≤ΩÏö∞&lt;/li&gt;
  &lt;li&gt;Ïñ¥Îñ§ Ï≤òÎ¶¨Ïùò Í≤∞Í≥ºÎ•º Ï†ïÎ†¨Ìï¥Ïïº ÌïòÎäî Í≤ΩÏö∞&lt;/li&gt;
  &lt;li&gt;ÎûúÎç§ÌïòÍ≤å Í≤∞Í≥º Î†àÏΩîÎìúÎ•º Í∞ÄÏ†∏ÏôÄÏïº ÌïòÎäî Í≤ΩÏö∞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ÏÜåÌä∏ Î≤ÑÌçº&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQLÏùÄ Ï†ïÎ†¨ÏùÑ ÏàòÌñâÌïòÍ∏∞ ÏúÑÌï¥ Î≥ÑÎèÑÏùò Î©îÎ™®Î¶¨ Í≥µÍ∞ÑÏùÑ Ìï†ÎãπÎ∞õÏïÑÏÑú ÏÇ¨Ïö©ÌïòÎäîÎç∞ Ïù¥ Î©îÎ™®Î¶¨ Í≥µÍ∞ÑÏùÑ ÏÜåÌä∏ Î≤ÑÌçºÎùºÍ≥† ÌïúÎã§&lt;/li&gt;
  &lt;li&gt;Ï†ïÎ†¨Ìï¥Ïïº Ìï† Î†àÏΩîÎìúÏùò Í±¥ÏàòÍ∞Ä ÏÜåÌä∏ Î≤ÑÌçºÏùò ÌÅ¨Í∏∞Î≥¥Îã§ ÌÅ¨Îã§Î©¥ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº Ìï†Íπå?
    &lt;ul&gt;
      &lt;li&gt;Ï†ïÎ†¨Ìï¥Ïïº Ìï† Î†àÏΩîÎìúÎ•º Ïó¨Îü¨ Ï°∞Í∞ÅÏúºÎ°ú ÎÇòÎà†ÏÑú Ï≤òÎ¶¨ÌïòÍ≤å Îê®. Ïù¥ Í≥ºÏ†ïÏóêÏÑú ÏûÑÏãú Ï†ÄÏû•ÏùÑ ÏúÑÌï¥ ÎîîÏä§ÌÅ¨Î•º ÏÇ¨Ïö©&lt;/li&gt;
      &lt;li&gt;ÏùºÎ∂ÄÎ•º Ï≤òÎ¶¨ÌïòÍ≥† ÎîîÏä§ÌÅ¨Ïóê Ï†ÄÏû•ÌïòÍ∏∞Î•º Î∞òÎ≥µ ÏàòÌñâÌï®&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ï†ïÎ†¨ ÏïåÍ≥†Î¶¨Ï¶ò&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ï†ïÎ†¨ ÎåÄÏÉÅ Ïª¨ÎüºÍ≥º ÌîÑÎùºÏù¥Î®∏Î¶¨ ÌÇ§Îßå Í∞ÄÏ†∏ÏôÄÏÑú Ï†ïÎ†¨ÌïòÎäî Î∞©Ïãù
    &lt;ul&gt;
      &lt;li&gt;Ï†ïÎ†¨ ÎåÄÏÉÅ Ïª¨ÎüºÍ≥º ÌîÑÎùºÏù¥Î®∏Î¶¨ ÌÇ§ Í∞íÎßå ÏÜåÌä∏ Î≤ÑÌçºÏóê Îã¥ÏïÑ Ï†ïÎ†¨ÏùÑ ÏàòÌñâ&lt;/li&gt;
      &lt;li&gt;Í∑∏Î¶¨Í≥† Îã§Ïãú Ï†ïÎ†¨ ÏàúÏÑúÎåÄÎ°ú ÌîÑÎùºÏù¥Î®∏Î¶¨ ÌÇ§Î°ú ÌÖåÏù¥Î∏îÏùÑ ÏùΩÏñ¥ÏÑú SELECTÌï† Ïª¨ÎüºÏùÑ Í∞ÄÏ†∏Ïò¥&lt;/li&gt;
      &lt;li&gt;Í∞ÄÏ†∏Ïò§Îäî Ïª¨ÎüºÏù¥ Îëê Í∞ú ÎøêÏù¥Îùº ÏÜåÌä∏ Î≤ÑÌçºÏóê ÎßéÏùÄ Î†àÏΩîÎìúÎ•º Ìïú Î≤àÏóê ÏùΩÏñ¥Ïò¨ Ïàò ÏûàÏùå&lt;/li&gt;
      &lt;li&gt;Îã®Ï†êÏùÄ ÌÖåÏù¥Î∏îÏùÑ Îëê Î≤à ÏùΩÏñ¥Ïïº Ìï®&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ï†ïÎ†¨ ÎåÄÏÉÅ Ïª¨ÎüºÍ≥º SELECTÎ¨∏ÏúºÎ°ú ÏöîÏ≤≠Ìïú Ïª¨ÎüºÏùÑ Î™®Îëê Í∞ÄÏ†∏ÏôÄÏÑú Ï†ïÎ†¨ÌïòÎäî Î∞©Ïãù
    &lt;ul&gt;
      &lt;li&gt;ÏµúÏã† Î≤ÑÏ†ÑÏùò MySQLÏóêÏÑú ÏùºÎ∞òÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎäî Î∞©Ïãù&lt;/li&gt;
      &lt;li&gt;SELECT Î¨∏ÏóêÏÑú ÏöîÏ≤≠Ìïú Ïª¨ÎüºÏùò Í∞úÏàòÍ∞Ä ÎßéÏïÑÏßÄÎ©¥ Í≥ÑÏÜç Î∂ÑÌï†Ìï¥ÏÑú ÏÜåÌä∏ Î≤ÑÌçºÏóê ÏùΩÏñ¥ÏôÄÏïºÌï®&lt;/li&gt;
      &lt;li&gt;Î†àÏΩîÎìúÏùò ÌÅ¨Í∏∞ÎÇò Í±¥ÏàòÍ∞Ä ÏûëÏùÄ Í≤ΩÏö∞ ÏÑ±Îä•Ïù¥ Ï¢ãÏùå&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;Ï†ïÎ†¨-Ï≤òÎ¶¨-Î∞©Î≤ï&quot;&gt;Ï†ïÎ†¨ Ï≤òÎ¶¨ Î∞©Î≤ï&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©Ìïú Ï†ïÎ†¨
    &lt;ul&gt;
      &lt;li&gt;Ïù∏Îç±Ïä§Î•º Ïù¥Ïö©Ìï¥ Ï†ïÎ†¨ÏùÑ ÌïòÍ∏∞ ÏúÑÌï¥ÏÑúÎäî Î∞òÎìúÏãú ORDER BYÏùò ÏàúÏÑúÎåÄÎ°ú ÏÉùÏÑ±Îêú Ïù∏Îç±Ïä§Í∞Ä ÏûàÏñ¥Ïïº Ìï®&lt;/li&gt;
      &lt;li&gt;Ïù∏Îç±Ïä§Î•º Ïù¥Ïö©Ìï¥ Ï†ïÎ†¨Ïù¥ Í∞ÄÎä•Ìïú Ïù¥Ïú†Îäî B-Tree Ïù∏Îç±Ïä§Í∞Ä ÌÇ§ Í∞íÏúºÎ°ú Ï†ïÎ†¨ÎêòÏñ¥ ÏûàÍ∏∞ ÎïåÎ¨∏&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;FilesortÎ•º ÏÇ¨Ïö©Ìïú Ï†ïÎ†¨
    &lt;ul&gt;
      &lt;li&gt;Ïù∏Îç±Ïä§Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÎäî Í≤ΩÏö∞, WHERE Ï°∞Í±¥Ïóê ÏùºÏπòÌïòÎäî Î†àÏΩîÎìúÎ•º Í≤ÄÏÉâÌï¥ Ï†ïÎ†¨ Î≤ÑÌçºÏóê Ï†ÄÏû•ÌïòÎ©¥ÏÑú Ï†ïÎ†¨ÏùÑ Ï≤òÎ¶¨(FIlesort)Ìï®&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;Ï∞∏Í≥†&quot;&gt;Ï∞∏Í≥†&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html&quot; target=&quot;_blank&quot;&gt;MySQL Í≥µÏãùÎ¨∏ÏÑú: Optimizing SELECT Statements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://phoenixnap.com/kb/improve-mysql-performance-tuning-optimization&quot; target=&quot;_blank&quot;&gt;MySQL Performance Tuning and Optimization Tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://danbi-ncsoft.github.io/works/2021/11/05/etl-performace-tips.html&quot; target=&quot;_blank&quot;&gt;ETL ÏÑ±Îä• Ìñ•ÏÉÅÏùÑ ÏúÑÌïú Î™á Í∞ÄÏßÄ ÌåÅÎì§&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://til.songyunseop.com/mysql/group-by-optimization.html&quot; target=&quot;_blank&quot;&gt;Ï†ÑÏßÄÏ†Å ÏÜ°Ïú§ÏÑ≠ÏãúÏ†ê TIL, GROUP BY ÏµúÏ†ÅÌôî&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://otsteam.tistory.com/136&quot; target=&quot;_blank&quot;&gt;SQL ÏÑ±Îä•ÏùÑ ÏúÑÌïú 25Í∞ÄÏßÄ Í∑úÏπô&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jojoldu.tistory.com/173?category=761883&quot; target=&quot;_blank&quot;&gt;Ìå®Ïä§Ìä∏Ï∫†ÌçºÏä§ SQLÌäúÎãùÏ∫†ÌîÑ 4ÏùºÏ∞® - Ï°∞Ïù∏Ïùò Í∏∞Î≥∏ ÏõêÎ¶¨ÏôÄ ÌôúÏö©&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://brightestbulb.tistory.com/147&quot; target=&quot;_blank&quot;&gt;Ï∑®ÎØ∏Îäî Í≥µÎ∂Ä ÌäπÍ∏∞Îäî Í∏∞Î°ù, Nested Loop Join, Driving Table&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/9614922/does-the-join-order-matter-in-sql&quot; target=&quot;_blank&quot;&gt;stackoverflow, Does the join order matter in SQL?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coding-factory.tistory.com/756&quot; target=&quot;_blank&quot;&gt;ÏΩîÎî©Ìå©ÌÜ†Î¶¨, [DB] Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ NESTED LOOPS JOIN (Ï§ëÏ≤© Î£®ÌîÑ Ï°∞Ïù∏)Ïóê ÎåÄÌïòÏó¨&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://schatz37.tistory.com/2&quot; target=&quot;_blank&quot;&gt;Í≥†ÎèôÏùò Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù, [SQL] ‚ÄúÏÑ±Îä• Í¥ÄÏ†ê‚ÄùÏóêÏÑú Î≥¥Îäî Í≤∞Ìï©(Join)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://schatz37.tistory.com/3?category=878798&quot; target=&quot;_blank&quot;&gt;Í≥†ÎèôÏùò Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù, [SQL] ÏÑ±Îä• Í¥ÄÏ†êÏóêÏÑúÏùò ÏÑúÎ∏åÏøºÎ¶¨(Subquery)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 29 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/mysql-series14</link>
                <guid isPermaLink="true">http://localhost:4000/mysql-series14</guid>
                
                <category>MySQL</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Coding Test Series [Part21]: ÌååÏù¥Ïç¨ Î¨∏Î≤ï</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#in-python-and-operation-will-not-return-a-boolean-value&quot; id=&quot;markdown-toc-in-python-and-operation-will-not-return-a-boolean-value&quot;&gt;In python, ‚Äòand‚Äô operation will not return a boolean value&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;in-python-and-operation-will-not-return-a-boolean-value&quot;&gt;In python, ‚Äòand‚Äô operation will not return a boolean value&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;If it‚Äôs true, it will return the last true value, remember is the value, not True. Otherwise, it will return the first false value.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'ban' and 'car' -&amp;gt; 'car'
0 and 'car' -&amp;gt; 0
'ban' and False -&amp;gt; False
'ban' or False -&amp;gt; 'ban'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Fri, 29 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/python-things</link>
                <guid isPermaLink="true">http://localhost:4000/python-things</guid>
                
                <category>Coding_Test</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part24]: ÏãúÏä§ÌÖú ÎîîÏûêÏù∏(4) Database</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#factors&quot; id=&quot;markdown-toc-factors&quot;&gt;Factors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#caching-solution&quot; id=&quot;markdown-toc-caching-solution&quot;&gt;Caching Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#file-storage-solution&quot; id=&quot;markdown-toc-file-storage-solution&quot;&gt;File Storage Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#storage-solutions-offering-text-search-capability&quot; id=&quot;markdown-toc-storage-solutions-offering-text-search-capability&quot;&gt;Storage Solutions Offering Text Search Capability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#time-series-database&quot; id=&quot;markdown-toc-time-series-database&quot;&gt;Time Series Database&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-warehousing-storage-solution&quot; id=&quot;markdown-toc-data-warehousing-storage-solution&quot;&gt;Data Warehousing Storage Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rdbms-vs-nosql&quot; id=&quot;markdown-toc-rdbms-vs-nosql&quot;&gt;RDBMS vs NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Databases will not impact your functional requirements. Whichever database you use, you can still achieve your functional requirements somehow, but at the cost of huge performance degradation. So when we say requirement, we usually mean non-functional requirements.&lt;/p&gt;

&lt;h1 id=&quot;factors&quot;&gt;Factors&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Structure of the data&lt;/li&gt;
  &lt;li&gt;Query pattern&lt;/li&gt;
  &lt;li&gt;Amount or scale that you need to handle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the factors we need to consider when selecting which database to use. Now let us look at various types of storage solutions and some use cases where they will be suitable.&lt;/p&gt;

&lt;h1 id=&quot;caching-solution&quot;&gt;Caching Solution&lt;/h1&gt;
&lt;p&gt;If you are calling your database very frequently or making a remote call to independent services with high latency, you might want to cache some data locally at your end. Some of the most commonly used caching solutions are Memcached, Hazelcast, and Redis. You could also use some other solutions; this is not an exhaustive list. In the following articles, we will usually use Redis as it is one of the most widely used and stable solutions.&lt;/p&gt;

&lt;h1 id=&quot;file-storage-solution&quot;&gt;File Storage Solution&lt;/h1&gt;

&lt;p&gt;Assume you are working on something like Netflix and you need a data store for images, videos, etc. Now, in this case, a database is not very useful to us as we are storing files rather than information. &lt;strong&gt;Databases are meant to store information that can be queried&lt;/strong&gt;, whereas files you do not need to query. You just deliver them as they are.&lt;/p&gt;

&lt;p&gt;This is when we use something called Blob (Binary Large Object) storage. Amazon S3 is an example of blob storage. Usually, blob storage is used in combination with a Content delivery network or a CDN. A CDN is a network of servers around the world that delivers content in different geographical locations with reduced latency. If the server you are getting content from is closer to your geographic location, the content will take less time (reduced latency) to be delivered from the server to you.&lt;/p&gt;

&lt;h1 id=&quot;storage-solutions-offering-text-search-capability&quot;&gt;Storage Solutions Offering Text Search Capability&lt;/h1&gt;

&lt;p&gt;Let‚Äôs again take the Netflix example. Suppose you want to build a search functionality where the user can search by movie, genre, actor, actress, director, etc. Here you use a search engine like Solr or Elasticsearch which can support fuzzy search.&lt;/p&gt;

&lt;p&gt;To understand fuzzy search, let us take an example of an Uber user searching for airprot. If you notice this is a typo, what the user means to search is airport. But if, because of this typo, we don‚Äôt provide any search results, it will be a very poor user experience. So we search for terms similar to airport in the database. This is known as fuzzy search.&lt;/p&gt;

&lt;p&gt;Now a key point here is that these search engines are not databases. Databases provide a guarantee that once stored, our data will not be lost unless we delete it; search engines offer no such guarantee. This is why we should never use search engines like Elasticsearch as our primary data source. We can load the data to them from our primary database to reduce search latency and provide fuzzy and relevance-based text search.&lt;/p&gt;

&lt;h1 id=&quot;time-series-database&quot;&gt;Time Series Database&lt;/h1&gt;

&lt;p&gt;Suppose we are trying to build a metric tracking system. We will need something called a time-series database. Time-series databases are, in a way, an extension of relational databases, but unlike a standard relational DB, time-series databases will never be randomly updated. It will be &lt;strong&gt;updated sequentially in an append-only format&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, it will have more bulk reads for a certain time range as opposed to random reads. For example, how many people watched a video in the last 1 week, 10 days, 1 month, 1 year, and so on. Some examples of time series databases are OpenTSDB and InfluxDB.&lt;/p&gt;

&lt;h1 id=&quot;data-warehousing-storage-solution&quot;&gt;Data Warehousing Storage Solution&lt;/h1&gt;

&lt;p&gt;Sometimes we need a large database to dump all of the data available to us, to perform analytics. Eg. a company like Uber will store all of their data so they can perform analytics to identify where Uber is not used very much, where are the hotspots, what are the peak hours, etc. These systems are not used for regular transactions but offline reporting. Hadoop is a very commonly used Data warehouse.&lt;/p&gt;

&lt;h1 id=&quot;rdbms-vs-nosql&quot;&gt;RDBMS vs NoSQL&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you need ACID properties, then you need to use a relational DBMS. Some examples are MySQL, Oracle, and Postgres. But what if you don‚Äôt need ACID? Well, you can still use RDBMS, or you can use a Non-relational database.&lt;/p&gt;

&lt;p&gt;Let‚Äôs consider an example. Suppose you are trying to build a catalog for something like Amazon, where you want to store information about different products that have various attributes. These attributes will normally not be the same for different products. In such a case, our data cannot be represented as a table. This means we need to use a NoSQL database.&lt;/p&gt;

&lt;p&gt;Also, we don‚Äôt just need to store this data but also &lt;strong&gt;query on this data&lt;/strong&gt;. Here comes the factor of query pattern. Which type of database we use here will be decided based on what type of data we store and what types of queries will be run on it. If we have vast data - not just volume but also a vast variety of attributes - and we need to run a vast variety of queries, we need to use something called a Document DB. Couchbase and MongoDB are some commonly used document databases. (Elasticsearch is special cases of document DB)&lt;/p&gt;

&lt;p&gt;But what if &lt;strong&gt;you don‚Äôt have a vast variety of attributes&lt;/strong&gt; i.e. very &lt;strong&gt;limited variety of queries&lt;/strong&gt;, but the &lt;strong&gt;size of the database increases very rapidly&lt;/strong&gt;? For example, data collected by Uber for their drivers‚Äô location pings. Now the number of Uber drivers will keep increasing day by day, and therefore so will the data collected every day. This results in an ever-increasing amount of data. In such cases, we use &lt;strong&gt;Columnar DBs like Cassandra or HBase&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using Cassandra is lighter to deploy, whereas HBase is built on top of Hadoop; we would need to first set up Hadoop and then setup HBase on top of it. This makes the setup of HBase a little lengthy, but performance-wise both are pretty much the same.&lt;/p&gt;

&lt;p&gt;Let us assume we have stored Uber‚Äôs ride-related data in a Cassandra with driver id as a partition key. Now when we want to fetch a ride for a particular driver on a particular date, Cassandra can find it easily enough. But if we want to find a customer‚Äôs ride on a particular date, Cassandra will have to fan out this query to all the partitions since customer id is not a partition key. So what is the point of using Cassandra if it is not going to scale well!&lt;/p&gt;

&lt;p&gt;Well, there is a simple enough fix. We can replicate the same data to another table or column family with a different partition key. Now when we receive the query for customer id and date, we can simply direct it to the table where the partition key is customer id. This is what we mean by a limited variety of queries but a huge scale. Cassandra (and HBase) can scale massively as long as the queries are of similar types.&lt;/p&gt;

&lt;p&gt;If the queries are more diverse, then we will have to replicate again and again for each partition key, which we can, but only to a certain limit. If we cannot control the types of queries, then something like MongoDB might be the way to go. But if we just need a huge scale for a few types of queries, the Cassandra is the perfect solution.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs shake things up a bit!&lt;/p&gt;

&lt;p&gt;Let‚Äôs consider the Amazon example again. If for a product we have only one item in stock but multiple users are trying to buy it, it should only be sold to one user, which means we need ACID here. So we should choose a Relational DB like MySQL.&lt;/p&gt;

&lt;p&gt;But the orders-related data for Amazon will be ever-increasing and will have a variety of attributes. That means we should use a Columnar NoSQL database like Cassandra. So which one to go for? We decide to go with a combination of both. We can store the data of orders that are not yet delivered in a MySQL database, and once the order is completed, we can move it to Cassandra to be permanently stored.&lt;/p&gt;

&lt;p&gt;But again, our requirements might be a little more complex. Suppose you want to build a reporting system for how many people bought a particular item. Now, on Amazon, products are sold by various users of different brands and different variations. So the report can not target a single product, rather, it should target a subset of products, which can be in either Cassandra or MySQL.&lt;/p&gt;

&lt;p&gt;Such a requirement is an example of a situation where our best choice would be a document DB like Mongo DB. So we decide to keep a subset of this orders data in Mongo DB that tells us which users bought how much quantity of a certain product, at what time, on what date, etc. So suppose you want to check how many people bought sugar in the last month. You can get order ids from Mongo DB and use this order id to pick up the rest of the data from Cassandra or MySQL.&lt;/p&gt;

&lt;p&gt;That should be it for Storage Solutions in System Design!&lt;/p&gt;
</description>
                <pubDate>Tue, 26 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series24</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series24</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part23]: ÏãúÏä§ÌÖú ÎîîÏûêÏù∏(4) Caching</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-a-cache&quot; id=&quot;markdown-toc-what-is-a-cache&quot;&gt;What is a Cache?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-to-cache&quot; id=&quot;markdown-toc-when-to-cache&quot;&gt;When to Cache?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-does-caching-work&quot; id=&quot;markdown-toc-how-does-caching-work&quot;&gt;How Does Caching Work?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#when-not-to-cache&quot; id=&quot;markdown-toc-when-not-to-cache&quot;&gt;When Not to Cache?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cache-eviction-strategies&quot; id=&quot;markdown-toc-cache-eviction-strategies&quot;&gt;Cache Eviction Strategies&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#time-based&quot; id=&quot;markdown-toc-time-based&quot;&gt;Time Based&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#size-based&quot; id=&quot;markdown-toc-size-based&quot;&gt;Size Based&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#metrics&quot; id=&quot;markdown-toc-metrics&quot;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#caching-products&quot; id=&quot;markdown-toc-caching-products&quot;&gt;Caching Products&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;what-is-a-cache&quot;&gt;What is a Cache?&lt;/h1&gt;
&lt;p&gt;A cache is high-speed data access and storage layer that helps us fetch data that we had previously retrieved or computed.&lt;/p&gt;

&lt;p&gt;If we need frequent or repeated access to certain information that we have already queried from a service or a database, then instead of repeatedly querying the service, it‚Äôs better to cache that information for subsequent use, for it to be readily available.&lt;/p&gt;

&lt;p&gt;For Example, for Twitter users, we can cache all the information that is needed to load the homepage of a user (like followers, tweets, etc.). Caching will help avoid repeatedly querying the same service, caused by the refreshing of the browser by the user or other similar use cases. In this case, caching helps to reduce latency and improve resource utilization of servers.&lt;/p&gt;

&lt;h1 id=&quot;when-to-cache&quot;&gt;When to Cache?&lt;/h1&gt;
&lt;p&gt;A cache is primarily used in the following scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When the data involves a lot of computation, then to reduce latency and CPU utilization, it‚Äôs good to cache the pre-calculated information for fast retrieval later on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To reduce frequent database or network (API) calls, it‚Äôs beneficial to cache the previously fetched data for fast retrieval. This helps reduce latency as well as bandwidth requirements.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-does-caching-work&quot;&gt;How Does Caching Work?&lt;/h1&gt;

&lt;p&gt;A cache is primarily used to store the most recently or frequently used data, in the hope that it will soon be fetched again. Caches are typically faster than databases and services when it comes to re-accessing this stored information. What makes them so fast is the fact that caches store data in SSDs and mostly RAMs which reduces the lookup time. However, this does not mean that we should cache everything.&lt;/p&gt;

&lt;h1 id=&quot;when-not-to-cache&quot;&gt;When Not to Cache?&lt;/h1&gt;
&lt;p&gt;There are some scenarios where the negative aspects of caching outweigh its benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;High Consistency requirements: When we fetch the previously stored data from the cache, there is a possibility of stale data being displayed to the user. For example, for a social media app, then some stale data is probably fine. However, for a stock price display app, then the cache must be in sync with the primary data source.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write heavy / Read Once: When write operations (updates to data) are more frequent than read operations (data retrieval). For example, caching the data of an analytics system would only increase the hardware maintenance cost.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Low repetition: When the action of retrieval of the same information is not frequently repeated by the user. For example, the cost calculated by the trip cost estimation module of a cab booking app between the exact two points need not be cached.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cache-eviction-strategies&quot;&gt;Cache Eviction Strategies&lt;/h1&gt;
&lt;p&gt;We need to regularly expel data from the cache to limit the size of the cache and to maintain its speed while ensuring that the entries are up to date.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;time-based&quot;&gt;Time Based&lt;/h2&gt;

&lt;p&gt;We keep an entry in the cache for some amount of time. In this strategy, we set a TTL (Time To Live). We will evict the entry from the cache after a certain pre-determined time has elapsed. The time which an entry stays in the cache before being evicted is called TTL.&lt;/p&gt;

&lt;h2 id=&quot;size-based&quot;&gt;Size Based&lt;/h2&gt;

&lt;p&gt;We keep at most some number of entries in the cache.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;FIFO (First In First Out): We harness the FIFO property of the queue data structure to evict old entries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LFU (Least Frequently Used): When we must evict an entry, we will evict the least frequently used entry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LRU (Least Recently Used): When we must evict an entry, we will evict the least recently used entry.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LFRU (Least Frequently and Recently Used): We evict the least valuable entry, the one that‚Äôs neither used frequently nor recently. This strategy gives the best results.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;metrics&quot;&gt;Metrics&lt;/h1&gt;
&lt;p&gt;We can use the following metrics to evaluate the performance of the cache:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Size: Increasing the size of the cache usually increases the response time and therefore reduces its performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Latency: The introduction of cache into the system must reduce latency from what it was earlier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cache Hit Rate: It is the ratio of results found in the cache to the requests made to the cache. If the cache hit rate is low i.e., requests to cache are not returning the desired data, then it essentially slows down the system.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;caching-products&quot;&gt;Caching Products&lt;/h1&gt;

&lt;p&gt;It‚Äôs usually not recommended to write your own cache implementation, because there are a lot of really good cache implementations out there that you can use. Some of the most popular caching products that are available in the market are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ehcache&lt;/li&gt;
  &lt;li&gt;Hazelcast&lt;/li&gt;
  &lt;li&gt;Memcached&lt;/li&gt;
  &lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 26 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series23</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series23</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part22]: ÏãúÏä§ÌÖú ÎîîÏûêÏù∏(3) Consistent Hashing</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#why-hashing&quot; id=&quot;markdown-toc-why-hashing&quot;&gt;Why hashing?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#consistent-hashing&quot; id=&quot;markdown-toc-consistent-hashing&quot;&gt;Consistent Hashing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-is-it-used&quot; id=&quot;markdown-toc-where-is-it-used&quot;&gt;Where is it Used&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;why-hashing&quot;&gt;Why hashing?&lt;/h1&gt;

&lt;p&gt;Hash is basically a function that takes a value and converts it into another value of a specific format. Hash functions that are commonly used are MD5, SHA1, SHA256, etc.&lt;/p&gt;

&lt;p&gt;Suppose you build a distributed cache, where the data is distributed over various nodes, sometimes spanning multiple data centers. When we want to store the data for a user, we need to decide which node will cache this data. And when we want to retrieve this cached value, we must query the same node. So let us use a simple hash function for this again.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hash(user) = Sum(ASCII value of all characters in name) % 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where 5 is the number of nodes. This way, the hashes generated for users will be as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since hash(Alice) is 0, Alice‚Äôs data will be stored in node 0. Similarly, Bob‚Äôs data will be stored in node 1 and Eve‚Äôs in 4. Now when you need to look up the information for Alice, you will use the same hash function to determine which node to query. Since hash(Alice) equals 0, you will query node 0 and fetch the information.&lt;/p&gt;

&lt;p&gt;But there is a problem with this solution. This model is not scalable. If the traffic increases and you want to add a new node, the formula to calculate the hash will get updated to&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hash(user) = Sum(ASCII value of all characters in name) % 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And similarly hash(Alice) will get updated to 2. So now you will search for Alice‚Äôs information in node 2, but the information is actually stored in node 0 so you won‚Äôt find it.&lt;/p&gt;

&lt;p&gt;To fix this, you will need to rehash all the data every time a node is added or removed, and once rehashed, you need to move the data to their respective new nodes, which could be across different data centers. This is not a very good solution as it uses up a lot of CPU resources and bandwidth.&lt;/p&gt;

&lt;p&gt;This is where Consistent Hashing comes in.&lt;/p&gt;

&lt;h1 id=&quot;consistent-hashing&quot;&gt;Consistent Hashing&lt;/h1&gt;

&lt;p&gt;Consistent Hashing tries to optimize the system in such a way that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don‚Äôt need to move around all the data while adding or removing nodes.&lt;/li&gt;
  &lt;li&gt;There will be minimal movement of data as if a node is removed, the data from that node will be supported by another node. Similarly, when a node is added, some data will be mapped to it as you don‚Äôt want it to sit idle.&lt;/li&gt;
  &lt;li&gt;You can have a nearly even distribution of data across all machines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is &lt;strong&gt;removing the number of nodes in the system out of the equation&lt;/strong&gt; while calculating the hash. Now hashes for data and nodes will all be independently calculated and adding or removing nodes won‚Äôt change these hashes.&lt;/p&gt;

&lt;p&gt;Now instead of assigning the data to these nodes in a sequential manner, we will plot these nodes, or their hashes, on the number line, and each node will be responsible for the range between its position and the position of the first node to its right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the data comes in for storage, we will calculate its hash to determine its place on the number line. Based on which node‚Äôs range it falls in, we will map the data to that node.&lt;/p&gt;

&lt;p&gt;If you want to remove a node from this system, the range of the previous machine on the number line will be extended, and all the data from the removed node will be mapped to the previous node in the number line. This resolves the issue of data transfer as only the data from one machine will need to be mapped to another machine.&lt;/p&gt;

&lt;p&gt;But there is still a problem with this system. &lt;strong&gt;After removing a node, the ranges of certain machines might not be balanced.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An ideal solution to this would be &lt;strong&gt;assigning data between various nodes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The idea is to assign the same machine to multiple hashes and map each of these hashes on the number line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be achieved by either using multiple hash functions or by assigning multiple identifiers to the same node, and then calculating the hashes for all of the instanced. Then, We can map them on the number line, or what we can now refer to as a consistent hashing ring, essentially representing the same node on the ring multiple times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the data handled by a removed node will be distributed across the ring. So when a node needs to be removed, all its identifiers will be removed and the data will be mapped to the nodes falling to the right of each identifier, as shown in the following diagram, making the distribution much more even.&lt;/p&gt;

&lt;p&gt;(ÎÖ∏ÎìúÍ∞Ä ÏÇ≠Ï†úÎêòÎèÑ, Í∑∏ ÎÖ∏ÎìúÏóê Ï†ÄÏû•ÎêòÏñ¥ ÏûàÎçò Îç∞Ïù¥ÌÑ∞Í∞Ä Ïó¨Îü¨ Ìï¥Ïãú Ìï®ÏàòÏóê ÏùòÌï¥ Î∂ÑÎ¶¨Îêú Ïù∏Ïä§ÌÑ¥Ïä§Ïóê Ìù©Ïñ¥Ï†∏ÏÑú Ï†ÄÏû•ÎêòÏñ¥ ÏûàÏóàÏúºÎØÄÎ°ú, Îã§Î•∏ ÎÖ∏ÎìúÎ°ú Ïù¥ÎèôÌï† ÎïåÎèÑ Í∞Å Ïù∏Ïä§ÌÑ¥Ïä§Ïùò Ïò§Î•∏Ï™Ω Ïù∏Ïä§ÌÑ¥Ïä§Î°ú Ï†ÄÏû•ÎêòÎØÄÎ°ú Ïó¨Îü¨ ÎÖ∏ÎìúÏóê Î∂ÑÏÇ∞ Ï†ÄÏû•ÎêòÍ≤å ÎêúÎã§. -&amp;gt; Îç∞Ïù¥ÌÑ∞Í∞Ä Ìõ®Ïî¨ evenÌï¥ÏßÑÎã§.)&lt;/p&gt;

&lt;p&gt;The reason why it gets even is because each identifier of machine is hashed separately, with the hash function, it is very likely that they would be arranged in a random fashion like Blue_4 - Red_1 - Blue_2 - Green_3 - Red_4 - Orange_1, which makes sure that when one machine is removed, it‚Äôs data us spread across multiple other machines.&lt;/p&gt;

&lt;p&gt;Similarly, when a new node is added, its identifiers will also be mapped across the ring, picking up data from various nodes, maintaining even distribution across the ring.&lt;/p&gt;

&lt;h1 id=&quot;where-is-it-used&quot;&gt;Where is it Used&lt;/h1&gt;

&lt;p&gt;Now we just saw how we could use consistent hashing while building a caching system. There are a lot of systems out there that use consistent hashing for improving their performance. For example, Cassandra, a distributed NoSQL Columnar DB that deals with huge traffic uses consistent hashing to distribute its data. Amazon‚Äôs Dynamo DB is another such example. It is a managed distributed DB which uses consistent hashing for distributing its data. Similarly, Couchbase is another NoSQL DB (a document DB) which uses consistent hashing to distribute its data across various instances.&lt;/p&gt;
</description>
                <pubDate>Tue, 26 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series22</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series22</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part21]: ÏãúÏä§ÌÖú ÎîîÏûêÏù∏(2) Inter-Service Communication</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#inter-service-communication&quot; id=&quot;markdown-toc-inter-service-communication&quot;&gt;Inter-Service Communication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#modes-of-communication&quot; id=&quot;markdown-toc-modes-of-communication&quot;&gt;Modes of communication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#synchronous-approach&quot; id=&quot;markdown-toc-synchronous-approach&quot;&gt;Synchronous Approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#asynchronous-approach&quot; id=&quot;markdown-toc-asynchronous-approach&quot;&gt;Asynchronous Approach&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#best-of-both-worlds&quot; id=&quot;markdown-toc-best-of-both-worlds&quot;&gt;Best of Both Worlds&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#message-queues&quot; id=&quot;markdown-toc-message-queues&quot;&gt;Message Queues&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#protocols-for-communication&quot; id=&quot;markdown-toc-protocols-for-communication&quot;&gt;Protocols for communication&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#how-clients-and-servers-interact&quot; id=&quot;markdown-toc-how-clients-and-servers-interact&quot;&gt;How clients and servers interact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket&quot; id=&quot;markdown-toc-websocket&quot;&gt;WebSocket&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;inter-service-communication&quot;&gt;Inter-Service Communication&lt;/h1&gt;

&lt;p&gt;In this article, we will be looking at how services interact with each other. Why is this important? Well, when you have a huge system with a lot of microservices interacting with each other, their communication needs to be efficient to provide the best user experience and also to avoid any cascading effects across the system.&lt;/p&gt;

&lt;h1 id=&quot;modes-of-communication&quot;&gt;Modes of communication&lt;/h1&gt;
&lt;p&gt;There are primarily two modes of communication between services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;: When a service &lt;strong&gt;waits&lt;/strong&gt; for a downstream system to respond before responding back to the client with a success or failure response.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: This is a more of a fire and forget approach. A service will fire a call to the downstream system and won‚Äôt track it further.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;synchronous-approach&quot;&gt;Synchronous Approach&lt;/h1&gt;
&lt;p&gt;Let‚Äôs say you are building Amazon. You have a user U1 trying to place an order. U1 will reach out to the Order Service. Order Service will now talk to the Inventory Service to find out if a sufficient quantity of the product is available. If that is the case, Inventory Service will send a success response. Otherwise, it will respond with an error, and Order Service will respond to the user saying the order could not be placed.&lt;/p&gt;

&lt;p&gt;Now if the inventory response was a success, the Order Service will talk to the Payment Service to process the payment. Once the payment is successful, the Order Service will now talk to the Warehouse Service asking it to start packing and prepare for shipping the product to the user. Once Warehouse Service responds with a success, the Order Service will talk to a Notification Service to send an email to the user saying their order has been placed, with so and so payment details and sharing an ETA for the delivery of the product.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, this is a happy scenario. What happens when one of the calls fails? Well, it depends on which call fails. If the call to Notification Service fails, does it make sense to cancel the order? No. We shouldn‚Äôt cancel an order just because the Notification Service failed. However, what if payment fails? Now we definitely need to cancel the order. But now we need to update the Inventory again to undo the change to the product quantity. What if the call to Inventory Service fails?&lt;/p&gt;

&lt;p&gt;So as you can see, there are some loopholes in a purely synchronous approach.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It has very high latency as the user does not get notified until all the calls have come back with a success or failure response.&lt;/li&gt;
  &lt;li&gt;The system is tightly coupled, and any failure will have cascading effects across the board.&lt;/li&gt;
  &lt;li&gt;The code becomes very complex since we need to handle all the cascading error scenarios.&lt;/li&gt;
  &lt;li&gt;Due to complexity, it requires extremely high maintenance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;asynchronous-approach&quot;&gt;Asynchronous Approach&lt;/h1&gt;
&lt;p&gt;Let us see what happens in a purely asynchronous approach.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;U1 sends a call to the Order Service which makes asynchronous calls to all the downstream systems. In such a case, even if Inventory Service responds with an error code, or even if the payment fails, the order would get placed. Which is an even bigger mess! So how do we go about this?&lt;/p&gt;

&lt;p&gt;Well, as we can see, some parts of this process must be mandatory, and some can be done on a best-effort basis. If the Inventory Service or Payment Service responds with an error, we cannot place the order. But if the notification does not go through or the Warehouse Service is temporarily down, we don‚Äôt need to cancel our order. So we can follow a hybrid approach here; &lt;strong&gt;use a synchronous approach for the mandatory steps and an asynchronous approach for the rest.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;best-of-both-worlds&quot;&gt;Best of Both Worlds&lt;/h2&gt;
&lt;p&gt;The Hybrid approach suggests that the mandatory tasks need to be performed in a synchronous manner and everything else can be done asynchronously.&lt;/p&gt;

&lt;p&gt;So Order Service will send out a synchronous call to Inventory Service, and wait for a response. In case of success, it will call the Payment Service. If the Payment Service gives a successful response, Order Service will make parallel asynchronous calls to the Warehouse Service and Notification Service and, at the same time, respond to the user saying the order has been placed. If the Payment Service call had failed, Order Service would send an asynchronous call to the Inventory Service reverting the quantity change.&lt;/p&gt;

&lt;p&gt;So this looks like a much better solution. There are still some misses here though. What if the asynchronous call to Warehouse Service failed? It would lose the details for that order. This is where we would use &lt;strong&gt;Message Queues&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;message-queues&quot;&gt;Message Queues&lt;/h2&gt;
&lt;p&gt;Message Queues(Kafka, RabbitMQ, ActiveMQ Îì±) are highly fault-tolerant and persist messages for some time. How a message Queue works is, it has some Publishers adding messages to it, and some Subscribers listening to it and picking up the events meant for them at their own pace. Since these queues store messages for some time, if a subscriber is temporarily down, the messages will remain in the queue and will be picked up when the subscriber is running again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now, when Order Service wants to make asynchronous calls to Warehouse and Notification services, it will instead put an event in the Message Queue. Warehouse Service and Notification Service, which will be listening to the queue, will pick up the events meant for them. If one of the systems is down, the messages will remain in the queue until the service is back up and ready to receive messages again. This way, none of the data gets lost.&lt;/p&gt;

&lt;h1 id=&quot;protocols-for-communication&quot;&gt;Protocols for communication&lt;/h1&gt;

&lt;p&gt;In this article, we will look at the protocols we can use to interact with clients.&lt;/p&gt;

&lt;h2 id=&quot;how-clients-and-servers-interact&quot;&gt;How clients and servers interact&lt;/h2&gt;

&lt;p&gt;In a real-world scenario, rather than talking to a specific server, the client‚Äôs request will instead be sent to a data center, where it could be picked up by any of the servers. However, irrespective of which server receives the request, the response will be the same. Based on this flow, we can draw the following conclusions about this architecture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is client-driven. Only on the user‚Äôs button click will the client send the requests to the server, and the server will only respond to these requests.&lt;/li&gt;
  &lt;li&gt;It is a simple request-response model. For every request from the client, the server will respond with some information or a simple confirmation.&lt;/li&gt;
  &lt;li&gt;There are occasional requests from clients, only one request every few seconds based on the user‚Äôs actions i.e. from the client-side it is a low throughput system.&lt;/li&gt;
  &lt;li&gt;It is a stateless system i.e. irrespective of which server is responding, the response remains the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;/h2&gt;

&lt;p&gt;These requirements make this a perfect use case for HTTP(s) protocol. Although these days, most architectures on HTTP have moved to HTTPS, which is a more secure version of HTTP as it prevents man-in-the-middle attacks.&lt;/p&gt;

&lt;p&gt;Now, when we are using HTTP, REST is usually the best API standard to follow as it is very widely used and very user friendly.&lt;/p&gt;

&lt;p&gt;Let us look at an example for a REST request and response:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Request:
Method: GET
URL: https://www.twitter.com/user/{id}

Response:
Status: 200 OK
Headers: &amp;lt;...&amp;gt;
Body: {
    ‚ÄúuserId‚Äù: 1,
    ‚ÄúEmail‚Äù: ‚Äúsomeone@example.com‚Äù
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The client makes a request to twitter.com over HTTPS to get information about a user with an id. In response, the server sends a success status code along with the user‚Äôs user id and email. As you can see, REST API standard is pretty much self-documenting, which adds to its user friendliness.&lt;/p&gt;

&lt;p&gt;Now let us look at an example of a chat application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We know that HTTP is a client-driven protocol, so the server cannot initiate any contact with the client. It can only respond to the client upon receiving a request. So when U1 sends a message to U2 via chat server, U2 doesn‚Äôt receive the message until it asks the server to share any pending messages. This leads to a delay when receiving messages.&lt;/p&gt;

&lt;p&gt;A solution to this would be that U2 sends frequent requests to the chat server in the hopes of receiving a message. But this puts a huge load on the chat server as it will receive a huge number of requests from all its clients.&lt;/p&gt;

&lt;p&gt;The best approach would be &lt;strong&gt;if the server could send a notification to the user every time there is a message&lt;/strong&gt;. For this, we use a protocol called &lt;strong&gt;WebSocket&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;(ÏÑúÎ≤ÑÍ∞Ä U2ÏóêÍ≤å Î≥¥ÎÇº Î©îÏãúÏßÄÎ•º Í∞ÄÏßÄÍ≥† ÏûàÏùåÏóêÎèÑ Î∂àÍµ¨ÌïòÍ≥†, Îä•ÎèôÏ†ÅÏúºÎ°ú U2ÏóêÍ≤å Î≥¥ÎÇ¥ÏßÄ ÏïäÎäîÎã§. U2Î°úÎ∂ÄÌÑ∞ requestÎ•º Î∞õÏùÑÎïåÍπåÏßÄ Í∏∞Îã§Î¶∞Îã§.)&lt;br /&gt;
(U2Îäî Ïñ∏Ï†ú ÏûêÏã†Ïù¥ Î∞õÏïÑÏïºÌï† Î©îÏãúÏßÄÍ∞Ä ÏÑúÎ≤ÑÏóê ÎèÑÏ∞©ÌñàÎäîÏßÄ Î™®Î•¥ÎØÄÎ°ú, Í≥ÑÏÜç ÏÑúÎ≤ÑÏóê requestÎ•º Î≥¥ÎÇ¥Ïïº ÌïúÎã§.)&lt;br /&gt;
(WebSocketÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ ÏÑúÎ≤ÑÎäî U2ÏôÄ connectionÎêòÏñ¥ ÏûàÏúºÎ©¥ requestÎ•º Î∞õÏßÄ ÏïäÏïÑÎèÑ ÏïåÏïÑÏÑú U2Ïóê Î©îÏãúÏßÄÎ•º Î≥¥ÎÇ∏Îã§)&lt;br /&gt;
(connectionÎêòÏñ¥ ÏûàÏßÄ ÏïäÏúºÎ©¥, Í∞ÄÎßåÌûà ÏûàÎã§Í∞Ä, connectionÎêòÍ≥† U2Í∞Ä requestÎ≥¥ÎÇ¥Î©¥ Î©îÏãúÏßÄ Î≥¥ÎÇ∏Îã§)&lt;br /&gt;
(WebSocketÏóêÎèÑ Îã®Ï†êÏùÄ ÏûàÎã§. cost of maintaining a persistent connection with millions of users.)&lt;/p&gt;

&lt;h2 id=&quot;websocket&quot;&gt;WebSocket&lt;/h2&gt;
&lt;p&gt;A WebSocket connection is a persistent connection. It is also a bidirectional protocol, where communication can be initiated by the client or the server as long as there is an open connection. It is &lt;strong&gt;optimized for high-frequency communication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at how our chat application would work in the case of WebSocket protocol.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/system_design_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, U1 and U2 will establish HTTP connections with the chat server, which are then upgraded to a WebSocket connection. When U1 sends a message for U2 via the chat server, it will store the message along with its status, RECEIVED, let‚Äôs say.&lt;/p&gt;

&lt;p&gt;The chat server, if it has an open connection with U2, will then send the message to U2 and update the status to SENT. If U2 was not online and there was no open connection between U2 and the server, the messages will be saved until U2 comes online and requests the server to send all pending messages. The server will send all messages with the status RECEIVED and update the status to SENT.&lt;/p&gt;

&lt;p&gt;As you can see, with this approach we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reduced the latency, since the server can simply send the messages over an open connection&lt;/li&gt;
  &lt;li&gt;Saved on CPU and bandwidth, as the client doesn‚Äôt need to unnecessarily send requests to the server and the server is not under unnecessary load&lt;/li&gt;
  &lt;li&gt;Provided better user experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with the benefits, there is a high cost to using WebSockets; that is the cost of maintaining a persistent connection with millions of users.&lt;/p&gt;

&lt;p&gt;So how do we decide whether to use HTTP or WebSocket? Do we always go for Websocket then? Well, not really, as WebSocket is much more expensive than HTTP. We can safely say, if the communication between client and server is at a &lt;strong&gt;lower throughput on the client-side&lt;/strong&gt;, HTTP is the way to go. &lt;strong&gt;If the communication is always client-driven&lt;/strong&gt;, WebSocket is not needed. Also, if you are on a &lt;strong&gt;tight budget&lt;/strong&gt;, HTTP may be the better choice.&lt;/p&gt;

&lt;p&gt;On the other hand, if the communication from the &lt;strong&gt;client is at a higher throughput&lt;/strong&gt;, WebSocket may be a better option. If the &lt;strong&gt;communication can be driven by both client and server&lt;/strong&gt;, WebSocket is the way to go. Although here comes the tradeoff between cost and performance. We must decide if the optimization is really worth the huge cost of maintaining persistent connections with so many users.&lt;/p&gt;
</description>
                <pubDate>Tue, 26 Jul 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series21</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series21</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
    </channel>
</rss>