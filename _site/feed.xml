<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Code Museum</title>
        <description>Jay Tech personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Mon, 14 Mar 2022 05:26:37 +0900</pubDate>
        <lastBuildDate>Mon, 14 Mar 2022 05:26:37 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>Javascript Series [Part4]: Javascript 데이터 타입과 연산자</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터-타입&quot; id=&quot;markdown-toc-데이터-타입&quot;&gt;데이터 타입&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#숫자-타입&quot; id=&quot;markdown-toc-숫자-타입&quot;&gt;숫자 타입&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#문자열-타입&quot; id=&quot;markdown-toc-문자열-타입&quot;&gt;문자열 타입&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#템플릿-리터럴&quot; id=&quot;markdown-toc-템플릿-리터럴&quot;&gt;템플릿 리터럴&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#undefined-타입&quot; id=&quot;markdown-toc-undefined-타입&quot;&gt;undefined 타입&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#심벌-타입&quot; id=&quot;markdown-toc-심벌-타입&quot;&gt;심벌 타입&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#연산자&quot; id=&quot;markdown-toc-연산자&quot;&gt;연산자&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#산술-연산자&quot; id=&quot;markdown-toc-산술-연산자&quot;&gt;산술 연산자&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#비교-연산자&quot; id=&quot;markdown-toc-비교-연산자&quot;&gt;비교 연산자&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#삼항-조건-연산자&quot; id=&quot;markdown-toc-삼항-조건-연산자&quot;&gt;삼항 조건 연산자&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#논리-연산자&quot; id=&quot;markdown-toc-논리-연산자&quot;&gt;논리 연산자&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;../../images/js_1.jpeg&quot; alt=&quot;&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터-타입&quot;&gt;데이터 타입&lt;/h1&gt;

&lt;p&gt;ES6 기준으로 자바스크립트에서는 7개의 데이터 타입을 제공한다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;구분&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;데이터 타입&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;원시 타입&lt;/td&gt;
      &lt;td&gt;숫자&lt;/td&gt;
      &lt;td&gt;숫자, 정수와 실수의 구분 없음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;문자열&lt;/td&gt;
      &lt;td&gt;문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;불리언&lt;/td&gt;
      &lt;td&gt;논리적 참과 거짓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;undefined&lt;/td&gt;
      &lt;td&gt;var 키워드로 선언된 변수에 암묵적으로 할당되는 값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;null&lt;/td&gt;
      &lt;td&gt;값이 없다는 것을 의도적으로 명시할 때 사용되는 값&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;symbol&lt;/td&gt;
      &lt;td&gt;ES6에서 추가된 타입&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;객체 타입&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;객체, 함수, 배열 등&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;숫자-타입&quot;&gt;숫자 타입&lt;/h2&gt;

&lt;p&gt;자바스크립트는 독특하게 하나의 숫자 타입만 존재한다.&lt;/p&gt;

&lt;p&gt;ECMAScript 사양에 따르면 숫자 타입의 값은 배정밀도(double precision) 64비트 부동소수점 형식을 따른다.&lt;/p&gt;

&lt;p&gt;정수, 실수, 2진수, 8진수, 16진수 리터럴은 모두 메모리에 배정밀도 64비트 부동소수점 형식의 2진수로 저장된다. 자바스크립트는 2진수, 8진수, 16진수를 표현하기 위한 데이터 타입을 제공하지 않기 때문에 이들 값을 참조하면 모둗 10진수로 해석된다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b01000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;octal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0o101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 65&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;octal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 65&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 65&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문자열-타입&quot;&gt;문자열 타입&lt;/h2&gt;

&lt;p&gt;문자열 타입은 텍스트 데이터를 나타내는 데 사용한다. 문자열은 0개 이상의 16비트 유니코드 문자(UTF-16)의 집합으로 전 세계 대부분의 문자를 표현할 수 있다. 자바스크립트의 문자열은 원시타입이며, 변경 불가능한 값이다.&lt;/p&gt;

&lt;p&gt;문자열은 작은따옴표(‘’), 큰따옴표(“”) 또는 백틱(``)으로 텍스트를 감싼다. 가장 일반적인 표기법은 작은따옴표를 사용하는 것이다. 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰과 구분하기 위해서다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`apple`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;템플릿-리터럴&quot;&gt;템플릿 리터럴&lt;/h2&gt;

&lt;p&gt;ES6부터 템플릿 리터럴이라고 하는 새로운 문자열 표기법이 도입되었다. 템플릿 리터럴은 멀티라인 문자열, 표현식 삽입 등 편리한 문자열 처리 기능을 제공한다. 템플릿 리터럴은 런타임에 일반 문자열로 변환되어 처리된다.&lt;/p&gt;

&lt;p&gt;템플릿 리터럴은 백틱(``)을 사용해 표현한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 멀티라인 문자열&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 표현식 삽입&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Ung-mo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lee&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ES5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`My name is &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ES6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;undefined-타입&quot;&gt;undefined 타입&lt;/h2&gt;

&lt;p&gt;var 키워드로 선언한 변수는 암묵적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefine&lt;/code&gt;d로 초기화된다. 다시 말해, 변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이뤄질 때까지 자바스크립트 엔진이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undeefined&lt;/code&gt;로 초기화한다. 변수를 참조했을 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;가 반환된다면 참조한 변수가 선언 이후 값이 할당된 적이 없는 변수라는 것을 간파할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;를 개발자가 의도적으로 변수에 할당한다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;의 본래 취지와 어긋날뿐더러 혼란을 줄 수 있으므로 권장하지 않는다.&lt;/p&gt;

&lt;p&gt;변수에 값이 없다는 것을 명시하고 싶을 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;을 할당하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;심벌-타입&quot;&gt;심벌 타입&lt;/h2&gt;

&lt;p&gt;심벌은 ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다. 심벌 값은 다른 값과 중복되지 않는 유일무이한 값이다.&lt;/p&gt;

&lt;p&gt;다른 원시 값은 리터럴을 통해 생성하지만 심벌은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; 함수를 호출해 생성한다. 이때 생성된 심벌 값은 외부에 노출되지 않으며, 다른 값과 절대 중복되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 심벌 생성&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 객체 생성&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 유일한 값을 가지는 심벌을 프로퍼티 키로 사용한다&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;연산자&quot;&gt;연산자&lt;/h1&gt;

&lt;h2 id=&quot;산술-연산자&quot;&gt;산술 연산자&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;단항 산술 연산자&lt;/td&gt;
      &lt;td&gt;++, –, +, -&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;이항 산술 연산자&lt;/td&gt;
      &lt;td&gt;+, -, *, /, %&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;++&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 연산자는 위치에 의미가 있다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 선할당 후증가&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 선증가 후할당&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;비교-연산자&quot;&gt;비교 연산자&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;비교 연산자&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;의미&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;==&lt;/td&gt;
      &lt;td&gt;동등 비교&lt;/td&gt;
      &lt;td&gt;x와 y의 값이 같음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;===&lt;/td&gt;
      &lt;td&gt;일치 비교&lt;/td&gt;
      &lt;td&gt;x와 y의 값과 타입이 같음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;!=&lt;/td&gt;
      &lt;td&gt;부동등 비교&lt;/td&gt;
      &lt;td&gt;x와 y의 값이 다름&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;!==&lt;/td&gt;
      &lt;td&gt;불일치 비교&lt;/td&gt;
      &lt;td&gt;x와 y의 값과 타입이 다름&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;동등 비교 연산자(==)는 좌항과 우항의 피연산자를 비교할 때 먼저 암묵적으로 타입 변환을 통해 타입을 일치시킨 후 같은 값인지 비교한다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그래서 동등 비교 연산자는 예측하기 어려운 결과를 만들어낸다. 따라서 동등 비교 연산자보다는 일치 비교 연산자를 권장한다.&lt;/p&gt;

&lt;h2 id=&quot;삼항-조건-연산자&quot;&gt;삼항 조건 연산자&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;조건식&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;조건식이&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;true일&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;때&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;반환할&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;값&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;false일&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;때&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;반환할&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;값&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;홀수&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;짝수&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 짝수&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;삼항 조건 연산자 표현식은 값처럼 사용할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;논리-연산자&quot;&gt;논리 연산자&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;논리 연산자&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;의미&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;||&lt;/td&gt;
      &lt;td&gt;논리합(OR)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
      &lt;td&gt;논리곱(AND)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;!&lt;/td&gt;
      &lt;td&gt;부정(NOT)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
                <pubDate>Sat, 05 Mar 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/javascript-series4</link>
                <guid isPermaLink="true">http://localhost:4000/javascript-series4</guid>
                
                <category>Javascript</category>
                
                
                <category>programming_language</category>
                
            </item>
        
            <item>
                <title>Jenkins Series [Part4]: Jenkins를 이용한 간단한 실습</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Fri, 04 Mar 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/jenkins_series4</link>
                <guid isPermaLink="true">http://localhost:4000/jenkins_series4</guid>
                
                <category>Jenkins</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>Jenkins Series [Part3]: 선언적 파이프라인(Feat.Jenkinsfile)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jenkinsfile&quot; id=&quot;markdown-toc-jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jenkinsfile의-구조&quot; id=&quot;markdown-toc-jenkinsfile의-구조&quot;&gt;Jenkinsfile의 구조&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sections&quot; id=&quot;markdown-toc-sections&quot;&gt;Sections&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#agent&quot; id=&quot;markdown-toc-agent&quot;&gt;agent&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#stages&quot; id=&quot;markdown-toc-stages&quot;&gt;stages&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#stage&quot; id=&quot;markdown-toc-stage&quot;&gt;stage&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#steps&quot; id=&quot;markdown-toc-steps&quot;&gt;steps&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#post&quot; id=&quot;markdown-toc-post&quot;&gt;post&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#directives&quot; id=&quot;markdown-toc-directives&quot;&gt;Directives&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#environment&quot; id=&quot;markdown-toc-environment&quot;&gt;environment&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#options&quot; id=&quot;markdown-toc-options&quot;&gt;options&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#parameters&quot; id=&quot;markdown-toc-parameters&quot;&gt;parameters&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#triggers&quot; id=&quot;markdown-toc-triggers&quot;&gt;triggers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#tools&quot; id=&quot;markdown-toc-tools&quot;&gt;tools&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#when&quot; id=&quot;markdown-toc-when&quot;&gt;when&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;jenkinsfile&quot;&gt;Jenkinsfile&lt;/h1&gt;

&lt;p&gt;Jenkinsfile은 파이프라인을 만들기 위해 작성하는 코드입니다. 이 때 Jenkinsfile을 작성하는 방법에는 두 가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Scripted Pipeline&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2016년까지 Jenkins 코드는 전체적인 틀을 위해서만 Jenkins DSL(Domain-Specific Language)가 약간 사용되었을 뿐 실질적인 프로그램의 흐름은 그루비(Groovy) 언어에 의해 작성되었습니다. 그래서 Jenkinsfile을 작성하기 위해 J&lt;strong&gt;enkins DSL뿐만 아니라 그루비 언어까지 배워야 했습니다.&lt;/strong&gt; 이렇게 작성된 코드가 바로 Scripted Pipeline입니다.&lt;/p&gt;

&lt;p&gt;이 때까지는 파이프라인에서 빌드후처리, 파이프라인 에러 상태확인, 알림기능 등 Jenkins에 특화된 내용은 없고 대부분 그루비의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try-catch-finally&lt;/code&gt; 구조로 구현해야 했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Declarative Pipeline&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러다 2017년부터 클라우드 비스(CloudBees)에서 선언적 파이프라인을 개발하였습니다. 이 문법을 통하여 파이프라인을 심플하고 독자적인 방법으로 작성할 수 있게 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;jenkinsfile의-구조&quot;&gt;Jenkinsfile의 구조&lt;/h1&gt;
&lt;p&gt;모든 선언적 파이프라인은 반드시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; 블록으로 감싸야 합니다. 그리고 그 안에 Sections과 Directives(지침)로 구성되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;sections&quot;&gt;Sections&lt;/h2&gt;
&lt;p&gt;Sections에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;agent&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stages&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt;가 있습니다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt;는 Jenkins DSL에서 Directives로 분류하고 있습니다. 하지만 저는 Sections로 분류하는 것이 편해 여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt;도 함께 소개하겠습니다. &lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/syntax/#&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;공식문서 참고&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;agent&quot;&gt;agent&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;agent&lt;/code&gt;는 파이프라인 혹은 스테이지를 어디서 실행할지를(파일 경로, 컨테이너 등) 의미합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;필수&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;파라미터&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;any, none, label, node, docker, dockerfile, kubernetes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;위치&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; block, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; block&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(&lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/syntax/#agent-parameters&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;공식문서 참고&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;stages&quot;&gt;stages&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; 섹션을 묶는 블럭입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;필수&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;파라미터&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;위치&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; block&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;stage&quot;&gt;stage&lt;/h3&gt;
&lt;p&gt;stage는 공식문서에서 Directives(지침)으로 분류하는 블럭이며 파이프라인 내에서 구분하고 싶은 각각의 단계(예를 들어 Build, Test, Deploy)를 나타냅니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;필수&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;파라미터&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;필수 파라미터: 각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt;의 이름&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;위치&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stages&lt;/code&gt; block&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;steps&quot;&gt;steps&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt;는 각각의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; 안에서 실행될 것들을 묶는 블럭입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;필수&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;파라미터&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;위치&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; block&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;post&quot;&gt;post&lt;/h3&gt;

&lt;p&gt;post는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; 또는 각각의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt;가 실행된 후 &lt;strong&gt;조건에 따라 실행되는 블록&lt;/strong&gt;입니다.&lt;br /&gt;
|&lt;strong&gt;필수&lt;/strong&gt;|No|
|&lt;strong&gt;조건&lt;/strong&gt;|always, changed, fixed, regression, aborted, failure, success, unstable, unsuccessful, cleanup|
|&lt;strong&gt;위치&lt;/strong&gt;|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pipeline&lt;/code&gt; block, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; block|&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/syntax/#post&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;공식문서 참고&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;directives&quot;&gt;Directives&lt;/h2&gt;

&lt;h3 id=&quot;environment&quot;&gt;environment&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    environment &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            environment &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;options&quot;&gt;options&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    options &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            options &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parameters&quot;&gt;parameters&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    parameters &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;triggers&quot;&gt;triggers&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    triggers &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tools&quot;&gt;tools&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    tools &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            tools &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;when&quot;&gt;when&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    agent &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    stages &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        stage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            when &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
            steps &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    post &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/syntax/&quot; target=&quot;_blank&quot;&gt;Jenkins 공식문서: Pipeline Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@seunghyeon/Jenkins-선언적Declarative-파이프라인#when--branch-name-&quot; target=&quot;_blank&quot;&gt;SeungHyeon, [Jenkins] # 선언적(Declarative) 파이프라인&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 03 Mar 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/jenkins_series3</link>
                <guid isPermaLink="true">http://localhost:4000/jenkins_series3</guid>
                
                <category>Jenkins</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>Jenkins Series [Part2]: Docker에서 Jenkins 설치하기(Feat.DooD)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jenkins-설치하기&quot; id=&quot;markdown-toc-jenkins-설치하기&quot;&gt;Jenkins 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#도커-컨테이너로-jenkins-띄우기&quot; id=&quot;markdown-toc-도커-컨테이너로-jenkins-띄우기&quot;&gt;도커 컨테이너로 Jenkins 띄우기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#도커-이미지-pull&quot; id=&quot;markdown-toc-도커-이미지-pull&quot;&gt;도커 이미지 Pull&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jenkins-컨테이너-실행&quot; id=&quot;markdown-toc-jenkins-컨테이너-실행&quot;&gt;Jenkins 컨테이너 실행&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jenkins-컨테이너에서-도커-cli가-필요한-순간이-온다&quot; id=&quot;markdown-toc-jenkins-컨테이너에서-도커-cli가-필요한-순간이-온다&quot;&gt;Jenkins 컨테이너에서 도커 CLI가 필요한 순간이 온다&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;jenkins-설치하기&quot;&gt;Jenkins 설치하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jenkins can be installed through native system packages, Docker, or even run standalone by any machine with a Java Runtime Environment (JRE) installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;도커-컨테이너로-jenkins-띄우기&quot;&gt;도커 컨테이너로 Jenkins 띄우기&lt;/h1&gt;

&lt;p&gt;도커 이미지를 이용해서 Jenkins를 띄우는 방법은 간단합니다. 사용하다보면 커스터마이징할 필요가 생겨 이미지를 직접 빌드해야 하는 상황이 오겠지만, 아직 저는 Jenkins를 사용해 본 경험이 없기 때문에 단순히 띄우는 데 의의를 두고 이번 포스트를 작성했습니다.&lt;/p&gt;

&lt;h2 id=&quot;도커-이미지-pull&quot;&gt;도커 이미지 Pull&lt;/h2&gt;

&lt;p&gt;우선 도커 허브에서 이미지를 다운받습니다. 저는 arm64 아키텍처를 필요로 하기 때문에 그에 맞는 이미지를 다운 받았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull jenkins/jenkins:2.332.1-lts-jdk11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jenkins-컨테이너-실행&quot;&gt;Jenkins 컨테이너 실행&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# p: jenkins 웹 UI를 localhost로 접속하기 위해&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# u: 내가 사용한 jenkins 이미지 사용자가 root로 안되어 있어 컨테이너 내에서 apt-get update 이런게 안되서 root로 바꿔줌&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# v: 나중에 뒤에서 사용할 DooD 패턴을 위해 jenkins 컨테이너와 호스트의 소켓을 마운트해야함  &lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jenkins/jenkins:2.332.1-lts-jdk11 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 웹 브라우저에서 로컬호스트 8080포트로 Jenkins Web UI에 접근&lt;/span&gt;
localhost:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 뭔가 비밀번호 같은거를 입력하라고 뜨는데 이는 컨테이너 로그에 남아있어서 복붙하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker logs &amp;lt;컨테이너명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 플러그인 설치를 어떤 방법으로 할 것인지 묻는데 저는 Jenkins에서 선택해준 것들로 우선 설치하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;플러그인들을 열심히 설치하고 있습니다. Git이 자주 사용되는지 기본적으로 설치가 되는 모습입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 끝나면 계정 설정을 하라고 나오고 간단히 입력하고 나면 Jenkins web UI가 잘 보입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jenkins-컨테이너에서-도커-cli가-필요한-순간이-온다&quot;&gt;Jenkins 컨테이너에서 도커 CLI가 필요한 순간이 온다&lt;/h1&gt;

&lt;p&gt;Jenkins는 CI/CD를 위한 기본적인 툴로써 요즘같은 마이크로서비스 패턴이 트렌드인 시대에서 도커는 반드시 필요해 보입니다. 여기서 문제가 있습니다. 저는 방금 Jenkins 서버를 도커 컨테이너로 띄웠는데 컨테이너에서 도커를 또 설치해도 괜찮을까요?&lt;/p&gt;

&lt;p&gt;이렇게 도커 컨테이너 안에 도커를 또 설치하는 패턴을 &lt;strong&gt;Docker in Docker(DinD)&lt;/strong&gt;라고 하는데 많은 시니어 개발자들은 이 방식을 권장하지 않는다고 합니다. 다음은 DinD 방식에 대한 장단점을 정리해둔 포스트이니 참고해봐도 좋을 것 같습니다. &lt;a href=&quot;http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/&quot; target=&quot;_blank&quot;&gt;(&lt;strong&gt;~jpetazzo/Using Docker-in-Docker for your CI or testing environment? Think twice.&lt;/strong&gt; 참고)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DinD의 단점을 해결하고자 나온 방식이 &lt;strong&gt;Docker out of Docker(DooD)&lt;/strong&gt;라고 합니다. 이 방법은 컨테이너에 도커 엔진(도커 클라이언트와 도커 호스트)을 설치하지 않고 도커 클라이언트만 설치하는 방식입니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 도커 Client 설치  &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://docs.docker.com/engine/install/debian/ 데비안 위에서 도커 클라이언트 설치&lt;/span&gt;
apt-get update

apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    gnupg &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    lsb-release

curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/debian/gpg | gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/docker-archive-keyring.gpg

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;--print-architecture&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; stable&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/docker.list &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null

apt-get update

apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도커 클라이언트가 잘 설치되었는지 확인하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 명령어를 실행해봤습니다. 아래의 에러는 위에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt; 명령어를 실행할 때 v 옵션으로 마운트하지 않은 경우 발생하는 에러입니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@bdab333aab12:/# docker ps
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에 설명한 대로 잘 따라오셨다면 아마 다음과 같은 결과가 잘 보일겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 핵심은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;컨테이너 안의 도커 소켓과 호스트의 도커 소켓을 마운트 한다.&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨테이너 안의 jenkins 유저에게 호스트의 도커 소켓 실행 권한을 준다.&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 아직 되는지 확인해보진 않았다&lt;/span&gt;
usermod &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;호스트의사용자아이디&amp;gt; jenkins &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 groupmod &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &amp;lt;호스트의도커그룹아이디&amp;gt; docker &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitgadak.tistory.com/3&quot; target=&quot;_blank&quot;&gt;기억 저장소: DooD (docker-outside-of-docker) 를 통해 Jenkins 컨테이너에서 docker 사용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://postlude.github.io/2020/12/26/docker-in-docker/&quot; target=&quot;_blank&quot;&gt;postlude: Jenkins를 docker 컨테이너로 구축하기(Docker in Docker)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aidanbae.github.io/code/docker/dinddood/&quot; target=&quot;_blank&quot;&gt;아이단은 어디 갔을까: DinD(docker in docker)와 DooD(docker out of docker)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/54268180/why-does-simple-dockerfile-give-permission-denied&quot; target=&quot;_blank&quot;&gt;도커 컨테이너에서 permission denied 해결하는 방법: docker run -u root …&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/debian/&quot; target=&quot;_blank&quot;&gt;도커 공식문서: 데비안 위에 도커 설치하는 방법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quora.com/Is-java-mandatory-for-jenkins-installation&quot; target=&quot;_blank&quot;&gt;Do we need java for jenkins?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 02 Mar 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/jenkins_series2</link>
                <guid isPermaLink="true">http://localhost:4000/jenkins_series2</guid>
                
                <category>Jenkins</category>
                
                <category>Docker</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>Terraform Series [Part1]: What is Terraform?</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@nanjangpan/Terraform-생존기1-테라폼이란&quot;&gt;nanjangpan.log: Terraform 생존기(1) - 테라폼이란?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 01 Mar 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/terraform_series1</link>
                <guid isPermaLink="true">http://localhost:4000/terraform_series1</guid>
                
                <category>Terraform</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>Jenkins Series [Part1]: What is Jenkins?</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#cicd&quot; id=&quot;markdown-toc-cicd&quot;&gt;CI/CD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jenkins&quot; id=&quot;markdown-toc-jenkins&quot;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;cicd&quot;&gt;CI/CD&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CI&lt;/strong&gt;: 지속적 통합 (Continuous Integration)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보통 하나의 서비스를 출시하기 위해 다수의 개발자들이 하나의 저장소에서 코드를 작성하는데 이 때 서로의 작업을 병합하고 에러를 수정하고 테스트하는 일련의 과정을 반복하게 됩니다. 이러한 과정은 보통 비슷한 작업이 반복되는 형태로 진행되기 때문에, 개발자들은 이 과정에서 발생하는 시간 낭비를 줄이고 싶어했습니다.&lt;/p&gt;

&lt;p&gt;Jenkins는 이러한 요구에 맞춰 개발된 CI 서비스를 제공하는 툴입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대표적인 CI 툴은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CD&lt;/strong&gt;: 지속적 배포 (Continuous Deploy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CD는 CI 과정을 통해 코드에 문제가 없는 것을 확인하고 서버에 배포하는 과정을 의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대표적인 CD 툴은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jenkins&quot;&gt;Jenkins&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jenkins는 파이프라인(Pipeline)을 사용해 거의 모든 언어의 조합과 소스코드 리포지토리에 대한 CI/CD 환경을 구축하기 위한 간단한 방법을 제공합니다.&lt;/p&gt;

&lt;p&gt;Jenkins가 각각의 단계에 대한 스크립트 작성의 필요성을 없애주지는 않지만, 일반 사용자가 구축할 수 있는 것보다 더 빠르고 더 강력하게 빌드(Build), 테스트, 그리고 배포(deployment) 도구 등 체인 전체를 통합할 수 있는 방법을 제공해 줍니다.&lt;/p&gt;

&lt;p&gt;Jenkins는 자바 언어로 개발된 툴로써 Jenkins를 실행하기 위해서는 별도의 서버가 존재해야 하며 서버에는 Java가 설치되어 있어야 합니다.&lt;/p&gt;

&lt;p&gt;Jenkins의 CI 관련 프로세스는 Jenkins의 파이프라인으로 정의됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jenkins_14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 파이프라인은 다음의 3 가지 방법으로 정의할 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Jenkinsfile
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; pipeline {
 agent {}
 environment {}
 stages {
     stage(&quot;Build&quot;) {
         environment {}
         steps {}
     }
     stage(&quot;Test&quot;) {
         environment {}
         steps {}
     }
 }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jenkins UI&lt;br /&gt;
&lt;img src=&quot;/images/jenkin_16.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Blue Ocean &lt;br /&gt;
&lt;img src=&quot;/images/jenkins_15.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/getting-started/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;(Jenkins 공식문서 참고: Getting started with Pipeline)&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.itworld.co.kr/news/107527&quot; target=&quot;_blank&quot;&gt;IT World: Jenkins란 무엇인가, CI(Continuous Integration) 서버의 이해&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cwal.tistory.com/22&quot; target=&quot;_blank&quot;&gt;DevOps Story, CD를 위한 Jenkins, Argo CD 연계&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mesh.dev/20210208-dev-notes-002-ci-cd/&quot; target=&quot;_blank&quot;&gt;메쉬코리아 플랫폼실 최제필, CI/CD 도구 및 방법론 도입기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.javatpoint.com/gradle-vs-jenkins&quot; target=&quot;_blank&quot;&gt;javatpoint: Gradle vs. Jenkins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/devops-tools/jenkins-vs-gitlab/gitlab-differentiators/&quot; target=&quot;_blank&quot;&gt;GitLab vs Jenkins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.katalon.com/resources-center/blog/ci-cd-tools/&quot; target=&quot;_blank&quot;&gt;Katalon: Best 14 CI/CD Tools You Must Know | Updated for 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 01 Mar 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/jenkins_series1</link>
                <guid isPermaLink="true">http://localhost:4000/jenkins_series1</guid>
                
                <category>Jenkins</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>Apache Spark Series [Part5]: 스파크 SQL</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#rdd-dataframe-dataset&quot; id=&quot;markdown-toc-rdd-dataframe-dataset&quot;&gt;RDD, Dataframe, Dataset&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#rdd&quot; id=&quot;markdown-toc-rdd&quot;&gt;RDD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dataframe&quot; id=&quot;markdown-toc-dataframe&quot;&gt;Dataframe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dataset&quot; id=&quot;markdown-toc-dataset&quot;&gt;Dataset&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dataframe-1&quot; id=&quot;markdown-toc-dataframe-1&quot;&gt;Dataframe&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dataframe-생성&quot; id=&quot;markdown-toc-dataframe-생성&quot;&gt;Dataframe 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#기본-연산&quot; id=&quot;markdown-toc-기본-연산&quot;&gt;기본 연산&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#액션-연산&quot; id=&quot;markdown-toc-액션-연산&quot;&gt;액션 연산&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#비타입-트랜스포메이션-연산&quot; id=&quot;markdown-toc-비타입-트랜스포메이션-연산&quot;&gt;비타입 트랜스포메이션 연산&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#함수가-아닌-sql문&quot; id=&quot;markdown-toc-함수가-아닌-sql문&quot;&gt;함수가 아닌 SQL문&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;rdd-dataframe-dataset&quot;&gt;RDD, Dataframe, Dataset&lt;/h1&gt;

&lt;h2 id=&quot;rdd&quot;&gt;RDD&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/../../images/spark_15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spark Core에 RDD가 있다면 Spark SQL에는 Dataframe과 Dataset이 있습니다. 기존의 RDD를 이용해 스파크 애플리케이션 코드를 작성할 때에는 RDD가 가지고 있는 메서드나 특성을 알아야지만 코드를 작성할 수 있었습니다. 그래서 RDD에 대한 이해도가 높아야 분산 환경에서 높은 처리 성능을 이끌어 낼 수 있었습니다.&lt;/p&gt;

&lt;h2 id=&quot;dataframe&quot;&gt;Dataframe&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/../../images/spark_16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러던 중 Spark 1.3버전에서 Dataframe이라는 새로운 데이터 모델이 공개되었습니다. Dataframe은 개발자들에게 친숙한 SQL과 비슷한 방식으로 작성할 수 있도록하는 API를 제공해 진입 장벽을 낮췄으며 코드의 가독성 또한 높여주었습니다. Dataframe도 마찬가지로 low-level에서는 RDD로 코드가 동작하는데 Spark SQL은 내부적으로 Catalyst Optimizer를 통해 최적의 RDD 코드로 변환됩니다. 따라서 쉬운 코드 작성과 높은 성능을 모두 얻게되었습니다.&lt;/p&gt;

&lt;p&gt;그러나 Dataframe에도 아쉬운 점이 있었는데, 바로 RDD에서 가능했던 컴파일 타임 오류 체크 기능을 사용할 수 없다는 점이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;dataset&quot;&gt;Dataset&lt;/h2&gt;
&lt;p&gt;Spark 1.6버전에서 RDD의 장점과 Dataframe의 장점을 합친 새로운 데이터 모델인 Dataset이 등장했습니다.&lt;/p&gt;

&lt;p&gt;그리고 Spark 2.0 이후부터는 Dataframe이 Dataset 안에 포함되었습니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 데이터셋은 데이터를 처리할 때 데이터의 타입을 있는 그대로 활용할 수 있습니다.&lt;/span&gt;
데이터셋: Dataset[String], Dataset[Int]

&lt;span class=&quot;c&quot;&gt;# 데이터프레임은 데이터를 처리할 때 데이터 타입을 무조건 org.apache.spark.sql.Row로 감싸줘야 합니다.&lt;/span&gt;
데이터프레임: Dataset[Row]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../images/../../images/spark_17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 Dataframe은 원래 데이터가 가지고 있던 타입의 특성은 사용하지 않기 때문에 Dataframe API은 비타입 트랜스포메이션 연산(untyped operations)으로 분류됩니다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;데이터 모델&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;사용 가능한 연산&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dataframe&lt;/td&gt;
      &lt;td&gt;기본 연산, 액션 연산, 비타입 트랜스포메이션 연산&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dataset&lt;/td&gt;
      &lt;td&gt;기본 연산, 액션 연산, 타입 트랜스포메이션 연산&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;저는 파이썬을 주언어로 사용하고 있으며 파이썬 언어는 Dataframe API만 제공하기 때문에 이번 포스트에서는 액션 연산과 비타입 트랜스포메이션 연산에 대해서만 다루도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;dataframe-1&quot;&gt;Dataframe&lt;/h1&gt;

&lt;h2 id=&quot;dataframe-생성&quot;&gt;Dataframe 생성&lt;/h2&gt;
&lt;p&gt;Dataframe은 SparkSession을 이용해 생성합니다. 생성 방법은 &lt;strong&gt;파일이나 데이터베이스와 같은 스파크 외부&lt;/strong&gt;에 저장된 데이터를 이용할 수도 있고, &lt;strong&gt;스파크 내에서의 RDD나 Dataframe&lt;/strong&gt;을 이용해 새로운 Dataframe을 생성할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;외부 데이터 소스&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;파일이나 데이터베이스같은 외부 저장소의 데이터를 읽어와서 Dataframe을 생성할 때는 SparkSession의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;메소드를 이용하면 됩니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;메소드는 DataFrameReader 인스턴스를 생성하고 이를 이용해 다양한 유형의 데이터를 읽고 Dataframe을 생성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local[*]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;allowComments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;spark_home_dir&amp;gt;/test.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전체적인 생성 과정은 크게 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Spark Session의 read() 메소드를 호출해 DataFrameReader 인스턴스 생성
2. format() 메소드로 데이터소스의 유형을 지정
3. option() 메소드로 데이터소스 처리에 필요한 옵션을 지정
4. load() 메소드로 대상 파일을 읽고 데이터프레임을 생성
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 DataFrameReader가 제공하는 주요 메소드입니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- format()
    읽어들이고자 하는 데이터 소스의 유형을 문자열로 지정(&quot;kafka&quot;, &quot;csv&quot;, &quot;json&quot;, &quot;parquet&quot;, &quot;text&quot; 등)
    이 밖에도 지원하지 않는 데이터소스는 라이브러리를 클래스패스에 추가해서 사용할 수 있습니다

- option/options()
    데이터소스에 사용할 설정 정보를 지정
    데이터소스에  따라 다름

- load()
    데이터소스로부터 실제 데이터를 읽어서 Dataframe을 생성

- json()
    JSON 형식을 따르는 문자열로 구성된 파일이나 RDD로부터 Dataframe 생성

- parquet()
    파케이 형식응로 작성된 파일을 읽어서 Dataframe 생성

- text()
    일반 텍스트 형식으로 작성된 파일을 읽어서 Dataframe 생성

- csv()
    CSV 파일을 읽어 Dataframe 생성 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RDD, Dataframe&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyspark.sql&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SparkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;local[*]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mike&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createDataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기본-연산&quot;&gt;기본 연산&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;persist()&lt;/li&gt;
  &lt;li&gt;printSchema()&lt;/li&gt;
  &lt;li&gt;columns&lt;/li&gt;
  &lt;li&gt;dtypes&lt;/li&gt;
  &lt;li&gt;createOrReplaceTempView()&lt;/li&gt;
  &lt;li&gt;explain()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;액션-연산&quot;&gt;액션 연산&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;show()&lt;/li&gt;
  &lt;li&gt;head()&lt;/li&gt;
  &lt;li&gt;take()&lt;/li&gt;
  &lt;li&gt;count()&lt;/li&gt;
  &lt;li&gt;describe()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비타입-트랜스포메이션-연산&quot;&gt;비타입 트랜스포메이션 연산&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dataframe에서 제공하는 비타입 트랜스포메이션 연산&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;select()&lt;/li&gt;
  &lt;li&gt;filter()&lt;/li&gt;
  &lt;li&gt;agg()&lt;/li&gt;
  &lt;li&gt;orderBy()&lt;/li&gt;
  &lt;li&gt;groupBy()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;org.apache.spark.Column에서 제공하는 비타입 트랜스포메이션 연산&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;!==, ===&lt;/li&gt;
  &lt;li&gt;alias()&lt;/li&gt;
  &lt;li&gt;isin()&lt;/li&gt;
  &lt;li&gt;when()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;org.apache.spark.sql.functions에서 제공하는 비타입 트랜스포메이션 연산&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max(), mean(), sum()&lt;/li&gt;
  &lt;li&gt;count(), countDistince()&lt;/li&gt;
  &lt;li&gt;explode()&lt;/li&gt;
  &lt;li&gt;when()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;함수가-아닌-sql문&quot;&gt;함수가 아닌 SQL문&lt;/h2&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158391034&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;빅데이터 분석을 위한 스파크2 프로그래밍 책&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://loustler.io/data_eng/spark-rdd-dataframe-and-dataset/&quot; target=&quot;_blank&quot;&gt;loustler, [Apache Spark] Spark RDD, Dataframe and DataSet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql.html&quot; target=&quot;_blank&quot;&gt;Apache Spark 공식문서: Spark SQL on PySpark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 22 Feb 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spark-series5</link>
                <guid isPermaLink="true">http://localhost:4000/spark-series5</guid>
                
                <category>Spark</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Apache Spark Series [Part4]: 스파크 RDD(Resilient Distributed Dataset)</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;아직 작성 전입니다.&lt;/p&gt;
</description>
                <pubDate>Tue, 22 Feb 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spark-series4</link>
                <guid isPermaLink="true">http://localhost:4000/spark-series4</guid>
                
                <category>Spark</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Apache Spark Series [Part3]: 스파크의 클러스터 환경</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#클러스터-환경&quot; id=&quot;markdown-toc-클러스터-환경&quot;&gt;클러스터 환경&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스파크의-분산처리-아키텍처&quot; id=&quot;markdown-toc-스파크의-분산처리-아키텍처&quot;&gt;스파크의 분산처리 아키텍처&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스파크-애플리케이션-동작-순서&quot; id=&quot;markdown-toc-스파크-애플리케이션-동작-순서&quot;&gt;스파크 애플리케이션 동작 순서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;클러스터-환경&quot;&gt;클러스터 환경&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;스파크는 본질적으로 분산처리 프레임워크&lt;/strong&gt;입니다. 그래서 단순히 테스트를 위한 용도로는 단일 로컬 서버만으로도 가능하지만, 실제 배포 단계에서 스파크를 제대로 활용하기 위해서는 여러 대의 서버를 이용한 클러스터 환경을 구축할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;클러스터란 여러 대의 서버가 네트워크를 통해 연결되어 마치 하나의 서버인 것처럼 동작하는 방식을 의미합니다. 하지만 여러 서버들을 이 같은 방식으로 동작시키는 것은 쉬운 일이 아닙니다. 그래서 스파크에서는 전체 서버의 자원과 동작을 세밀하고 효율적으로 제어할 수 있는 별도 모듈이 필요한데, 이를 &lt;strong&gt;클러스터 매니저&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;p&gt;스파크에서는 자체 구현한 클러스터 매니저도 제공하고 외부 클러스터 매니저를 임포트해서 사용할 수도 있습니다. 이렇게 여러 종류의 클러스터 매니저를 지원하게 되면 선택의 폭이 넓어진다는 장점도 있긴 하지만 클러스터 매니저마다 동작 방식이나 용어가 다르면 혼동이 될 수 있습니다. 스파크에서는 이런 혼란을 없애고자 추상화된 클러스터 모델을 제공함으로써 사용하는 클러스터의 종류에 관계없이 일관된 방법으로 프로그램을 작성하고 클러스터를 관리할 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;내용에 들어가기 전에 한 가지 알아둘 것은 클러스터 환경이라고 해서 로컬 환경에서 사용하던 스파크 애플리케이션 &lt;strong&gt;코드를 새로 작성해야 할 필요는 없습니다.&lt;/strong&gt; 다만 클러스터 환경에서는 여러 서버를 마치 하나의 서버인 것처럼 다뤄야 하기 때문에 하나의 작업을 여러 서버에 분산해서 실행하고 그 결과를 취합할 수 있는 &lt;strong&gt;분산 작업 관리 기능이 추가&lt;/strong&gt;되어야 할 것입니다.&lt;/p&gt;

&lt;p&gt;따라서 이번 포스트의 목적은 &lt;strong&gt;분산처리를 위한 시스템 아키텍처를 이해&lt;/strong&gt;하고, 이를 구현하기 위해 &lt;strong&gt;필요한 설정과 매개변수를 이해&lt;/strong&gt;하는 것입니다.&lt;/p&gt;

&lt;h1 id=&quot;스파크의-분산처리-아키텍처&quot;&gt;스파크의 분산처리 아키텍처&lt;/h1&gt;

&lt;p&gt;아래 그림은 분산처리를 위한 스파크의 전형적인 아키텍처입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/../../images/spark_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보시다시피 클러스터 매니저는 가운데에서 분산처리를 위한 매니저 역할을 하고 있습니다. 각각의 컴포넌트에 대한 설명은 &lt;a href=&quot;https://jaykim0510.github.io/spark-series1&quot;&gt;&lt;strong&gt;앞의 포스트&lt;/strong&gt;&lt;/a&gt;에서 다룬 적이 있음으로 여기서는 간단하게만 요약하도록 하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;드라이버 프로그램&lt;/strong&gt;: 스파크 컨텍스트를 생성하고 클러스터 매니저와 연결시켜주는 프로그램&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스파크 컨텍스트&lt;/strong&gt;: 클러스터와 연결되는 객체로 스파크 애플리케이션 코드를 작성하는데 필요한 거의 모든 기능을 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;클러스터 매니저&lt;/strong&gt;: 워커 노드를 모니터링하며 최적의 자원(CPU, 메모리) 할당&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;워커 노드&lt;/strong&gt;: 분산된 데이터를 할당받고 요청된 작업을 처리하는 서버&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;익스큐터&lt;/strong&gt;: 작업을 수행하기 위해 스파크에서 실행하는 프로세스, 자원할당 단위&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;잡(Job)&lt;/strong&gt;: 액션 연산의 수&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;태스크&lt;/strong&gt;: 잡을 적당한 단위로 나누어 실제로 익스큐터에 할당하는 작업 단위&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스파크 클러스터는 이와 같이 드라이버, 클러스터 매니저, 워커 노드의 조합으로 구성됩니다. 여기서 실행 모드, 클러스터 매니저의 종류에 따라 약간의 다른 점이 있지만 큰 맥락에서는 같습니다.&lt;/p&gt;

&lt;p&gt;실행 모드의 경우 두 가지가 있습니다. 클러스터 모드, 클라이언트 모드입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/../../images/spark_13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두 모드 가운데 어떤 것을 선택하든 수행 결과는 동일합니다. 하지만 &lt;strong&gt;클러스터 모드의 경우&lt;/strong&gt; 드라이버 프로그램과 익스큐터 간의 네트워크 비용이 상대적으로 낮아져서 &lt;strong&gt;성능 향상&lt;/strong&gt;을 기대할 수 있습니다. 하지만 스파크 셸과 같은 인터랙티브 환경을 이용한 &lt;strong&gt;디버깅이 어려워&lt;/strong&gt;서 정형화된 작업에만 주로 사용하고, &lt;strong&gt;클라이언트 모드의 경우&lt;/strong&gt; 사용성이 &lt;strong&gt;편리&lt;/strong&gt;하지만 드라이버 프로그램과 워커 노드가 네트워크 상에서 너무 많이 떨어져 있으면 전체적인 성능에 영향을 줄 수 있으므로 &lt;strong&gt;가급적 동일 네트워크 상에 존재하는 서버로 선택&lt;/strong&gt;하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;클러스터 매니저에 대해서는 다음 포스트에서 조금 더 자세히 다루도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;스파크-애플리케이션-동작-순서&quot;&gt;스파크 애플리케이션 동작 순서&lt;/h1&gt;
&lt;p&gt;지금까지 스파크의 클러스터 환경에서 갖게되는 아키텍처와 컴포넌트에 대해 살펴봤습니다. 지금부터는 아키텍처에서 실제로 스파크 애플리케이션이 구동되는 과정을 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;가장 먼저 스파크 애플리케이션 코드를 작성합니다. 이 때 코드에는 스파크컨텍스트를 생성하는 드라이버 프로그램이 포함돼 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;작성한 코드를 빌드하고 관련 라이브러리와 함께 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; 파일 등으로 패키징합니다.&lt;/li&gt;
  &lt;li&gt;패키지 파일을 스파크에서 제공하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark-submit&lt;/code&gt; 셸 스크립트를 이용해 클러스터에 배포하고 실행합니다.&lt;/li&gt;
  &lt;li&gt;코드에 있는 드라이버 프로그램이 실행되고 스파크컨텍스트가 클러스터 매니저와 연동되어 워커 노드에 익스큐터를 생성합니다.&lt;/li&gt;
  &lt;li&gt;드라이버 프로그램은 작성된 코드에서 액션 연산의 수만큼 잡(Job)을 생성합니다.&lt;/li&gt;
  &lt;li&gt;잡(Job)을 셔플링이 가장 적게 일어나는 방법으로 스테이지를 나누고 각 스테이지 단계를 여러 개의 태스크로 나눕니다.&lt;/li&gt;
  &lt;li&gt;태스크를 익스큐터에 적절히 분배하여 분산 처리합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../images/../../images/spark_14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9791158391034&amp;amp;orderClick=LEa&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;빅데이터 분석을 위한 스파크2 프로그래밍 책&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sparkbyexamples.com/spark/spark-sparkcontext/&quot; target=&quot;_blank&quot;&gt;What is SparkContext? Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 21 Feb 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spark-series3</link>
                <guid isPermaLink="true">http://localhost:4000/spark-series3</guid>
                
                <category>Spark</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>BlockChain Series [Part2]: 블록체인의 동작 원리</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Mon, 21 Feb 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/blockchain-series1</link>
                <guid isPermaLink="true">http://localhost:4000/blockchain-series1</guid>
                
                <category>Blockchain_basic</category>
                
                
                <category>Blockchain</category>
                
            </item>
        
    </channel>
</rss>