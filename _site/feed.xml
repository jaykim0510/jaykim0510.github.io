<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Code Museum</title>
        <description>Jay Tech personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 23 Jun 2022 21:52:57 +0900</pubDate>
        <lastBuildDate>Thu, 23 Jun 2022 21:52:57 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>OS Series [Part4]: 메모리</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#메모리-관리-개요&quot; id=&quot;markdown-toc-메모리-관리-개요&quot;&gt;메모리 관리 개요&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#메모리-주소&quot; id=&quot;markdown-toc-메모리-주소&quot;&gt;메모리 주소&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#메모리-오버레이&quot; id=&quot;markdown-toc-메모리-오버레이&quot;&gt;메모리 오버레이&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스왑&quot; id=&quot;markdown-toc-스왑&quot;&gt;스왑&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#메모리-분할&quot; id=&quot;markdown-toc-메모리-분할&quot;&gt;메모리 분할&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#가상-메모리-기술에-기반한-메모리-관리&quot; id=&quot;markdown-toc-가상-메모리-기술에-기반한-메모리-관리&quot;&gt;가상 메모리 기술에 기반한 메모리 관리&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#가상-주소&quot; id=&quot;markdown-toc-가상-주소&quot;&gt;가상 주소&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#페이징-기법&quot; id=&quot;markdown-toc-페이징-기법&quot;&gt;페이징 기법&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#세그먼테이션-기법&quot; id=&quot;markdown-toc-세그먼테이션-기법&quot;&gt;세그먼테이션 기법&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#세그먼테이션-페이징-혼용-기법&quot; id=&quot;markdown-toc-세그먼테이션-페이징-혼용-기법&quot;&gt;세그먼테이션-페이징 혼용 기법&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#페이지-교체-알고리즘&quot; id=&quot;markdown-toc-페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#fifo&quot; id=&quot;markdown-toc-fifo&quot;&gt;FIFO&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#lru&quot; id=&quot;markdown-toc-lru&quot;&gt;LRU&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#lfu&quot; id=&quot;markdown-toc-lfu&quot;&gt;LFU&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#nur&quot; id=&quot;markdown-toc-nur&quot;&gt;NUR&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;p&gt;메모리: CPU의 작업 공간, 프로세스가 실행될 때 올라가는 공간&lt;/p&gt;

&lt;h1 id=&quot;메모리-관리-개요&quot;&gt;메모리 관리 개요&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;메모리 관리의 복잡성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메모리는 1Byte 크기로 나뉘어 각 영역을 메모리 주소로 구분한다. 메모리 주소는 보통 0번지부터 시작한다.&lt;/p&gt;

&lt;p&gt;CPU는 메모리에 있는 내용을 가져오거나 작업 결과를 메모리에 저장하기 위해 메모리 주소 레지스터(MAR)를 사용한다.&lt;br /&gt;
(MAR에 필요한 메모리 주소를 넣으면 데이터를 메모리에서 가져오거나 메모리에 데이터를 옮길 수 있다)&lt;/p&gt;

&lt;p&gt;시분할 시스템에서는 모든 응용 프로그램이 메모리에 올라와 실행되기 때문에 메모리 관리가 복잡하다.&lt;/p&gt;

&lt;p&gt;여러 작업을 동시에 처리(시분할 시스템)할 때 메모리 관리는 메모리 관리 시스템(MMS)이 담당한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메모리 관리의 이중성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메모리 관리의 이중성이란 프로세스 입장에서는 메모리를 독차지하려고 하고, 메모리 관리자 입장에서는 되도록 관리를 효율적으로 하고 싶어하는 것을 말한다.&lt;/p&gt;

&lt;p&gt;프로세스가 작업하는 도중에 할당된 공간이 부족하면 메모리 관리자는 새로운 공간을 확보하기 위해 옆의 프로세스를 밀어내거나 더 큰 공간으로 해당 프로세스를 옮겨준다. 작업을 마치고 난 후 빈 공간이 생기면 다음 작업을 위해 빈 공간을 어떻게 처리할지도 결정한다. 빈 공간이 여러 개 생기면 합쳐서 하나의 큰 공간을 만드는데, 이렇게 하기 위해 현재 작업 중인 공간을 옆으로 밀고 작은 공간을 합쳐나간다. 이처럼 매번 작업 공간을 키웠다 줄였다 하는 것은 매우 복잡한 일이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메모리 관리자의 역할&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메모리 관리는 메모리 관리자가 담당한다.&lt;/p&gt;

&lt;p&gt;메모리 관리자는 정확히 말해 &lt;strong&gt;메모리 관리 유닛(MMU)&lt;/strong&gt;이라는 하드웨어이다.&lt;/p&gt;

&lt;p&gt;메모리 관리자의 작업은 &lt;strong&gt;가져오기&lt;/strong&gt;, &lt;strong&gt;배치&lt;/strong&gt;, &lt;strong&gt;재배치&lt;/strong&gt;이다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;가져오기(fetch)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;사용자가 요청시 메모리 관리자가 작업을 수행&lt;/li&gt;
      &lt;li&gt;프로세스와 데이터를 메모리로 가져오는 작업&lt;/li&gt;
      &lt;li&gt;어떤 경우는 데이터를 일부만 가져오기도 하고, 미리 가져오기(prefetch)도 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;배치(placement)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;가져온 프로세스와 데이터를 메모리의 어떤 부분에 올려놓을지 결정하는 작업&lt;/li&gt;
      &lt;li&gt;배치 작업 전에 메모리를 어떤 크기로 자를 것인지가 매우 중요&lt;/li&gt;
      &lt;li&gt;페이징: 메모리를 같은 크기로 자르는 것&lt;/li&gt;
      &lt;li&gt;세그먼테이션: 프로세스의 크기에 맞게 자르는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;재배치(replacement)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;새로운 프로세스를 가져올 때, 메모리가 꽉 찬 경우 메모리에 있는 오래된 프로세스를 스왑 아웃&lt;/li&gt;
      &lt;li&gt;페이지 교체 알고리즘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메모리-주소&quot;&gt;메모리 주소&lt;/h2&gt;

&lt;p&gt;메모리에 접근할 때는 주소를 이용한다.&lt;/p&gt;

&lt;p&gt;메모리 주소는 절대 주소와 상대 주소로 나뉜다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메모리 영역의 구분&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메모리는 크게 운영체제가 올라가는 영역과 사용자의 응용 프로그램이 올라가는 영역으로 나뉜다. 운영체제는 중요한 역할을 하기 때문에 사용자가 운영체제를 침범하지 못하도록 분리하는 것이 중요하다. 운영체제가 0~359번지를 사용하면 사용자는 360번지 부터 사용해야 한다. 사용자 영역이 운영체제 영역으로 침범하는 것을 막으려면 하드웨어의 도움이 필요한데, 이는 CPU 내에 있는 경계 레지스터가 담당한다. 경계 레지스터는 운영체제 영역과 사용자 영역 경계 지점의 주소를 가진 레지스터이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;절대 주소와 상대 주소&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;절대 주소&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;실제 물리 주소&lt;/li&gt;
      &lt;li&gt;메모리 관리자 입장에서 바라본 주소&lt;/li&gt;
      &lt;li&gt;MAR이 사용하는 주소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;상대 주소(논리주소)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;메모리 중 사용자 영역의 시작 위치를 0번지로 고정하고 사용하는 지정 방식&lt;/li&gt;
      &lt;li&gt;컴파일 방식을 사용하는 프로그램의 경우 컴파일 시점에 변수가 메모리 어느 위치에 올라갈지 미리 알 수 없다&lt;/li&gt;
      &lt;li&gt;그래서 우선 0번지로 고정하고 실제 물리 주소에 맞게 매핑한다&lt;/li&gt;
      &lt;li&gt;사용자 프로세스 입장에서 바라본 주소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;32bit CPU와 64bit CPU의 차이&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CPU의 비트는 &lt;strong&gt;한 번에 다룰 수 있는 데이터의 최대 크기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CPU 내부 부품은 모두 이 비트를 기준으로 제작된다.&lt;/p&gt;

&lt;p&gt;32bit CPU 내의 레지스터 크기는 전부 32bit&lt;/p&gt;

&lt;p&gt;산술 논리 연산장치도 32bit를 처리할 수 있도록 설계된다.&lt;/p&gt;

&lt;p&gt;데이터를 전송하는 각종 버스의 크기(대역폭)도 32bit -&amp;gt; 한 번에 옮겨지는 데이터의 크기는 32bit&lt;/p&gt;

&lt;p&gt;CPU의 비트는 메모리 주소 공간의 크기와도 연관이 있다. 32bit CPU의 경우 메모리 주소를 지정하는 레지스터(MAR)의 크기가 32bit이므로 표현할 수 있는 메모리 주소의 범위가 0 ~ 2의 32승 - 1이다. 메모리 공간 하나의 크기가 1Byte이므로 총 크기는 4GB이다. 즉 32bit CPU 컴퓨터는 최대 4GB의 메모리를 가질 수 있다. (64bit CPU는 16,777,216TB)&lt;/p&gt;

&lt;h2 id=&quot;메모리-오버레이&quot;&gt;메모리 오버레이&lt;/h2&gt;

&lt;p&gt;과거에는 메모리가 값비싼 저장장치라 큰 메모리를 사용할 수 없었다. 이 때문에 큰 프로그램을 어떻게 실행시킬지에 대한 고민이 있었다. 예를 들어 1MB 메모리의 컴퓨터에 10MB 크기의 프로그램을 실행하려면 어떻게 해야 할까?&lt;/p&gt;

&lt;p&gt;방법은 간단하다. 프로그램의 크기가 물리 메모리에 남은 용량보다 더 클 때 전체 프로그램을 메모리에 가져오는 대신 적당한 크기로 잘라서 가져오는 기법을 &lt;strong&gt;메모리 오버레이(momory overlay)&lt;/strong&gt;라고 한다. 예를 들어 한글 문서 편집기에는 기본 문서 편집 기능 외에 맞춤법 검사, 그림판 등의 기능이 있다. 이러한 기능은 각각 모듈 형태로 분리되어 있다가 프로그램이 실행되면 필요한 모듈만 메모리에 올라와 실행된다. 이렇게 하면 프로그램 전체를 메모리에 올려놓고 실행하는 것보다 속도가 느리지만 용량이 큰 프로그램도 실행 할 수 있다.&lt;/p&gt;

&lt;p&gt;메모리 오버레이에서 어떤 모듈을 가져오고 내보낼지는 CPU 레지스터 중 하나인 프로그램 카운터(PC)가 결정한다. 프로그램 카운터는 앞으로 실행할 명령어의 위치를 가리키는 레지스터로, 해당 모듈이 메모리에 없으면 메모리 관리자에게 요청해 메모리로 가져오게 한다.&lt;/p&gt;

&lt;h2 id=&quot;스왑&quot;&gt;스왑&lt;/h2&gt;

&lt;p&gt;메모리 오버레이가 언제나 가능한 건 아니다. 남은 모듈을 임시 보관할 수 있는 저장공간이 있어야 한다. 예를 들어 1MB 메모리에 10MB 프로그램을 실행하려면 최소한 9MB 만큼 크기의 &lt;strong&gt;임시 저장공간이 필요한데 이러한 공간을 스왑(swap) 영역&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;이처럼 물리 메모리의 저장 공간이 부족해서 남은 프로세스를 저장하는 공간을 스왑 영역이라고 하며 스왑 영역에서 메모리로 데이터를 가져오는 작업을 스왑인, 스왑 영역으로 데이터를 내보내는 작업을 스왑아웃 이라고 한다.&lt;/p&gt;

&lt;p&gt;스왑 영역은 메모리 관리자가 관리한다. 원래 하드디스크 같은 저장장치는 저장장치 관리자가 관리하지만, 스왑 영역은 메모리에 있다가 스왑아웃된 데이터가 머무는 곳이기 때문에 &lt;strong&gt;메모리 관리자가 관리&lt;/strong&gt;한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;하드디스크의 일부&lt;/strong&gt;를 스왑 영역으로 사용함으로써 사용자는 &lt;strong&gt;실제 메모리의 크기와 스왑 영역의 크기를 합쳐서 전체 메모리&lt;/strong&gt;로 인식하고 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메모리-분할&quot;&gt;메모리 분할&lt;/h2&gt;

&lt;p&gt;한 번에 여러 프로세스를 실행하는 경우 메모리 관리가 더욱 복잡해진다. 가장 큰 문제는 &lt;strong&gt;프로세스들의 크기가 달라&lt;/strong&gt; 메모리를 어떻게 나누어 사용하는가이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;가변 분할 방식&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로세스의 크기에 따라 메모리를 나누는 것&lt;/li&gt;
      &lt;li&gt;하나의 프로세스끼리 연속된 공간에 배치해야 한다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;(하나의 프로세스가 메모리의 가용 크기 넘어서면? 오버레이 일어나나? 그럼에도 연속된 공간 배치 지켜지나?)&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;연속 메모리 할당이라고도 한다&lt;/li&gt;
      &lt;li&gt;메모리 관리가 복잡하다&lt;/li&gt;
      &lt;li&gt;(군데군데 남은 공간보다 큰 프로세스가 들어오면 빈공간을 하나로 합치기 위해 기존 프로세스의 자리 이동이 발생)&lt;/li&gt;
      &lt;li&gt;(빈공간이 발생하는 것을 외부 단편화라고 하고,  합치는 것을 조각 모음(defragmentation)이라고 한다)&lt;/li&gt;
      &lt;li&gt;(가변 분할 배치는 선처리, 조각 모음은 후처리인 것이다)&lt;/li&gt;
      &lt;li&gt;(이런 조각 모음은 하드디스크에 발생, 저장-삭제 많이 일어나면 군데군데 빈 공간 발생 -&amp;gt; 성능 저하 -&amp;gt; 조각 모음 필요)&lt;/li&gt;
      &lt;li&gt;장점: 프로세스를 한 덩어리로 관리 가능&lt;/li&gt;
      &lt;li&gt;단점: 빈 공간의 관리가 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;고정 분할 방식&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로세스의 크기와 상관없이 메모리를 같은 크기로 나누는 것&lt;/li&gt;
      &lt;li&gt;같은 프로세스들이 분산되어 배치된다&lt;/li&gt;
      &lt;li&gt;비연속 메모리 할당이라고도 한다&lt;/li&gt;
      &lt;li&gt;관리가 수월하다&lt;/li&gt;
      &lt;li&gt;고정 크기보다 작은 프로세스가 들어오면 군데군데 빈 공간 발생(고정 크기 내 다른 프로세스와 공간 공유x) -&amp;gt; 메모리 낭비&lt;/li&gt;
      &lt;li&gt;(고정 분할에서 빈 공간이 생기는 것을 내부 단편화라고 함)&lt;/li&gt;
      &lt;li&gt;내부 단편화는 조각 모음도 안되고, 남은 공간을 다른 프로세스에 배정해 주지도 못한다&lt;/li&gt;
      &lt;li&gt;장점: 메모리 관리가 편리&lt;/li&gt;
      &lt;li&gt;단점: 프로세스가 분할되어 처리됨, 메모리 낭비 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;현대 운영체제에서 메모리 관리는 &lt;strong&gt;기본적으로 고정 분할 방식&lt;/strong&gt;을 사용하면서 일부분 가변 분할 방식을 혼합한다.&lt;/p&gt;

&lt;h1 id=&quot;가상-메모리-기술에-기반한-메모리-관리&quot;&gt;가상 메모리 기술에 기반한 메모리 관리&lt;/h1&gt;

&lt;p&gt;가상 메모리 기술: 물리 메모리의 크기와 상관없이 프로세스를 실행할 수 있도록 지원하는 기술&lt;br /&gt;
(원래는 프로그램 크기에 대한 고민이 필요했지만 이제는 그런 걱정 없이 프로그램 개발이 가능해졌다)&lt;/p&gt;

&lt;p&gt;현대 메모리 관리의 가장 큰 특징은 물리 메모리의 크기와 프로세스가 올라갈 메모리의 위치를 신경쓰지 않고 프로그래밍하도록 지원한다는 것이다. 이러한 메모리 시스템을 가상 메모리라고 부른다.&lt;/p&gt;

&lt;p&gt;가상 메모리는 &lt;strong&gt;물리 메모리의 크기와 스왑 영역을 합한 크기&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;가상 메모리 시스템에서는 물리 메모리의 내용 중 일부를 하드디스크의 일부 공간, 즉 스왑 영역으로 옮긴다. 스왑 영역은 하드디스크에 존재하지만 메모리 관리자가 관리하는 영역이다. 즉 물리 메모리가 꽉 찼을 떄, 일부 프로세스를 스왑 영역으로 보내고, 몇 개의 프로세스가 작업을 마치면 스왑 영역에 있는 프로세스를 메모리에 가져온다.&lt;/p&gt;

&lt;p&gt;가상 메모리 시스템에서 &lt;strong&gt;가변 분할 방식을 세그멘테이션(segmentation)&lt;/strong&gt;, &lt;strong&gt;고정 분할 방식을 페이징(paging)&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;메모리를 관리할 때는 매핑 테이블을 작성하여 관리한다. 가상 메모리 시스템에서 가상 주소는 실제로 물리 주소나 스왑 영역 중 한 곳에 위치하며, 메모리 관리자는 가상 주소와 물리 주소를 일대일 매핑 테이블로 관리한다. 메모리 매핑 테이블을 이용하면 가상 주소가 물리 메모리의 어느 위치에 있는지 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_14png.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;페이징도 위의 세그멘테이션과 똑같은 방식으로 적용된다. 페이징 기법에서 사용하는 매핑 테이블은 페이지 매핑 테이블, 세그먼테이션 기법에서 사용하는 매핑 테이블은 세그먼테이션 매핑 테이블이라고 부른다.&lt;/p&gt;

&lt;h2 id=&quot;가상-주소&quot;&gt;가상 주소&lt;/h2&gt;

&lt;p&gt;위에서 용량이 큰 프로그램도 메모리에 걱정없이 올릴 수 있도록 하기 위해 메모리 오버레이를 한다고 했습니다. 모듈화된 프로그램 중 필요한 부분만 물리 메모리에 올리고, 나머지는 하드디스크의 스왑 영역에 보관해 둡니다.&lt;/p&gt;

&lt;p&gt;이런 상황에서 사용자가 어떤 부분이 메모리에 올라와 있는지, 스왑 영역에 있는지 고민해야 한다면 사용하기 굉장히 불편할 것이다. 이런 문제를 해결해주는 것이 가상 주소입니다.&lt;/p&gt;

&lt;p&gt;프로세스는 가상 주소를 할당 받는다. 사용자 눈에는 마치 가상 메모리라는 메모리가 있고 그 위에 프로세스가 올라온 것 같은 경험을 한다. 그러나 실제로 가상 메모리라는 것은 없고, 논리적인 개념일 뿐이다. 사용자가 어떤 프로세스에 접근을 하면 메모리 관리자는 매핑 테이블을 통해 물리 주소로 매핑해준다. 물리 주소를 보면 실제로 요청된 프로세스가 물리 메모리에 있을 수도 있고, 스왑 영역에 있을 수도 있다. 스왑 영역에 있다면 페이지 교체 알고리즘을 통해 스왑 영역에 있는 프로세스를 스왑인하여 물리 메모리에 올리고 그 주소를 매핑 테이블에 업데이트 한 후, 사용자에게 돌려준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;페이징-기법&quot;&gt;페이징 기법&lt;/h2&gt;

&lt;p&gt;사용자 입장에서 프로세스는 가상 메모리(가상 주소 공간)에 올라간다. 위에서 프로세스가 메모리에 올라갈 때 고정 분할 방식과 가변 분할 방식이 있다고 했다. 가상 메모리는 같은 개념을 페이징, 세그멘테이션이라고 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;가상 메모리에 프로세스를 올릴 때 메모리를 할당하는 방식

페이징: 프로세스 크기에 상관없이 일정한 크기로 메모리를 할당
세그멘테이션: 프로세스 크기에 비례해 메모리를 할당
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;페이지와 프레임의 크기는 같다&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가상 주소를 물리 주소로 변경하는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;페이지 테이블 관리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;페이지 테이블 매핑 방식&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;세그먼테이션-기법&quot;&gt;세그먼테이션 기법&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;가상 주소를 물리 주소로 변경하는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;세그먼테이션-페이징-혼용-기법&quot;&gt;세그먼테이션-페이징 혼용 기법&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;가상 주소를 물리 주소로 변경하는 방법&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/h2&gt;

&lt;h3 id=&quot;fifo&quot;&gt;FIFO&lt;/h3&gt;

&lt;h3 id=&quot;lru&quot;&gt;LRU&lt;/h3&gt;

&lt;h3 id=&quot;lfu&quot;&gt;LFU&lt;/h3&gt;

&lt;h3 id=&quot;nur&quot;&gt;NUR&lt;/h3&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156644071&quot; target=&quot;_blank&quot;&gt;쉽게 배우는 운영체제 책 참고&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/windows-hardware/drivers/gettingstarted/virtual-address-spaces&quot; target=&quot;_blank&quot;&gt;Microsoft: 가상 주소 공간&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 15 Jun 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/os-series4</link>
                <guid isPermaLink="true">http://localhost:4000/os-series4</guid>
                
                <category>OS</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>OS Series [Part3]: 프로세스 관리</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#프로세스&quot; id=&quot;markdown-toc-프로세스&quot;&gt;프로세스&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스의-네-가지-상태&quot; id=&quot;markdown-toc-프로세스의-네-가지-상태&quot;&gt;프로세스의 네 가지 상태&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스의-구조&quot; id=&quot;markdown-toc-프로세스의-구조&quot;&gt;프로세스의 구조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스의-생성과-복사&quot; id=&quot;markdown-toc-프로세스의-생성과-복사&quot;&gt;프로세스의 생성과 복사&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스의-전환&quot; id=&quot;markdown-toc-프로세스의-전환&quot;&gt;프로세스의 전환&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스의-계층-구조&quot; id=&quot;markdown-toc-프로세스의-계층-구조&quot;&gt;프로세스의 계층 구조&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스레드&quot; id=&quot;markdown-toc-스레드&quot;&gt;스레드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#스레드의-개념&quot; id=&quot;markdown-toc-스레드의-개념&quot;&gt;스레드의 개념&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#멀티스레드&quot; id=&quot;markdown-toc-멀티스레드&quot;&gt;멀티스레드&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#프로세스-간-통신&quot; id=&quot;markdown-toc-프로세스-간-통신&quot;&gt;프로세스 간 통신&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#동기화&quot; id=&quot;markdown-toc-동기화&quot;&gt;동기화&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스-간-통신의-종류&quot; id=&quot;markdown-toc-프로세스-간-통신의-종류&quot;&gt;프로세스 간 통신의 종류&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#전역-변수를-이용한-통신&quot; id=&quot;markdown-toc-전역-변수를-이용한-통신&quot;&gt;전역 변수를 이용한 통신&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#파일을-이용한-통신&quot; id=&quot;markdown-toc-파일을-이용한-통신&quot;&gt;파일을 이용한 통신&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#소켓을-이용한-통신&quot; id=&quot;markdown-toc-소켓을-이용한-통신&quot;&gt;소켓을 이용한 통신&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#임계구역&quot; id=&quot;markdown-toc-임계구역&quot;&gt;임계구역&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#임계구역-해결-조건&quot; id=&quot;markdown-toc-임계구역-해결-조건&quot;&gt;임계구역 해결 조건&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#임계구역-해결-방법&quot; id=&quot;markdown-toc-임계구역-해결-방법&quot;&gt;임계구역 해결 방법&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#교착-상태&quot; id=&quot;markdown-toc-교착-상태&quot;&gt;교착 상태&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#자원-할당-그래프&quot; id=&quot;markdown-toc-자원-할당-그래프&quot;&gt;자원 할당 그래프&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#교착-상태-필요조건&quot; id=&quot;markdown-toc-교착-상태-필요조건&quot;&gt;교착 상태 필요조건&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#교착-상태-해결방법&quot; id=&quot;markdown-toc-교착-상태-해결방법&quot;&gt;교착 상태 해결방법&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#교착-상태-검출과-회복&quot; id=&quot;markdown-toc-교착-상태-검출과-회복&quot;&gt;교착 상태 검출과 회복&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;프로세스&quot;&gt;프로세스&lt;/h1&gt;
&lt;p&gt;프로세스 관리는 운영체제의 핵심적인 역할&lt;/p&gt;

&lt;p&gt;프로세스가 생성되고 작업을 마칠 때까지의 상태 변화&lt;/p&gt;

&lt;p&gt;프로세스와 스레드 비교&lt;/p&gt;

&lt;p&gt;스레드 사용의 이점&lt;/p&gt;

&lt;p&gt;운영체제에서 프로세스는 하나의 작업 단위&lt;/p&gt;

&lt;p&gt;프로그램을 실행하면 프로세스가 된다&lt;/p&gt;

&lt;p&gt;프로그램은 하드디스크 같은 저장장치에 저장&lt;/p&gt;

&lt;p&gt;프로그램을 실행하면 해당 코드가 메모리에 올라와서 작업이 진행된다&lt;/p&gt;

&lt;p&gt;프로그램은 저장장치에 저장되어 있는 정적인 상태&lt;/p&gt;

&lt;p&gt;프로세스는 실행을 위해 메모리에 올라온 동적인 상태&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;프로그램 - 클래스 - 레시피

프로세스 - 객체  - 요리
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CPU가 시간을 쪼개어 여러 프로세스에 적당히 배분함으로써 도잇에 실행하는 것처럼 느껴진다&lt;/p&gt;

&lt;h2 id=&quot;프로세스의-네-가지-상태&quot;&gt;프로세스의 네 가지 상태&lt;/h2&gt;

&lt;p&gt;시분할 방식에서의 예상치 못한 상황 처리&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;새우튀김을 해야하는데 새우가 아직 손질되지 않았다고 가정해보자. 메인 셰프가 보조 요리사에게 새우 손질을 지시한다  
그동안 메인 셰프가 아무것도 하지 않으면 비효율적이다.  
메인 셰프는 새우튀김을 '대기 목록'으로 옮기고 주문 목록에 있는 다른 주문서를 가져와서 요리를 해야한다.  

새우 손질이 끝났다고 가정해보자. 그렇다고 바로 대기 목록에서 새우튀김을 가져와서 바로 요리하지는 않는다.  

우선 현재 작업 중이던 요리를 마친 뒤 새우튀김을 만드는 것이 좋다. 따라서 새우튀김 요리 주문서를 대기 목록에서 주문 목록 뒤에 이동시킨 뒤 순서를 기다린다.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;손님이 급한 볼일을 보느라 음식을 천천히 달라고 요청하는 경우도 있다. 손님의 지연 요청은 언제 끝날지 알 수 없기 때문에 무작정 대기 목록에 올려둘 수 없다. (손님이 지연 끝에 취소를 할 수도 있다)  

이와 같이 언제 다시 시작될지 모르는 주문서는 '보류 목록'으로 옮기고, 손님이 음식을 달라고 하면 보류 목록에 있는 주문서를 '주문 목록'으로 보낸다.  
보류 목록은 언제 다시 시작될지 모르거나, 중간에 그만둘지 모르는 작업들을 모아두는 곳이다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현대의 운영체제는 시분할 방식을 기본으로 사용한다. 프로세스가 여러 상태를 오가며 실행된다. 그렇다면 운영체제가 어떻게 여러 프로세스를 동시에 처리하는지 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로그램에서 프로세스로의 전환&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로세스는 컴퓨터 시스템의 작업 단위로 태스크라고도 불린다.&lt;/p&gt;

&lt;p&gt;시분할 방식 시스템에서 프로그램이 프로세스로 전환될 때 어떤 일이 일어나는지 살펴보자&lt;/p&gt;

&lt;p&gt;우선 운영체제는 프로그램을 메모리의 적당한 위치로 가져온다. 그와 동시에 주문서에 해당하는 작업 지시서(프로세스 제어블록)를 만든다. 프로세스 제어블록에는 프로세스를 처리하는 데 필요한 다양한 정보가 들어 있다. 프로그램이 프로세스로 전환되려면 운영체제로부터 프로세스 제어블록을 받아야 한다. (프로세스 제어블록은 운영체제가 해당 프로세스를 위해 관리하는 데이터 구조이기 때문에 운영체제 영역에 만들어진다) 프로세스가 종료되면 메모리에서 삭제되고, 프로세스 제어블록도 폐기된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;프로세스 제어블록에 포함된 대표적인 정보

- 프로세스 구분자: 프로세스를 구분하는 구분자(PID)

- 메모리 관련 정보: 프로세스가 올라가 있는 메모리의 위치 정보

- 각종 중간값: 프로세스가 사용했던 각종 중간값 (시분할 시스템이기 때문에 중간값을 저장해야 한다) 
            (ex. 다음 작업할 코드의 위치가 담긴 프로그램 카운터, 각종 중간값을 보관 중인 레지스터)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스의 상태&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앞서 레스토랑의 예에서 주문서가 다양한 목록을 옮겨 다니는 것과 같이, 운영체제에서도 여러 가지 이유로 프로세스 상태가 변화된다. 시분할 시스템에서 프로세스는 CPU 리소스를 넘겨주고 다시 받고 하는 일이 빈번하게 일어난다. 프로세스는 상황에 따라 다섯 가지 상태를 오간다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;생성 상태&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로세스가 메모리에 올라와 실행 준비를 완료한 상태&lt;/li&gt;
      &lt;li&gt;프로세스를 관리하는데 필요한 프로세스 제어블록이 생성됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;준비 상태&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;생성된 프로세스가 CPU를 얻을 때까지 기다리는 상태&lt;/li&gt;
      &lt;li&gt;디스패치: CPU 스케줄러가 준비 상태에 있는 여러 프로세스 중 다음에 실행할 프로세스를 선정하는 일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;실행 상태&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;준비 상태에 있던 프로세스가 CPU를 얻어 실제 작업을 수행하는 상태&lt;/li&gt;
      &lt;li&gt;프로세스 제어블록을 CPU에 전달&lt;/li&gt;
      &lt;li&gt;주어진 시간내 작업이 끝나지 않은 경우 다시 준비 상태로 돌아감(클록이 인터럽트를 사용해 CPU에 알림)&lt;/li&gt;
      &lt;li&gt;작업이 끝날때까지 준비 상태와 실행 상태를 왔다 갔다함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;완료 상태&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;실행 상태의 프로세스가 시간내 작업을 마치면 완료 상태로 진입&lt;/li&gt;
      &lt;li&gt;프로세스 제어블록이 사라진 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;대기 상태&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로세스가 입출력을 요청하면 입출력 관리자가 입출력을 완료하기 전까지 프로세스를 대기 상태로 옮겨둔다&lt;/li&gt;
      &lt;li&gt;입출력 관리자가 입출력을 완료하면 프로세스를 대기 상태에서 준비 상태로 옮긴다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;컨텍스트 스위칭&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;컨텍스트 스위칭(context switching)은 CPU를 차지하던 프로세스가 나가고 새로운 프로세스를 받아들이는 작업을 말한다. 이 때 두 프로세스 제어블록의 내용이 변경된다. 실행 상태에서 나가는 프로세스 제어블록에는 CPU에 있던 지금까지의 작업 내용을 저장하고, 반대로 실행 상태로 들어오는 프로세스 제어블록의 내용으로 CPU를 다시 세팅한다. 이와 같이 두 프로세스의 프로세스 제어블록을 교환하는 작업을 컨텍스트 스위칭이라 한다.&lt;/p&gt;

&lt;p&gt;컨텍스트 스위칭은 인터럽트가 걸렸을 때 발생한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;타임아웃 인터럽트&lt;/li&gt;
  &lt;li&gt;프로세스가 자신에게 주어진 메모리 공간을 넘어가려 할 때 발생하는 인터럽트 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스의-구조&quot;&gt;프로세스의 구조&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;코드 영역&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로그램의 코드가 기술된 곳으로 텍스트 영역이라고도 함&lt;/li&gt;
      &lt;li&gt;자기 자신을 수정하는 프로그램은 존재하지 않기 때문에, 코드는 읽기 전용으로 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터 영역&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;코드가 실행되면서 사용되는 변수나 파일 등의 각종 데이터를 모아놓는 곳&lt;/li&gt;
      &lt;li&gt;변수는 기본적으로 읽기와 쓰기가 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스택 영역&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로세스를 실행하기 위해 부수적으로 필요한 데이터를 모아놓은 곳&lt;/li&gt;
      &lt;li&gt;예를들어, 함수가 호출되면 함수를 수행하고 마치면 다시 되돌아올 위치를 이 영역에 저장&lt;/li&gt;
      &lt;li&gt;스택 영역은 운영체제가 사용자의 프로세스를 작동하기 위해 유지하는 영역이므로 사용자에게는 보이지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스의-생성과-복사&quot;&gt;프로세스의 생성과 복사&lt;/h2&gt;

&lt;p&gt;프로세스는 프로그램을 실행할 때 새로 생성된다. 사용자가 프로그램을 실행하면 운영체제는 프로그램을 메모리에 가져와 코드 영역에 넣고 프로세스 제어블록을 생성한다. 그리고 메모리에 데이터 영역과 스택 영역을 확보한 후 프로세스를 실행한다.&lt;/p&gt;

&lt;p&gt;프로세스를 새로 생성하는 방법뿐만 아니라 &lt;strong&gt;실행 중인 프로세스로부터 새로운 프로세스를 복사하는 방법&lt;/strong&gt;도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fork()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;커널이 제공하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt; 시스템 호출은 실행 중인 프로세스로부터 새로운 프로세스를 복사하는 함수이다. 이 함수는 워드 프로그램, 브라우저 등에서 프로그램을 하나 더 실행할 때 전형적으로 호출된다. 이렇게 프로세스를 복사하게 되면 기존의 프로세스는 부모 프로세스가 되고, 새로 생긴 프로세스는 자식 프로세스가 된다.&lt;/p&gt;

&lt;h2 id=&quot;프로세스의-전환&quot;&gt;프로세스의 전환&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;exec()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt; 시스템 호출을 사용하면 복사된 프로세스를 새로운 프로세스로 전환할 수 있다. 이 함수를 사용하는 목적은 프로세스의 구조체를 재활용하기 위함이다.&lt;/p&gt;

&lt;p&gt;새로운 프로세스를 만들려면 제어블록을 만들고 메모리의 자리를 확보하는 과정이 필요하다. 또한 프로세스를 종료하고 사용한 메모리를 청소(garbage collection)하기 위해 상위 프로세스와 부모-자식 관계를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt;를 사용하면 이미 만들어진 제어블록, 메모리 영역, 부모-자식 관계를 그대로 사용할 수 있어 편리하다. 새로운 코드 영역만 가져오면 되기 때문에 운영체제의 작업이 수월하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt; 함수의 동작과정은 간단하다. 호출을 하면 코드 영역에 있는 기존의 내용을 지우고 새로운 코드로 바꾼다. 또한 데이터 영역이 새로운 변수로 채워지고 스택 영역이 리셋된다. 제어블록의 내용 중 프로세스 구분자, 부모 프로세스 구분자, 메모리 관련 사항 등은 변하지 않지만 프로그램 카운터 레지스터 값을 비롯한 각종 레지스터와 사용한 파일 정보가 모두 리셋된다.&lt;/p&gt;

&lt;h2 id=&quot;프로세스의-계층-구조&quot;&gt;프로세스의 계층 구조&lt;/h2&gt;

&lt;p&gt;위에서 배운 프로세스의 복사와 전환은 프로세스의 계층 구조를 이해하는데 핵심 열쇠가 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt;를 사용하면 프로세스들을 자동적으로 부모-자식 프로세스의 계층 구조로 만들어준다. 프로세스를 계층 구조로 만들면 프로세스 간의 책임 관계가 분명해져서 시스템을 관리하기가 수월하다. 프로세스가 작업을 마쳐서 그 프로세스가 사용하던 자원을 회수(garbage collection)할 때 특히 편리하다. 만약 모든 프로세스가 독립적으로 만들어지면 프로세스가 종료될 때마다 운영체제가 직접 자원을 회수해야 하기 때문에 작업이 복잡해질 것이다. 그러나 모든 프로세스를 부모-자식 관계로 만들면 자식 프로세스가 작업을 마쳤을 떄 사용하던 자원을 부모 프로세스가 회수하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;고아 프로세스&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;부모 프로세스는 자원을 회수하기 위해 자식 프로세스가 끝날 때까지 기다려야 된다. 그런데 부모 프로세스가 먼저 종료되거나 자식 프로세스가 비정상적으로 종료되어 부모 프로세스에 연락이 안되는 경우도 있다. 이렇게 부모 프로세스가 먼저 종료되고 비정상적으로 남아있는 자식 프로세스를 고아 프로세스 또는 좀비 프로세스라고 한다. 좀비 프로세스는 자식 프로세스를 종료했음에도 부모가 뒤처리를 하지 않을 떄 발생한다. 이런 좀비 프로세스가 많아지면 자원이 낭비되게 된다. 따라서 운영체제는 반환되지 못한 자원을 주기적으로 회수해야 한다.&lt;/p&gt;

&lt;h1 id=&quot;스레드&quot;&gt;스레드&lt;/h1&gt;

&lt;p&gt;오늘날의 운영체제는 프로세스의 낭비 요소를 제거하고, 프로세스 작업의 유연성을 얻기 위해 멀티스레드를 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;스레드의-개념&quot;&gt;스레드의 개념&lt;/h2&gt;

&lt;p&gt;프로세스는 요리 작업 전체, 스레드는 요리를 완성하기 위해 수행하는 각각의 조리에 해당&lt;/p&gt;

&lt;p&gt;CPU 스케줄러가 CPU에 전달하는 일 하나가 스레드. 그러므로 CPU가 처리하는 작업의 단위는 프로세스로부터 전달받은 스레드&lt;/p&gt;

&lt;p&gt;운영체제 입장에서의 작업 단위는 프로세스이고, CPU 입장에서의 작업 단위는 스레드&lt;/p&gt;

&lt;p&gt;프로세스의 코드에 정의된 절차에 따라 CPU에 작업 요청을 하는 실행 단위&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로세스와 스레드의 차이&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프로세스끼리는 약하게 연결되어 있는 반면, 스레드끼리는 강하게 연결되어 있음&lt;/p&gt;

&lt;p&gt;프로세스는 스테이크, 스프와 같이 서로 큰 영향을 미치지 않음&lt;/p&gt;

&lt;p&gt;스레드는 스테이크 요리 내에서 고기 굽기, 채소 굽기, 소스 뿌리기와 같이 서로 강하게 연결되어 있음&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티 태스크&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;운영체제가 CPU에 작업을 줄 떄 시간을 잘게 나누어 배분하는 기법&lt;/p&gt;

&lt;p&gt;시분할 시스템에서 운영체제가 CPU에 전달하는 작업은 프로세스가 아니라 스레드이다.&lt;/p&gt;

&lt;p&gt;서로 독립적인 여러 개의 프로세스로 구성&lt;/p&gt;

&lt;p&gt;프로세스 간 데이터를 주고 받기 위해 IPC(Inter Process Communication)을 이용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티 프로세싱&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;멀티프로세싱은 CPU를 여러 개 사용하여 여러 개의 스레드를 동시에 처리하는 작업 환경을 말한다.&lt;/p&gt;

&lt;p&gt;멀티프로세싱은 하나의 컴퓨터에 여러 개의 CPU 혹은 하나의 CPU내 여러 개의 코어에 스레드를 배정하여 동시에 작동하는 것.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티 스레드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;멀티스레드는 프로세스 내 작업을 여러 개의 스레드로 분할함으로써 작업의 부담을 줄이는 프로세스 운영 기법&lt;/p&gt;

&lt;p&gt;멀티스레드는 변수나 파일 등을 공유하고 전역 변수나 함수 호출 등의 방법으로 스레드간 통신을 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CPU 멀티 스레드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CPU 멀티스레드는 한 번에 하나씩 처리해야 하는 스레드를 파이프라인 기법을 이용하여 동시에 여러 스레드를 처리하도록 만든 병렬 처리 기법&lt;/p&gt;

&lt;p&gt;하드웨어적인 방법으로 하나의 CPU에서 여러 스레드를 동시에 처리하는 병렬 처리 기법&lt;br /&gt;
(멀티스레드는 운영체제가 소프트웨어적으로 프로세스를 작은 단위의 스레드로 분할하여 운영하는 기법)&lt;/p&gt;

&lt;h2 id=&quot;멀티스레드&quot;&gt;멀티스레드&lt;/h2&gt;

&lt;p&gt;CPU와 프로그래밍 기술이 발전하면서 여러 개의 코어를 가진 CPU가 생겨나 멀티스레드를 지원하기 시작&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티스레드의 구조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스레드가 어떻게 생겨나고 어떻게 구성되는지 프로세스의 입장에서 살펴보자. C언어와 같은 절차지향 프로그래밍 언어는 순차적으로 실행되기 때문에 프로세스로 여러 개의 작업을 동시에 처리하기가 불편했다. 여러 개의 작업을 동시에 처리하기 위해 fork() 시스템 호출을 사용해 프로세스를 생성하는 방법을 이용했다. 그러나 fork()는 코드 영역과 데이터 영역의 일부가 메모리에 중복되어 존재하는 낭비 요소가 생길 수 밖에 없었다.&lt;/p&gt;

&lt;p&gt;예를 들어, 워드프로세서 같은 문서 편집기를 이용해 숙제, 편지쓰기, 자료 정리 작업을 동시에 진행한다고 해보자. 이 때 각각의 워드프로세서를 여러 개 실행할 경우, 내부적으로는 fork() 시스템 호출이 발생한다. 이렇게 되면 워드프로세서의 코드 일부, 프로세스 제어 블록, 공유 변수가 메모리의 여러 곳에 중복되어 메모리가 낭비된다.&lt;/p&gt;

&lt;p&gt;스레드는 이러한 멀티태스킹의 낭비 요소를 제거하기 위해 사용한다. 비슷한 일을 하는 2개의 프로세스를 만드는 대신, 코드, 데이터 등을 공유하면서 여러 개의 일을 하나의 프로세스 내에서 하는 것이다.&lt;/p&gt;

&lt;p&gt;프로세스는 크게 정적인 영역과 동적인 영역으로 구분된다. 동적인 영역의 대표적인 예는 레지스터 값, 스택, 힙 등이다.&lt;/p&gt;

&lt;p&gt;오늘날에는 여러 작업을 하기 위해 fork() 시스템 호출 대신 하나의 프로세스에 여러 개의 스레드를 만들어 사용한다.&lt;/p&gt;

&lt;p&gt;멀티스레드는 코드, 파일 등의 자원을 공유함으로써 자원의 낭비를 막고 효율성을 향상한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;멀티스레드의 장점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;응답성 향상: 한 스레드가 입출력으로 인해 작업이 진행되지 않더라도 다른 스레드가 작업을 계속하여 사용자의 작업 요구에 빨리 응답할 수 있다&lt;/li&gt;
  &lt;li&gt;자원 공유: 한 프로세스 내에서 독립적인 스레드를 생성하면 프로세스가 가진 자원을 모든 스레드가 공유하게 되어 작업을 원활하게 진행할 수 있다&lt;/li&gt;
  &lt;li&gt;효율성 향상: 불필요한 자원의 중복을 막음으로써 시스템의 효율이 향상된다&lt;/li&gt;
  &lt;li&gt;다중 CPU 지원: 2개 이상의 CPU를 가진 컴퓨터에서 멀티스레드를 사용하면 다중 CPU가 멀티스레드를 동시에 처리하여 CPU 사용량이 증가하고 프로세스의 처리 시간이 단축된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;멀티스레드의 단점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모든 스레드가 자원을 공유하기 때문에 한 스레드에 문제가 생기면 전체 프로세스에 영향을 미친다.&lt;/p&gt;

&lt;h1 id=&quot;프로세스-간-통신&quot;&gt;프로세스 간 통신&lt;/h1&gt;

&lt;p&gt;프로세스는 서로 독립적이기 때문에 데이터를 주고 받기 위해서는 프로세스 간 통신을 해야 한다.&lt;/p&gt;

&lt;p&gt;프로세스끼리 통신을 할 때에는 누가 먼저 작업할지, 작업이 언제 끝날지 등을 서로 알려주어야 하는데 이를 &lt;strong&gt;동기화&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;그리고 같은 데이터를 여러 프로세스가 사용할 때는 서로 침범하면 안되는 &lt;strong&gt;임계구역&lt;/strong&gt;이 존재한다.&lt;/p&gt;

&lt;p&gt;프로세스 간 통신(IPC, Inter Process Communication)에는 같은 컴퓨터내에 있는 프로세스 간 통신도 있고, 네트워크로 연결된 다른 컴퓨터에 있는 프로세스 간 통신도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프로세스 내부 데이터 통신&lt;/strong&gt;: 하나의 프로세스 내에 2개 이상의 스레드가 존재하는 경우의 통신. 프로세스 내부의 스레드는 전역 변수나 파일을 이용해 데이터를 주고 받는다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로세스 간 데이터 통신&lt;/strong&gt;: 같은 컴퓨터에 있는 여러 프로세스끼리 통신하는 경우로, 공용 파일 또는 운영체제가 제공하는 파이프를 사용하여 통신한다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;네트워크를 이용한 데이터 통신&lt;/strong&gt;: 여러 컴퓨터가 네트워크로 연결되어 있을 때도 통신이 가능한데, 이 경우 프로세스는 소켓을 이용하여 데이터를 주고받는다. 이처럼 소켓을 이용하는 프로세스 간 통신을 네트워킹이라고 한다. 다른 컴퓨터에 있는 함수를 호출하여 통신하는 원격 프로시저 호출(RPC)도 여기에 해당한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(같은 프로세스끼리도 루프백(127.0.0.1) 주소를 사용하면 소켓을 이용하여 통신할 수도 있지만, 소켓을 사용하려면 많은 전처리를 해야하기 때문에 같은 컴퓨터에 있는 프로세스 간 통신에는 소켓을 거의 사용하지 않는다)&lt;/p&gt;

&lt;h2 id=&quot;동기화&quot;&gt;동기화&lt;/h2&gt;
&lt;p&gt;프로세스 간 통신은 겉으로 보기에는 단순하다. 데이터를 주거나(send), 받는것(receive)을 의미한다. 예를 들어 전역 변수를 이용해 통신하는 경우를 생각해보자. 데이터를 보내는 프로세스는 데이터를 전역 변수에 저장한다. 데이터를 받는 프로세스는 전역 변수에 저장된 데이터를 읽어간다.&lt;/p&gt;

&lt;p&gt;하지만 내부적으로는 이것보다는 복잡하다. 예를 들어 통신하려는 상대 프로세스를 어떻게 찾을지, 데이터의 크기는 얼마로 할지, 데이터 도착 여부를 어떻게 확인할지 등의 문제를 해결해야 한다.&lt;/p&gt;

&lt;p&gt;프로세스 간 통신 방법을 분류할 때는 크게 두 가지가 기준이 된다. 바로 &lt;strong&gt;통신 방향&lt;/strong&gt;과 &lt;strong&gt;동기화의 유무&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;단방향&lt;/strong&gt;: 모스 신호처럼 한쪽 방향으로만 데이터를 전송할 수 있는 구조. (전역 변수, 파이프)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;양방향&lt;/strong&gt;: 데이터를 동시에 양쪽 방향으로 전송할 수 있는 구조 (소켓 통신)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;동기화&lt;/strong&gt;: 상대쪽에서 데이터를 전송하면 운영체제가 데이터가 도착했음을 알려준다. (파이프, 소켓)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;비동기화&lt;/strong&gt;: 상대쪽에서 데이터를 전송했는지 반복문을 무한 실행하며 기다려야 한다(바쁜 대기). (전역 변수, 파일)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스-간-통신의-종류&quot;&gt;프로세스 간 통신의 종류&lt;/h2&gt;

&lt;h3 id=&quot;전역-변수를-이용한-통신&quot;&gt;전역 변수를 이용한 통신&lt;/h3&gt;

&lt;p&gt;전역 변수를 이용한 통신은 공동으로 관리하는 메모리를 사용하여 데이터를 주고 받는 것이다.&lt;/p&gt;

&lt;p&gt;전역 변수를 이용한 통신은 변수를 두 개를 사용하면 양방향 통신을 가능하게 한다.&lt;/p&gt;

&lt;p&gt;하지만 동기화 문제가 해결되지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;파일을-이용한-통신&quot;&gt;파일을 이용한 통신&lt;/h3&gt;

&lt;p&gt;파일을 이용한 통신은 부모-자식 프로세스 간 통신에 많이 사용&lt;/p&gt;

&lt;p&gt;운영체제가 별다른 동기화를 제공하지 않기 때문에, 프로세스가 알아서 동기화를 해야 한다.&lt;/p&gt;

&lt;p&gt;동기화를 위해 주로 부모 프로세스가 wait() 함수를 이용하여 자식 프로세스의 작업이 끝날 때까지 기다렸다가 작업을 시작한다.&lt;/p&gt;

&lt;h3 id=&quot;소켓을-이용한-통신&quot;&gt;소켓을 이용한 통신&lt;/h3&gt;

&lt;p&gt;서로 다른 컴퓨터에 있는 프로세스 간 통신은 원격 프로시저 호출(RPC)이나 소켓을 이용한다.&lt;/p&gt;

&lt;p&gt;원격 프로시저 호출은 다른 컴퓨터에 있는 함수를 호출하는 것을 뜻한다.&lt;/p&gt;

&lt;p&gt;객체지향 언어에서 다른 컴퓨터에 있는 객체의 메소드를 불러와 사용하는 것이 원격 프로시저 호출의 대표적인 예이다.&lt;/p&gt;

&lt;p&gt;원격 프로시저 호출은 일반적으로 소켓을 이용하여 구현한다.&lt;/p&gt;

&lt;p&gt;프로세스는 소켓에 쓰기 연산을 통해 데이터를 전송하고 읽기 연산을 통해 데이터를 받는다.&lt;/p&gt;

&lt;p&gt;소켓은 동기화를 지원한다.&lt;/p&gt;

&lt;p&gt;소켓은 하나만 사용해도 양방향 통신이 가능하다.&lt;/p&gt;

&lt;p&gt;네트워크 프로그래밍을 흔히 소켓 프로그래밍이라 부르는 이유는 네트워킹의 기본이 소켓이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여러 컴퓨터에 있는 프로세스에 데이터를 전달하는 방법 중 가장 대중화된 것은 소켓을 이용한 네트워킹이다. 소켓을 이용한 네트워킹에서도 open(), read()/write(), close() 구조를 사용한다.&lt;/p&gt;

&lt;p&gt;위의 그림은 클라이언트와 서버가 어떤 절차를 거쳐서 통신하는지를 보여준다. 클라이언트와 서버는 둘 다 소켓을 사용한다. 소켓은 양방향 통신을 지원하고 동기화도 지원한다.&lt;/p&gt;

&lt;p&gt;클라이언트는 소켓을 생성한 후 connect()를 사용하여 서버와의 접속을 시도한다. 서버와 접속되면 read() 혹은 write() 작업을 하며, 작업이 끝나면 사용한 소켓 디스크립터를 닫고 종료한다.&lt;/p&gt;

&lt;p&gt;서버 쪽 통신 절차는 좀 더 복잡하다. 서버는 소켓을 생성한 후 bind()를 삿용하여 생성한 소켓을 특정 포트에 등록한다. 포트는 한 컴퓨터 내에 존재하는 여러 프로세스를 구분하기 위한 목적이다. 포트를 사용해 어떤 프로세스와 통신할지 구분할 수 있다.&lt;/p&gt;

&lt;p&gt;하나의 포트 번호에 소켓이 하나만 생성되는 것은 아니다. 네이버 홈페이지를 운영하는 서버의 포트 번호는 80번인데, 여기에 소켓을 하나만 생성할 수 있다면단 한사람에게만 서비스를 할 수 있을 것이다. 서버는 동시에 여러 클라이언트에 서비스를 하기 위해 하나의 포트 번호에 여러 개의 소켓을 생성한다. 따라서 bind()는 특정 포트에 새로운 소켓을 등록하겠다는 의미이다.&lt;/p&gt;

&lt;p&gt;bind()로 소켓이 정상적으로 등록되면 listen()을 실행하여 클라이언트를 받을 준비를 한다. accept()는 클라이언트의 connect(), 즉 연결 요청을 기다리다가 여러 명의 클라이언트가 동시에 connect()를 하는 경우 그중 하나를 골라 작업을 시작하게 해준다. 따라서 클라이언트가 accept()되면 소켓 디스크립터가 생성되고 작업이 시작된다. read()혹은 write() 작업을 마치면 생성된 소켓 디스크립터를 닫고 다음 클라이언트를 기다린다.&lt;/p&gt;

&lt;p&gt;서버에서의 소켓 생성은 listen()으로 클라이언트의 접속을 확인한 후, accept()에서 이루어진다.&lt;/p&gt;

&lt;p&gt;서버의 경우 계속 클라이언트를 받아 작업해야 하기 때문에 무한 루프를 돌며 작업을 반복한다.&lt;/p&gt;

&lt;h2 id=&quot;임계구역&quot;&gt;임계구역&lt;/h2&gt;

&lt;p&gt;임계구역은 공유 자원 접근 순서에 따라 실행 결과가 달라지는 프로그램의 영역을 말한다.&lt;/p&gt;

&lt;h3 id=&quot;임계구역-해결-조건&quot;&gt;임계구역 해결 조건&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;상호 배제: 한 프로세스가 임계구역에 들어가면 다른 프로세스는 들어갈 수 없다&lt;/li&gt;
  &lt;li&gt;한정 대기: 어떤 프로세스도 무한 대기하지 않아야 한다&lt;/li&gt;
  &lt;li&gt;진행의 융통성: 한 프로세스가 다른 프로세스의 진행을 방해해서는 안된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;임계구역-해결-방법&quot;&gt;임계구역 해결 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;세마포어: 임계구역에 진입하기 전에 스위치를 사용 중으로 놓고 임계구역으로 들어가는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;교착-상태&quot;&gt;교착 상태&lt;/h1&gt;

&lt;p&gt;교착 상태는 2개 이상의 프로세스가 다른 프로세스의 작업이 끝나기만 기다리며 작업을 더 이상 진행하지 못하는 상태를 말한다.&lt;/p&gt;

&lt;p&gt;컴퓨터 시스템에서 교착 상태는 시스템 자원, 공유 변수(또는 파일), 응용 프로그램(데이터베이스) 등을 사용할 때 발생할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;자원-할당-그래프&quot;&gt;자원 할당 그래프&lt;/h2&gt;

&lt;p&gt;프로세스가 어떤 자원을 사용 중이고 어떤 자원을 기다리고 있는지를 방향성이 있는 그래프로 표현한 것이다.&lt;/p&gt;

&lt;p&gt;자원 할당 그래프를 사용하면 자원의 할당과 대기 상태를 한눈에 파악할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;교착-상태-필요조건&quot;&gt;교착 상태 필요조건&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;상호 배제: 한 프로세스가 사용하는 자원은 다른 프로세스와 공유할 수 없는 배타적인 자원이어야 한다&lt;/li&gt;
  &lt;li&gt;비선점: 한 프로세스가 사용 중인 자원은 다른 프로세스가 빼앗을 수 없는 비선점 자원이어야 한다&lt;/li&gt;
  &lt;li&gt;점유와 대기: 프로세스가 어떤 자원을 할당받은 상태에서 다른 자원을 기다리는 상태이어야 한다&lt;/li&gt;
  &lt;li&gt;원형 대기: 점유와 대기를 하는 프로세스 간에 관계가 원을 이루어야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 조건이 하나라도 만족되지 않으면 교착 상태는 일어나지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;교착-상태-해결방법&quot;&gt;교착 상태 해결방법&lt;/h2&gt;

&lt;h3 id=&quot;교착-상태-검출과-회복&quot;&gt;교착 상태 검출과 회복&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;교착 상태 검출&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;교착 상태 검출은 운영체제가 프로세스의 작업을 관찰하면서 교착 상태 발생 여부를 계속 주시하는 방법. 만약 교착 상태가 발견되면 이를 해결하기 위해 교착 상태 회복 단계를 밟는다.&lt;/p&gt;

&lt;p&gt;교착 상태를 검출하는 방법에는 크게 타임아웃 방법과 자원 할당 그래프를 이용하는 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;타임아웃&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일정 시간 동안 작업이 진행되지 않은 프로세스를 교착 상태가 발생한 것으로 간주하여 처리하는 방법이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;장점: 쉽게 구현&lt;/li&gt;
  &lt;li&gt;단점: 엉뚱한 프로세스가 종료될 수 있다. 분산 데이터베이스에는 적용 불가(교착 상태 때무인지, 네트워크 때문인지 알 수 없음)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 문제에도 불구하고 타임아웃은 대부분의 데이터베이스와 운영체제에서 많이 선호한다. 그 이유는 자원 할당 그래프를 이용한 방법은 구현하기가 힘들기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자원 할당 그래프를 이용&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;장점: 교착 상태를 정확하게 파악 할 수 있다&lt;/li&gt;
  &lt;li&gt;단점: 그래프를 유지, 갱신하고 사이클을 검사하는 추가 작업으로 인한 오버헤드가 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/os_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;교착 상태 회복&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;교착 상태를 유발한 프로세스를 강제 종료한다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;교착 상태를 일으킨 모든 프로세스를 동시에 종료
    &lt;ul&gt;
      &lt;li&gt;이 방법은 작업을 시작하면 다시 교착 상태를 일으킬 가능성이 높다&lt;/li&gt;
      &lt;li&gt;그래서 다시 실행할 때는 어떤 프로세스를 먼저 실행할지 순서를 정해 순차적으로 실행해야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;교착 상태를 일으킨 프로세스 중 하나를 골라 순서대로 종료
    &lt;ul&gt;
      &lt;li&gt;순서대로 종료하면서 나머지 프로세스의 상태를 파악하는 방법&lt;/li&gt;
      &lt;li&gt;우선순위가 낮은 프로세스를 먼저 종료한다&lt;/li&gt;
      &lt;li&gt;우선순위가 같은 경우 작업시간이 짧은 프로세스를 먼저 종료한다&lt;/li&gt;
      &lt;li&gt;위의 두 조건이 같은 경우 자원을 많이 사용하는 프로세스를 먼저 종료한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156644071&quot; target=&quot;_blank&quot;&gt;쉽게 배우는 운영체제 책 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 14 Jun 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/os-series3</link>
                <guid isPermaLink="true">http://localhost:4000/os-series3</guid>
                
                <category>OS</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Spring Series [Part4]: JPA</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jpa&quot; id=&quot;markdown-toc-jpa&quot;&gt;JPA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스프링-데이터-jpa&quot; id=&quot;markdown-toc-스프링-데이터-jpa&quot;&gt;스프링 데이터 JPA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#querydsl&quot; id=&quot;markdown-toc-querydsl&quot;&gt;Querydsl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;jpa&quot;&gt;JPA&lt;/h1&gt;

&lt;h1 id=&quot;스프링-데이터-jpa&quot;&gt;스프링 데이터 JPA&lt;/h1&gt;

&lt;h1 id=&quot;querydsl&quot;&gt;Querydsl&lt;/h1&gt;
</description>
                <pubDate>Tue, 07 Jun 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spring_series4</link>
                <guid isPermaLink="true">http://localhost:4000/spring_series4</guid>
                
                <category>Spring</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>Spring Series [Part3]: JDBC</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jdbc&quot; id=&quot;markdown-toc-jdbc&quot;&gt;JDBC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jdbc-template&quot; id=&quot;markdown-toc-jdbc-template&quot;&gt;JDBC Template&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mybatis&quot; id=&quot;markdown-toc-mybatis&quot;&gt;MyBatis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;jdbc&quot;&gt;JDBC&lt;/h1&gt;

&lt;h1 id=&quot;jdbc-template&quot;&gt;JDBC Template&lt;/h1&gt;

&lt;h1 id=&quot;mybatis&quot;&gt;MyBatis&lt;/h1&gt;
</description>
                <pubDate>Tue, 07 Jun 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spring_series3</link>
                <guid isPermaLink="true">http://localhost:4000/spring_series3</guid>
                
                <category>Spring</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>Spring Series [Part2]: 스프링 MVC</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#웹-애플리케이션-서버&quot; id=&quot;markdown-toc-웹-애플리케이션-서버&quot;&gt;웹 애플리케이션 서버&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#서블릿&quot; id=&quot;markdown-toc-서블릿&quot;&gt;서블릿&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스프링-mvc&quot; id=&quot;markdown-toc-스프링-mvc&quot;&gt;스프링 MVC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;웹-애플리케이션-서버&quot;&gt;웹 애플리케이션 서버&lt;/h1&gt;

&lt;h1 id=&quot;서블릿&quot;&gt;서블릿&lt;/h1&gt;

&lt;h1 id=&quot;스프링-mvc&quot;&gt;스프링 MVC&lt;/h1&gt;
</description>
                <pubDate>Tue, 07 Jun 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spring_series2</link>
                <guid isPermaLink="true">http://localhost:4000/spring_series2</guid>
                
                <category>Spring</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>Spring Series [Part1]: 스프링 핵심 원리</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#스프링&quot; id=&quot;markdown-toc-스프링&quot;&gt;스프링&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#스프링-프레임워크&quot; id=&quot;markdown-toc-스프링-프레임워크&quot;&gt;스프링 프레임워크&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스프링-부트&quot; id=&quot;markdown-toc-스프링-부트&quot;&gt;스프링 부트&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스프링의-핵심-컨셉&quot; id=&quot;markdown-toc-스프링의-핵심-컨셉&quot;&gt;스프링의 핵심 컨셉&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#객체-지향&quot; id=&quot;markdown-toc-객체-지향&quot;&gt;객체 지향&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#다형성&quot; id=&quot;markdown-toc-다형성&quot;&gt;다형성&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#제어의-역전-의존-관계-주입&quot; id=&quot;markdown-toc-제어의-역전-의존-관계-주입&quot;&gt;제어의 역전, 의존 관계 주입&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스프링-컨테이너와-빈&quot; id=&quot;markdown-toc-스프링-컨테이너와-빈&quot;&gt;스프링 컨테이너와 빈&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#싱글톤-컨테이너&quot; id=&quot;markdown-toc-싱글톤-컨테이너&quot;&gt;싱글톤 컨테이너&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#컴포넌트-스캔&quot; id=&quot;markdown-toc-컴포넌트-스캔&quot;&gt;컴포넌트 스캔&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#의존관계-자동-주입&quot; id=&quot;markdown-toc-의존관계-자동-주입&quot;&gt;의존관계 자동 주입&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#빈-스코프&quot; id=&quot;markdown-toc-빈-스코프&quot;&gt;빈 스코프&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;스프링&quot;&gt;스프링&lt;/h1&gt;

&lt;h2 id=&quot;스프링-프레임워크&quot;&gt;스프링 프레임워크&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;핵심 기술&lt;/strong&gt;: 스프링 DI 컨테이너, AOP, 이벤트 등&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;웹 기술&lt;/strong&gt;: 스프링 MVC&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터 접근&lt;/strong&gt; 기술: 트랜잭션, JDBC&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;기술 통합&lt;/strong&gt;: 캐시, 이메일, 원격접근, 스케줄링&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;테스트&lt;/strong&gt;: 스프링 기반 테스트 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스프링-부트&quot;&gt;스프링 부트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스프링을 편리하게 사용할 수 있도록 지원&lt;/li&gt;
  &lt;li&gt;Tomcat 같은 웹 서버 내장&lt;/li&gt;
  &lt;li&gt;스프링과 외부 라이브러리 자동 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스프링의-핵심-컨셉&quot;&gt;스프링의 핵심 컨셉&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;웹 애플리케이션을 만들어주는 프레임워크&lt;/li&gt;
  &lt;li&gt;데이터베이스에 접근을 편리하게 함&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;객체 지향 설계를 지원하는 프레임워크&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;객체-지향&quot;&gt;객체 지향&lt;/h2&gt;

&lt;h3 id=&quot;다형성&quot;&gt;다형성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;객체 지향 코드를 작성할 때 얻을 수 있는 가장 큰 특징은 &lt;strong&gt;다형성&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;다형성은 역할(인터페이스)과 구현(클래스)으로 나누어 코드를 설계&lt;/li&gt;
  &lt;li&gt;코드 설계시 역할만 알아도 됨&lt;/li&gt;
  &lt;li&gt;빠른 설계와 유연한 확장 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;제어의-역전-의존-관계-주입&quot;&gt;제어의 역전, 의존 관계 주입&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스프링은 다형성을 위해 제어의 역전(IoC), 의존관계 주입(DI) 방식으로 개발하도록 지원&lt;/li&gt;
  &lt;li&gt;스프링 컨테이너(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;)가 위 방식을 가능하게 함&lt;/li&gt;
  &lt;li&gt;서비스를 공연에 비유하면 스프링 컨테이너는 공연 기획자에 해당&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;스프링-컨테이너와-빈&quot;&gt;스프링 컨테이너와 빈&lt;/h1&gt;

&lt;h1 id=&quot;싱글톤-컨테이너&quot;&gt;싱글톤 컨테이너&lt;/h1&gt;

&lt;h1 id=&quot;컴포넌트-스캔&quot;&gt;컴포넌트 스캔&lt;/h1&gt;

&lt;h1 id=&quot;의존관계-자동-주입&quot;&gt;의존관계 자동 주입&lt;/h1&gt;

&lt;h1 id=&quot;빈-스코프&quot;&gt;빈 스코프&lt;/h1&gt;

</description>
                <pubDate>Mon, 06 Jun 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/spring_series1</link>
                <guid isPermaLink="true">http://localhost:4000/spring_series1</guid>
                
                <category>Spring</category>
                
                
                <category>backend</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part11]: 정규표현식(4) 정규표현식을 활용한 메서드(feat.파이썬)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#re-라이브러리-메서드&quot; id=&quot;markdown-toc-re-라이브러리-메서드&quot;&gt;re 라이브러리 메서드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#match&quot; id=&quot;markdown-toc-match&quot;&gt;match()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#search&quot; id=&quot;markdown-toc-search&quot;&gt;search()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#findall&quot; id=&quot;markdown-toc-findall&quot;&gt;findall()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#finditer&quot; id=&quot;markdown-toc-finditer&quot;&gt;finditer()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fullmatch&quot; id=&quot;markdown-toc-fullmatch&quot;&gt;fullmatch()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#matchobj-객체의-메서드&quot; id=&quot;markdown-toc-matchobj-객체의-메서드&quot;&gt;matchObj 객체의 메서드&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#group&quot; id=&quot;markdown-toc-group&quot;&gt;group()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#start&quot; id=&quot;markdown-toc-start&quot;&gt;start()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#end&quot; id=&quot;markdown-toc-end&quot;&gt;end()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#span&quot; id=&quot;markdown-toc-span&quot;&gt;span()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;re-라이브러리-메서드&quot;&gt;re 라이브러리 메서드&lt;/h1&gt;

&lt;h2 id=&quot;match&quot;&gt;match()&lt;/h2&gt;

&lt;h2 id=&quot;search&quot;&gt;search()&lt;/h2&gt;

&lt;h2 id=&quot;findall&quot;&gt;findall()&lt;/h2&gt;

&lt;h2 id=&quot;finditer&quot;&gt;finditer()&lt;/h2&gt;

&lt;h2 id=&quot;fullmatch&quot;&gt;fullmatch()&lt;/h2&gt;

&lt;h1 id=&quot;matchobj-객체의-메서드&quot;&gt;matchObj 객체의 메서드&lt;/h1&gt;

&lt;h2 id=&quot;group&quot;&gt;group()&lt;/h2&gt;

&lt;h2 id=&quot;start&quot;&gt;start()&lt;/h2&gt;

&lt;h2 id=&quot;end&quot;&gt;end()&lt;/h2&gt;

&lt;h2 id=&quot;span&quot;&gt;span()&lt;/h2&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://greeksharifa.github.io/정규표현식(re)/2018/07/20/regex-usage-01-basic/&quot; target=&quot;_blank&quot;&gt;greeksharifa, 파이썬 정규표현식(re) 사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexone.com&quot; target=&quot;_blank&quot;&gt;regexone: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexr.com&quot; target=&quot;_blank&quot;&gt;regexr: 정규표현식 테스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexper.com&quot; target=&quot;_blank&quot;&gt;regexper: 정규표현식 시각화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/11&quot; target=&quot;_blank&quot;&gt;프로그래머스: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/workbook/view/6082&quot; target=&quot;_blank&quot;&gt;백준: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 20 May 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series11</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series11</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part10]: 정규표현식(3) 그루핑</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; id=&quot;markdown-toc-&quot;&gt;()&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#문자-그루핑&quot; id=&quot;markdown-toc-문자-그루핑&quot;&gt;문자 그루핑&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#이중-그루핑&quot; id=&quot;markdown-toc-이중-그루핑&quot;&gt;이중 그루핑&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#문자-캡처링&quot; id=&quot;markdown-toc-문자-캡처링&quot;&gt;문자 캡처링&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#그루핑만-원하는-경우-&quot; id=&quot;markdown-toc-그루핑만-원하는-경우-&quot;&gt;그루핑만 원하는 경우: (?:)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#재참조-숫자&quot; id=&quot;markdown-toc-재참조-숫자&quot;&gt;재참조: \숫자&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#활용&quot; id=&quot;markdown-toc-활용&quot;&gt;활용&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1&gt;()&lt;/h1&gt;

&lt;p&gt;정규표현식에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;는 크게 다음과 같은 기능을 가집니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;그룹핑
캡처링
재참조
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문자-그루핑&quot;&gt;문자 그루핑&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yahoo+&lt;/code&gt; 정규표현식은 앞의 문자 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;가 1회 이상 반복되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yahoo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yahooooo&lt;/code&gt;와 같은 문자와 매칭됩니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yahoo&lt;/code&gt;라는 문자가 반복되는 부분과 매칭하고 싶을때 그루핑을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이중-그루핑&quot;&gt;이중 그루핑&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문자-캡처링&quot;&gt;문자 캡처링&lt;/h2&gt;

&lt;p&gt;정규표현식을 사용할 때 매칭되는 문자열의 특정 부분만 추출하고 싶은 경우가 있습니다. 이런 경우에도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; 문자를 사용해서 캡처링할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그루핑은 정규표현식으로 패턴을 만들기 위한 목적이고, 캡처링은 매칭된 문자열 중 특정 부분을 사용하기 위한 목적입니다.&lt;/p&gt;

&lt;p&gt;캡처링만 원하는 경우에는 그냥 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;만 사용하고 뒤에 별다른 정량자를 사용하지 않으면 됩니다. 반면 그루핑만 원하는 경우에는 해당 괄호가 캡처링되지 않도록 하기 위해 ‘이 괄호는 비캡처 그루핑이다’라는 표기로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(?:)&lt;/code&gt;과 같이 표기합니다.&lt;/p&gt;

&lt;h2 id=&quot;그루핑만-원하는-경우-&quot;&gt;그루핑만 원하는 경우: (?:)&lt;/h2&gt;

&lt;p&gt;원래 그루핑을 하게되면 캡처링도 자동적으로 따라오게 됩니다. 하지만 단순 문자열 반복의 목적으로 그루핑만 원하고, 캡처링되지 않기를 원하는 경우도 있습니다. 이 때는 해당 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?:&lt;/code&gt;를 넣어서 정규표현식을 작성하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(?:&amp;lt;regex&amp;gt;) : 그루핑용으로만 사용하고 캡처링되지 않도록 처리합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;재참조-숫자&quot;&gt;재참조: \숫자&lt;/h2&gt;

&lt;p&gt;캡처링한 부분과 똑같은 문자열을 다시 참조하고 싶은 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\숫자&lt;/code&gt; (숫자는 캡처링 숫자와 일치)를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;자주 사용되는 예시는 ‘토마토’, ‘기러기’, ‘zabz’와 같이 똑같은 문자로 시작해서 끝나는 단어를 매칭하고 싶을 때 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;활용&quot;&gt;활용&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;의 캡처링은 정규표현식을 활용한 메서드에서 자주 활용되기 때문에 다음 포스트에서 자세히 다루도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://greeksharifa.github.io/정규표현식(re)/2018/07/20/regex-usage-01-basic/&quot; target=&quot;_blank&quot;&gt;greeksharifa, 파이썬 정규표현식(re) 사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexone.com&quot; target=&quot;_blank&quot;&gt;regexone: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexr.com&quot; target=&quot;_blank&quot;&gt;regexr: 정규표현식 테스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexper.com&quot; target=&quot;_blank&quot;&gt;regexper: 정규표현식 시각화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/11&quot; target=&quot;_blank&quot;&gt;프로그래머스: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/workbook/view/6082&quot; target=&quot;_blank&quot;&gt;백준: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 19 May 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series10</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series10</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Java Series [Part10]: 자바의 객체지향 프로그래밍(2)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#상속&quot; id=&quot;markdown-toc-상속&quot;&gt;상속&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#포함-관계&quot; id=&quot;markdown-toc-포함-관계&quot;&gt;포함 관계&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#오버라이딩overriding&quot; id=&quot;markdown-toc-오버라이딩overriding&quot;&gt;오버라이딩(overriding)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#super&quot; id=&quot;markdown-toc-super&quot;&gt;super&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#super-1&quot; id=&quot;markdown-toc-super-1&quot;&gt;super()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#제어자modifier&quot; id=&quot;markdown-toc-제어자modifier&quot;&gt;제어자(modifier)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#static&quot; id=&quot;markdown-toc-static&quot;&gt;static&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#final&quot; id=&quot;markdown-toc-final&quot;&gt;final&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#abstract&quot; id=&quot;markdown-toc-abstract&quot;&gt;abstract&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#public-protected-private&quot; id=&quot;markdown-toc-public-protected-private&quot;&gt;public, protected, private&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#다형성&quot; id=&quot;markdown-toc-다형성&quot;&gt;다형성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#추상-클래스&quot; id=&quot;markdown-toc-추상-클래스&quot;&gt;추상 클래스&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#인터페이스&quot; id=&quot;markdown-toc-인터페이스&quot;&gt;인터페이스&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;h2 id=&quot;상속&quot;&gt;상속&lt;/h2&gt;
&lt;p&gt;상속이란 &lt;strong&gt;기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것&lt;/strong&gt;입니다. 상속을 이용하면 코드의 재사용성을 높이고 코드의 중복을 제거할 수 있습니다. 자바에서 상속은 간단히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt;키워드를 사용해 표현할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;상속을 해주는 클래스를 부모 클래스라고 하고, 상속을 받는 클래스를 자식 클래스라고 합니다.&lt;/p&gt;

&lt;p&gt;자식 클래스는 부모 클래스의 변수와 메서드를 상속 받으므로 부모 클래스의 변동은 자식 클래스에게도 영향을 미치지만, 자식 클래스의 변동은 부모 클래스에 아무런 영향을 주지 않습니다.&lt;/p&gt;

&lt;p&gt;또한 항상 자식 클래스가 부모 클래스보다 같거나 많은 멤버를 갖게 됩니다. 즉, 상속에 상속을 거듭할수록 상속받는 클래스의 멤버 개수는 점점 늘어나게 됩니다. 그래서 상속을 받는다는 것은 부모 클래스를 확장(extend)한다는 의미로 해석할 수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Peter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cannot find variable salary&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;포함-관계&quot;&gt;포함 관계&lt;/h2&gt;
&lt;p&gt;상속을 이용한 방법 말고도 클래스 간의 관계를 맺어주고 클래스를 재사용하는 방법이 있는데, 그것은 바로 포함(composite)관계를 이용하는 방법입니다.&lt;/p&gt;

&lt;p&gt;다음 코드는 사람을 나타내는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;클래스와, 사람의 자산을 나타내는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Property&lt;/code&gt;클래스의 포함관계를 나타낸 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 코드 재사용성을 높이기 위해 클래스 간 관계를 나타내는 방법에는 크게 상속과 포함관계가 있는데, 그러면 언제 상속을 사용하고 언제 포함관계를 사용할까요?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- A(노동자)는 B(사람)이다 -&amp;gt; A는 B의 자식 클래스 -&amp;gt; 상속
- A(자산)은 B(사람)에 속한다 -&amp;gt; 포함 관계  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전체 코드는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;house&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;house&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;오버라이딩overriding&quot;&gt;오버라이딩(overriding)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;부모 클래스로부터 상속받은 메서드의 내용을 변경하는 것을 오버라이딩&lt;/strong&gt;이라고 합니다. 상속받은 메서드를 그대로 사용하기도 하지만, 보통 자식 클래스에서 자신에 맞게 변경하는 경우가 많습니다.&lt;/p&gt;

&lt;p&gt;여기서 말하는 내용 변경은 구현부에 해당하는 얘기입니다. 그렇기 때문에 메서드의 선언부(메서드 이름, 매개변수, 반환타입)는 부모 클래스와 완전히 일치해야 합니다.&lt;/p&gt;

&lt;p&gt;다만 접근 제어자(access modifier)와 예외(exception)는 제한된 조건에서 다르게 변경할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;접근 제어자는 부모 클래스의 메서드와 같거나 더 넓은 범위로 변경 가능
부모 클래스의 메서드보다 많은 수의 예외를 선언할 수 없음
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;오버라이딩 예시는 다음과 같습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt;클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;introduceMyself()&lt;/code&gt; 메서드를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Worker&lt;/code&gt; 클래스에서 오버라이딩 하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduceMyself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi I'm &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; I'm just person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduceMyself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi I'm &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; I'm working as &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; My salary is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;introduceMyself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Peter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Manager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;introduceMyself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;super&quot;&gt;super&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt;는 자식 클래스에서 부모 클래스 인스턴스를 지칭하는 방법입니다. 클래스 안에서 자기 자신의 인스턴스를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;로 나타낸 것과 유사합니다. 자식 클래스에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt;를 사용하면 자식 클래스의 변수, 메서드와 이름이 같은 부모 클래스의 변수, 메서드를 구별할 수 있습니다.&lt;/p&gt;

&lt;p&gt;위의 코드에서 자식클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;introduceMyself()&lt;/code&gt; 메서드를 다음과 같이 수정해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduceMyself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;introduceMyself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Hi I'm Peter I'm just person&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I'm working as &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; My salary is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// I'm working as Manager My salary is 100&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 super를 이용해 부모클래스의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;introduceMyself()&lt;/code&gt; 메서드를 호출할 수 있습니다.&lt;/p&gt;

&lt;p&gt;참고로 위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Override&lt;/code&gt;는 오버라이딩 애너테이션(annotation)으로 오버라이딩을 위해 반드시 표기해야 하는 것은 아닙니다. 하지만 제가 자바 컴파일러에게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;introduceMyself()&lt;/code&gt; 메서드를 오버라이딩 한 것이라고 명시적으로 알려줌으로써 부모 클래스에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;introduceMyself()&lt;/code&gt;가 있는지 확인하는 등 제대로 오버라이딩을 했는지 컴파일 단계에서 확인해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;super-1&quot;&gt;super()&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;는 &lt;strong&gt;부모클래스의 생성자&lt;/strong&gt;입니다. &lt;strong&gt;생성자는 변수를 초기화하는 메서드&lt;/strong&gt;라고 했습니다.&lt;/p&gt;

&lt;p&gt;그렇기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;는 부모클래스를 상속 받은 &lt;strong&gt;자식클래스에서 부모클래스의 멤버 변수를 초기화 할 때 사용&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;p&gt;아래는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;를 사용하지 않고 부모클래스의 변수를 초기화한 경우입니다. Worker클래스에서 부모클래스의 변수인 name, age, gender를 초기화하는 코드를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.name = name&lt;/code&gt;과 같은 방법으로 정의하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Peter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Manager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 직접 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.name = name&lt;/code&gt;으로 정의하는 것도 틀린 코드는 아니지만, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;를 이용하면 코드의 중복을 제거하는 조금 더 객체지향적인 코드를 작성할 수 있기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super()&lt;/code&gt;를 이용해서 다시 작성하면 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;제어자modifier&quot;&gt;제어자(modifier)&lt;/h1&gt;
&lt;p&gt;제어자는 클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;접근 제어자&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;public, protected, (default), private&lt;/li&gt;
  &lt;li&gt;네 가지중 한 개만 사용 가능&lt;/li&gt;
  &lt;li&gt;보통 선언부에서 가장 먼저 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;그 외&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;static, final, abstract 등&lt;/li&gt;
  &lt;li&gt;여러 개 조합하여 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;static&quot;&gt;static&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용될 수 있는 곳: 변수, 메서드&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스 생성하지 않고 사용 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;변수에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;모든 인스턴스에 공통적으로 사용되는 클래스 변수가 된다&lt;/li&gt;
      &lt;li&gt;인스턴스 생성하지 않고 사용 가능한 변수가 된다&lt;/li&gt;
      &lt;li&gt;클래스가 메모리에 로드될 때 생성된다&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;personNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 인스턴스 없이 personNumber 사용&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;메서드에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;인스턴스 생성하지 않고 호출 가능한 클래스 메서드가 된다&lt;/li&gt;
      &lt;li&gt;클래스 메서드에서는 인스턴스 멤버를 직접 사용할 수 없다&lt;/li&gt;
      &lt;li&gt;클래스 메서드는 오버라이딩 할 수 없다 (자바관련 면접 질문)&lt;/li&gt;
      &lt;li&gt;Overriding depends on having an instance of a class. The point of polymorphism is that you can subclass a class and the objects implementing those subclasses will have different behaviors for the same methods defined in the superclass (and overridden in the subclasses). A static method is not associated with any instance of a class so the concept is not applicable.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;personNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countPersonNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 변수는 클래스 변수 personNumber만 사용 가능&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;countPersonNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 인스턴스 없이 countPersonNumber() 메서드 호출&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final&quot;&gt;final&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용할 수 있는 곳: 클래스, 메서드, 변수&lt;/li&gt;
  &lt;li&gt;클래스에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;자신을 확장하는 자식클래스 정의 못하게 함 (자식 안낳는다)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Cannot inherit from final 'Person'&lt;/span&gt;
      
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;메서드에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;자식클래스가 오버라이딩 할 수 없게 함
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countPersonNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사람 숫자 세는 중&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countPersonNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Cannot Override; Overriden method is 'final'&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;일꾼 숫자 세는 중&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;변수에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;변경할 수 없는 상수가 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;abstract&quot;&gt;abstract&lt;/h2&gt;
&lt;p&gt;추상 클래스 또는 추상 메서드를 정의할 때 사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;사용할 수 있는 곳: 클래스, 메서드&lt;/li&gt;
  &lt;li&gt;클래스에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;클래스 내에 추상 메서드가 선언되어 있음을 의미&lt;/li&gt;
      &lt;li&gt;추상 클래스는 아직 완성되지 않은 메서드가 있음을 의미하므로 인스턴스 생성 불가
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countPersonNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'Person' is abstract, cannot be instantiated&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메서드에 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;아직 구현부가 작성되지 않은 추상 메서드임을 알림&lt;/li&gt;
      &lt;li&gt;자식 클래스에서 추상 메서드를 오버라이딩 하도록 강제
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;countPersonNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Worker does not override abstract method countPersonNumber() in Person&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I'm working&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;h2 id=&quot;public-protected-private&quot;&gt;public, protected, private&lt;/h2&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;접근 제어자가 사용될 수 있는 곳: 클래스, 변수, 메서드, 생성자&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public: 접근 제한이 전혀 없음
protected: 같은 패키지 내에서는 접근 제한 없음, 다른 패키지인 경우 자식 클래스 한정
(default): 같은 패키지 내에서는 접근 제한 없음
private: 같은 클래스 내에서만 접근 가능
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러한 접근 제어자를 사용하는 경우는 보통 다른 클래스나 패키지에서의 &lt;strong&gt;접근을 제한하기 위한 용도&lt;/strong&gt;로 사용합니다. 이렇게 접근을 제한하는 것을 객체지향에서 &lt;strong&gt;캡슐화&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;p&gt;이런 경우 보통 변수는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt;로 접근 범위를 제한하고, 읽기 메서드(getter), 쓰기 메서드(setter)는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;으로 제공함으로써 변수를 다룰 수 있도록 합니다.&lt;/p&gt;

&lt;h1 id=&quot;다형성&quot;&gt;다형성&lt;/h1&gt;
&lt;p&gt;다형성이란 ‘여러 가지 형태를 가질 수 있는 능력’을 의미합니다. 다형성은 객체지향 코드의 가장 큰 장점이라고 할 수 있습니다. 자바에서 다형성은 하나의 공통적인 역할을 하는 클래스를 인터페이스로 정의하고, 그 인터페이스를 구현하는 다양한 클래스를 만드는 방식을 의미합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/java_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 다향성을 가지도록 코드를 작성하게 되면 다음과 같은 이점을 얻을 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스만 알아도 다른 쪽에서 무리없이 개발할 수 있다
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HyundaiCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TeslaCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 무슨 차인지 모르더라도 Car로 두고 개발을 지속할 수 있다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/java_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 이유로 코드의 확장성이 좋아진다
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;차가 출발합니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;차를 멈춥니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;일반 모드&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HyundaiCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hyundaiMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;현대차 모드&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TeslaCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teslaMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테슬라 모드&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 구현체를 인터페이스의 공통된 타입을 이용해 매개변수로 받을 수 있다
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HyundaiCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TeslaCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;agrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HyundaiCar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HyundaiCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;TeslaCar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TeslaCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 매개변수의 타입을 Car로 하면 HyundaiCar, TeslaCar 모두 인자로 받을 수 있다&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;추상-클래스&quot;&gt;추상 클래스&lt;/h1&gt;
&lt;p&gt;추상 클래스는 클래스에 &lt;strong&gt;완성되지 않은 메서드가 있음을 명시적으로 알리고 이를 자식클래스에서 반드시 오버라이딩하도록 하는 부모클래스의 일종&lt;/strong&gt;입니다. 추상 클래스는 완성되지 않은 부분을 가지고 있는 클래스이기 때문에 &lt;strong&gt;인스턴스를 생성할 수 없습니다&lt;/strong&gt;. 인스턴스 생성을 자신을 상속받는 자식클래스에게 위임합니다. (부모클래스의 불완전함을 자식클래스가 이어받아 개선하여 최종적으로 인스턴스를 생성한다)&lt;/p&gt;

&lt;p&gt;추상 클래스를 만드는 방법은 클래스 선언부와 완성되지 않은 메서드의 선언부에 각각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abstract&lt;/code&gt; 키워드를 붙입니다. 메서드에는 구현부가 없으므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;를 생략합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HyundaiCar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @Override 어노테이션은 필수 아님, but 컴파일 오류 체크해주므로 권장&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;현대차 모드&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;인터페이스&quot;&gt;인터페이스&lt;/h1&gt;
&lt;p&gt;인터페이스는 일종의 추상클래스입니다. 추상클래스에는 메서드 중 일부가 구현되어 있지 않았던 반면, 인터페이스는 가지고 있는 &lt;strong&gt;모든 메서드에 구현부가 없습니다&lt;/strong&gt;. 인터페이스는 &lt;strong&gt;오직 추상메서드와 상수만&lt;/strong&gt;을 멤버로 가질 수 있습니다.&lt;/p&gt;

&lt;p&gt;인터페이스 예시는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 모든 멤버변수는 public static final이어야 함. 생략 가능&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numWheel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 모든 메서드는 public abstract. 생략 가능&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추상 클래스는 자식클래스가 상속받는다고 표현했습니다. 인터페이스는 &lt;strong&gt;구현(implements)한다고 표현&lt;/strong&gt;합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hyundai&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;차가 달립니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인터페이스는 위에서 배웠던 &lt;strong&gt;다형성을 위한 목적&lt;/strong&gt;으로 주로 사용됩니다.&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;mallGb=KOR&amp;amp;barcode=9788994492049&amp;amp;orderClick=LAG&amp;amp;Kc=&quot; target=&quot;_blank&quot;&gt;남궁성, 자바의 정석 책&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 18 May 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/java-series10</link>
                <guid isPermaLink="true">http://localhost:4000/java-series10</guid>
                
                <category>Java</category>
                
                
                <category>programming_language</category>
                
            </item>
        
            <item>
                <title>Data Engineering Series [Part9]: 정규표현식(2) 문자 반복</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#문자-반복&quot; id=&quot;markdown-toc-문자-반복&quot;&gt;문자 반복&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#or--&quot; id=&quot;markdown-toc-or--&quot;&gt;OR : |&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#0회-이상-반복--&quot; id=&quot;markdown-toc-0회-이상-반복--&quot;&gt;0회 이상 반복 : *&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#1회-이상-반복--&quot; id=&quot;markdown-toc-1회-이상-반복--&quot;&gt;1회 이상 반복 : +&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#n회-이상-m회-이하-반복--n-m&quot; id=&quot;markdown-toc-n회-이상-m회-이하-반복--n-m&quot;&gt;n회 이상 m회 이하 반복 : {n, m}&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#0회-또는-1회-반복--&quot; id=&quot;markdown-toc-0회-또는-1회-반복--&quot;&gt;0회 또는 1회 반복 : ?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#탐욕정량자-나태정량자&quot; id=&quot;markdown-toc-탐욕정량자-나태정량자&quot;&gt;탐욕정량자, 나태정량자&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;문자-반복&quot;&gt;문자 반복&lt;/h1&gt;

&lt;h2 id=&quot;or--&quot;&gt;OR : |&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0회-이상-반복--&quot;&gt;0회 이상 반복 : *&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* : 바로 앞에 있는 문자가 0회 이상 반복되는 부분과 매칭됩니다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one*&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oneee&lt;/code&gt;와 같은 문자에 매칭됩니다.&lt;/p&gt;

&lt;h2 id=&quot;1회-이상-반복--&quot;&gt;1회 이상 반복 : +&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ : 바로 앞에 있는 문자가 1회 이상 반복되는 부분과 매칭됩니다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one+&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;가 최소 한 번 이상 등장하는 부분과 매칭되기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oneee&lt;/code&gt;와 같은 문자에 매칭됩니다.&lt;/p&gt;

&lt;h2 id=&quot;n회-이상-m회-이하-반복--n-m&quot;&gt;n회 이상 m회 이하 반복 : {n, m}&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{n, m} : 바로 앞에 있는 문자가 n회 이상 m회 이하 반복되는 부분과 매칭됩니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0회-또는-1회-반복--&quot;&gt;0회 또는 1회 반복 : ?&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;? : 바로 앞에 있는 문자가 0회 이상 1회 이하 반복되는 부분과 매칭됩니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/regex_21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;탐욕정량자-나태정량자&quot;&gt;탐욕정량자, 나태정량자&lt;/h2&gt;

&lt;p&gt;기본적으로 모든 정량자(*, +, {n, m}, ?)는 탐욕정량자입니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;탐욕정량자 : 일치되는 부분을 찾을 때 최대한 많이 일치되도록 합니다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/regex_22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;나태정량자 : 정량자 뒤에 ?를 붙여주면 됩니다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/regex_23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://greeksharifa.github.io/정규표현식(re)/2018/07/20/regex-usage-01-basic/&quot; target=&quot;_blank&quot;&gt;greeksharifa, 파이썬 정규표현식(re) 사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexone.com&quot; target=&quot;_blank&quot;&gt;regexone: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexr.com&quot; target=&quot;_blank&quot;&gt;regexr: 정규표현식 테스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexper.com&quot; target=&quot;_blank&quot;&gt;regexper: 정규표현식 시각화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/11&quot; target=&quot;_blank&quot;&gt;프로그래머스: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/workbook/view/6082&quot; target=&quot;_blank&quot;&gt;백준: 정규표현식 문제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 18 May 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series9</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series9</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
    </channel>
</rss>