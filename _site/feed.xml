<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Code Museum</title>
        <description>Jay Tech personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 14 Oct 2022 00:05:36 +0900</pubDate>
        <lastBuildDate>Fri, 14 Oct 2022 00:05:36 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>Data Engineering Series [Part28]: 데이터 파이프라인과 장애</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터-파이프라인-구축을-위한-개략도&quot; id=&quot;markdown-toc-데이터-파이프라인-구축을-위한-개략도&quot;&gt;데이터 파이프라인 구축을 위한 개략도&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터-파이프라인의-안정성을-높이려면&quot; id=&quot;markdown-toc-데이터-파이프라인의-안정성을-높이려면&quot;&gt;데이터 파이프라인의 안정성을 높이려면&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#필요한-것&quot; id=&quot;markdown-toc-필요한-것&quot;&gt;필요한 것&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#모니터링&quot; id=&quot;markdown-toc-모니터링&quot;&gt;모니터링&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#감지--알람&quot; id=&quot;markdown-toc-감지--알람&quot;&gt;감지 + 알람&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cicd&quot; id=&quot;markdown-toc-cicd&quot;&gt;CI/CD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#유효성-검사&quot; id=&quot;markdown-toc-유효성-검사&quot;&gt;유효성 검사&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#자동화&quot; id=&quot;markdown-toc-자동화&quot;&gt;자동화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#그럼에도-장애가-발생했다면&quot; id=&quot;markdown-toc-그럼에도-장애가-발생했다면&quot;&gt;그럼에도 장애가 발생했다면&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;데이터-파이프라인-구축을-위한-개략도&quot;&gt;데이터 파이프라인 구축을 위한 개략도&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/all_for_data_engineer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터-파이프라인의-안정성을-높이려면&quot;&gt;데이터 파이프라인의 안정성을 높이려면&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;모니터링할 수 있어야 한다(에러 로그 + 컴퓨팅 자원 시각화한 대시보드)&lt;/li&gt;
  &lt;li&gt;장애를 감지할 수 있어야 한다 + 알람 기능&lt;/li&gt;
  &lt;li&gt;CI/CD하는 과정에서 테스트 하는 과정이 수반되어야 한다&lt;/li&gt;
  &lt;li&gt;각 컴포넌트 + 유저단에서 데이터 유효성 검사가 필요하다 (데이터 타입, 제약사항 준수여부, 데이터 품질)&lt;/li&gt;
  &lt;li&gt;장애 복구가 가능해야 한다&lt;/li&gt;
  &lt;li&gt;위의 과정들이 구조화/자동화 되어야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;필요한-것&quot;&gt;필요한 것&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Prometheus, Grafana&lt;/li&gt;
  &lt;li&gt;Pytest&lt;/li&gt;
  &lt;li&gt;Airflow&lt;/li&gt;
  &lt;li&gt;Jenkins&lt;/li&gt;
  &lt;li&gt;Slack&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;모니터링&quot;&gt;모니터링&lt;/h1&gt;

&lt;h1 id=&quot;감지--알람&quot;&gt;감지 + 알람&lt;/h1&gt;

&lt;h1 id=&quot;cicd&quot;&gt;CI/CD&lt;/h1&gt;

&lt;h1 id=&quot;유효성-검사&quot;&gt;유효성 검사&lt;/h1&gt;

&lt;h1 id=&quot;자동화&quot;&gt;자동화&lt;/h1&gt;

&lt;h1 id=&quot;그럼에도-장애가-발생했다면&quot;&gt;그럼에도 장애가 발생했다면&lt;/h1&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bmc.com/blogs/resilient-data-pipelines/&quot; target=&quot;_blank&quot;&gt;bmc blogs, 3 Keys to Building Resilient Data Pipelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7GI6LHZsUX0&quot; target=&quot;_blank&quot;&gt;Youtube, Testing data pipelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.startdataengineering.com/post/how-to-add-tests-to-your-data-pipeline/&quot; target=&quot;_blank&quot;&gt;How to add tests to your data pipelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@moey920/%EC%95%88%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9A%B4%EC%98%81%EC%9D%84-%EC%99%84%EC%84%B1%ED%95%98%EB%8A%94-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81.-%ED%94%84%EB%A1%9C%EB%A9%94%ED%85%8C%EC%9A%B0%EC%8A%A4%EC%99%80-%EA%B7%B8%EB%9D%BC%ED%8C%8C%EB%82%98&quot; target=&quot;_blank&quot;&gt;moey920.log, 안정적인 운영을 완성하는 모니터링, 프로메테우스와 그라파나&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 06 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/data-engineering-series28</link>
                <guid isPermaLink="true">http://localhost:4000/data-engineering-series28</guid>
                
                <category>Data_Engineering</category>
                
                
                <category>DE</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part9]: Data Engineering(2)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;PostgreSQL의 장점은 무엇일까요?&lt;/li&gt;
  &lt;li&gt;인덱스는 크게 Hash 인덱스와 B+Tree 인덱스가 있습니다. 이것은 무엇일까요?&lt;/li&gt;
  &lt;li&gt;인덱스 Scan 방식은 무엇이 있나요?&lt;/li&gt;
  &lt;li&gt;인덱스 설계시 NULL값은 고려되야 할까요?&lt;/li&gt;
  &lt;li&gt;Nested Loop 조인은 무엇일까요?&lt;/li&gt;
  &lt;li&gt;Windows 함수는 무엇이고 어떻게 작성할까요?&lt;/li&gt;
  &lt;li&gt;MySQL에서 대량의 데이터(500만개 이상)를 Insert해야하는 경우엔 어떻게 해야할까요?&lt;/li&gt;
  &lt;li&gt;RDB의 char와 varchar의 차이는 무엇일까요?&lt;/li&gt;
  &lt;li&gt;구글의 BigQuery, AWS의 Redshift는 기존 RDB와 무슨 차이가 있을까요? 왜 빠를까요?&lt;/li&gt;
  &lt;li&gt;쿼리의 성능을 확인하기 위해 어떤 쿼리문을 작성해야 할까요?&lt;/li&gt;
  &lt;li&gt;MySQL이 요새 느리다는 신고가 들어왔습니다. 첫번째로 무엇을 확인하시고 조정하시겠나요?&lt;/li&gt;
  &lt;li&gt;동작하는 MySQL에 Alter table을 하면 안되는 이유를 설명해주세요. 그리고 대안을 설명해주세요&lt;/li&gt;
  &lt;li&gt;빡세게 동작하고 있는 MySQL을 백업뜨기 위해서는 어떤 방법이 필요할까요?&lt;/li&gt;
  &lt;li&gt;Apache Beam에 대해 아시나요? 기존 하둡과 어떤 차이가 있을까요?&lt;/li&gt;
  &lt;li&gt;좋게 만들어진 MapReduce는 어떤 프로그램일까요? 데이터의 Size 변화의 관점에서 설명할 수 있을까요?&lt;/li&gt;
  &lt;li&gt;여러 MR작업의 연쇄로 최종결과물이 나올때, 중간에 작업이 Fail날수 있습니다. 작업의 Fail은 어떻게 모니터링 하시겠습니까? 작업들간의 dependency는 어떻게 해결하시겠습니까?&lt;/li&gt;
  &lt;li&gt;분산환경의 JOIN은, 보통 디스크, CPU, 네트워크 중 어디에서 병목이 발생할까요? 이를 해결하기 위해 무엇을 해야 할까요?&lt;/li&gt;
  &lt;li&gt;암달의 법칙에 대해 말해봅시다. 그러므로 왜 shared-nothing 구조로 만들어야 하는지 설명해봅시다.&lt;/li&gt;
  &lt;li&gt;shared-nothing 구조의 단점도 있습니다. 어떤 것이 해당할까요?&lt;/li&gt;
  &lt;li&gt;Spark이 Hadoop보다 빠른 이유를 I/O 최적화 관점에서 생각해봅시다.&lt;/li&gt;
  &lt;li&gt;카산드라는 망한것 같습니다. 왜 망한것 같나요? 그래도 활용처가 있다면 어디인것 같나요.&lt;/li&gt;
  &lt;li&gt;TB 단위 이상의 기존 데이터와 시간당 GB단위의 신생 로그가 들어오는 서비스에서 모든 가입자에게 개별적으로 계산된 실시간 서비스(웹)를 제공하기 위한 시스템 구조를 구상해봅시다.&lt;/li&gt;
  &lt;li&gt;대용량 자료를 빠르게 lookup해야 하는 일이 있습니다. (100GB 이상, 100ms언더로 특정자료 찾기). 어떤 백엔드를 사용하시겠나요? 느린 백엔드를 사용한다면 이를 보완할 방법은 뭐가 있을까요?&lt;/li&gt;
  &lt;li&gt;데이터를 여러 머신으로 부터 모으기 위해 여러 선택지가 있을 수 있습니다. (flume, fluentd등) 아예 소스로부터 kafka등의 메시징 시스템을 바로 쓸 수도 있습니다. 어떤 것을 선호하시나요? 왜죠?&lt;/li&gt;
  &lt;li&gt;K8s가 무엇인가요?&lt;/li&gt;
  &lt;li&gt;CD/CD가 무엇인가요? &amp;gt; 사용한 경험 같이 설명(Jenkins)&lt;/li&gt;
  &lt;li&gt;NAT(Bridge)가 무엇인가?&lt;/li&gt;
  &lt;li&gt;AWS 중에 어떤 것을 사용해보았는가?&lt;/li&gt;
  &lt;li&gt;GIT을 써보았는가? &amp;gt; 사용한 경험 같이 설명&lt;/li&gt;
  &lt;li&gt;wh가 무엇인가요?&lt;/li&gt;
  &lt;li&gt;rdb가 무엇인가요?&lt;/li&gt;
  &lt;li&gt;rdb와 wh 차이점에 대해 설명해보세요&lt;/li&gt;
  &lt;li&gt;ETL, ELT의 차이에 대해 설명하고, 각각의 장점에 대해 설명해보세요&lt;/li&gt;
  &lt;li&gt;모니터링 서비스 사용경험? &amp;gt; 프로메테우스 그라파나에서 컴퓨터 문제가 생겼다고 하면 후처리를 어떻게 할 것인지&lt;/li&gt;
  &lt;li&gt;KAFKA 설명 &amp;gt; KAFKA 로드밸런싱을 한 이유, 내,외부 네트워크를 나눈 이유&lt;/li&gt;
  &lt;li&gt;사용한 저장소 설명(ES, HDFS, S3) &amp;gt; 여러개를 사용한 이유&lt;/li&gt;
  &lt;li&gt;ELK(EFK) Stack을 사용한 이유&lt;/li&gt;
  &lt;li&gt;DDP 설명&lt;/li&gt;
  &lt;li&gt;왜 ELK를 사용했는가?&lt;/li&gt;
  &lt;li&gt;자신이 ETL 만든 것중 가장 잘 만든 것은?&lt;/li&gt;
  &lt;li&gt;BigData가 무엇인가?&lt;/li&gt;
  &lt;li&gt;RDMBS 뭐 사용해봤는지&lt;/li&gt;
  &lt;li&gt;RDMBS의 장점은(정형 데이터 vs 비정형 데이터)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Team-Neighborhood/I-want-to-study-Data-Science/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4&quot; target=&quot;_blank&quot;&gt;Team-Neighborhood/I-want-to-study-Data-Science데이터 엔지니어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/data/2018/02/17/datascience-interivew-questions/#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;zzsza, 데이터 사이언스 인터뷰 질문 모음집&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OBenner/data-engineering-interview-questions&quot; target=&quot;_blank&quot;&gt;OBenner/data-engineering-interview-questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@spamdong/%EB%A9%B4%EC%A0%91-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8&quot; target=&quot;_blank&quot;&gt;spamdong, [면접] 데이터 엔지니어 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@spamdong/%EB%A9%B4%EC%A0%91-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B82&quot; target=&quot;_blank&quot;&gt;spamdong, [면접] 데이터 엔지니어 면접 질문2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/sunny_86_/221503974389&quot; target=&quot;_blank&quot;&gt;[인터뷰] 하둡 관련 면접 질문 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shelling203.tistory.com/33?category=304167&quot; target=&quot;_blank&quot;&gt;shelling203, Spark 기술 면접 질문&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series9</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series9</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part8]: Data Engineering(1)</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#database-data-lake-data-warehouse&quot; id=&quot;markdown-toc-database-data-lake-data-warehouse&quot;&gt;Database, Data Lake, Data Warehouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rdbms-vs-nosql&quot; id=&quot;markdown-toc-rdbms-vs-nosql&quot;&gt;RDBMS vs NoSQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#row-base-vs-column-base&quot; id=&quot;markdown-toc-row-base-vs-column-base&quot;&gt;Row base vs Column base&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oltp-vs-olap&quot; id=&quot;markdown-toc-oltp-vs-olap&quot;&gt;OLTP vs OLAP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hadoop&quot; id=&quot;markdown-toc-hadoop&quot;&gt;Hadoop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#elk&quot; id=&quot;markdown-toc-elk&quot;&gt;ELK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#distributed-system&quot; id=&quot;markdown-toc-distributed-system&quot;&gt;Distributed System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;database-data-lake-data-warehouse&quot;&gt;Database, Data Lake, Data Warehouse&lt;/h1&gt;

&lt;h1 id=&quot;rdbms-vs-nosql&quot;&gt;RDBMS vs NoSQL&lt;/h1&gt;

&lt;h1 id=&quot;row-base-vs-column-base&quot;&gt;Row base vs Column base&lt;/h1&gt;

&lt;h1 id=&quot;oltp-vs-olap&quot;&gt;OLTP vs OLAP&lt;/h1&gt;

&lt;h1 id=&quot;hadoop&quot;&gt;Hadoop&lt;/h1&gt;

&lt;h1 id=&quot;elk&quot;&gt;ELK&lt;/h1&gt;

&lt;h1 id=&quot;distributed-system&quot;&gt;Distributed System&lt;/h1&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series8</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series8</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part7]: Python</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#파이썬-관련-질문&quot; id=&quot;markdown-toc-파이썬-관련-질문&quot;&gt;파이썬 관련 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#파이썬-문법&quot; id=&quot;markdown-toc-파이썬-문법&quot;&gt;파이썬 문법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#객체지향&quot; id=&quot;markdown-toc-객체지향&quot;&gt;객체지향&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#내부-동작&quot; id=&quot;markdown-toc-내부-동작&quot;&gt;내부 동작&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;제가 예전에 한국계 일본 메신저 기업에 면접을 볼때 면접관이 저에게 한 말이 있습니다.&lt;/p&gt;

&lt;p&gt;“저는 리드 개발자입니다. 하지만 이 면접에서 만큼은  아무 것도 모른다고 가정하겠습니다. 저를 디자이너 출신 기획자라고 생각하고 답변해주세요. 당신은 수많은 개발자들과 협업을 할텐데, 그렇게 되면 당신의 커뮤니케이션 능력 역시 우리게엔 중요합니다.”&lt;/p&gt;

&lt;h1 id=&quot;파이썬-관련-질문&quot;&gt;파이썬 관련 질문&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬의 주요 특징에 대해 이야기 해보세요&lt;/li&gt;
  &lt;li&gt;파이썬에서 list와 tuple의 차이점에 대해 말해보세요&lt;/li&gt;
  &lt;li&gt;파이썬의 삼향연산자(ternary operator)에 대해 설명하세요&lt;/li&gt;
  &lt;li&gt;파이썬에게 어떤 약점이 있나요?&lt;/li&gt;
  &lt;li&gt;파이썬에서 현재 작업중인 디렉토리를 확인하는 방법이 무엇인가요?&lt;/li&gt;
  &lt;li&gt;컴파일 언어와 인터프리터 언어의 차이점에 대해 설명하세요&lt;/li&gt;
  &lt;li&gt;파이썬에는 .pyc 파일이 있습니다. .py 파일과의 차이점을 설명하세요&lt;/li&gt;
  &lt;li&gt;파이썬은 객체지향 입니까? 왜 그렇습니까?&lt;/li&gt;
  &lt;li&gt;try… except… else 구문에서 else는 언제 실행되나요?&lt;/li&gt;
  &lt;li&gt;list append 와 list extend 의 차이점을 설명하세요&lt;/li&gt;
  &lt;li&gt;Python 에서 map() 함수는 어떤 역할을 하나요?&lt;/li&gt;
  &lt;li&gt;try…raise…finally 구문이 어떻게 작동하는지 설명해 주세요&lt;/li&gt;
  &lt;li&gt;파이썬에서 언더스코어(_) 는 언제 사용하나요?&lt;/li&gt;
  &lt;li&gt;파이썬에서 switch… case 구문을 구현해 보았나요? 어떻게 하셨나요?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;파이썬-문법&quot;&gt;파이썬 문법&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;이터레이터&lt;/li&gt;
  &lt;li&gt;제너레이터&lt;/li&gt;
  &lt;li&gt;타입 힌트&lt;/li&gt;
  &lt;li&gt;아스테리스크(*)&lt;/li&gt;
  &lt;li&gt;컨텍스트 매니저&lt;/li&gt;
  &lt;li&gt;스코프&lt;/li&gt;
  &lt;li&gt;데코레이터&lt;/li&gt;
  &lt;li&gt;코루틴&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;객체지향&quot;&gt;객체지향&lt;/h1&gt;

&lt;h1 id=&quot;내부-동작&quot;&gt;내부 동작&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;GIL&lt;/li&gt;
  &lt;li&gt;GC&lt;/li&gt;
  &lt;li&gt;CPython vs PyPy&lt;/li&gt;
  &lt;li&gt;유니코드와 UTF-8&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-1%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 1편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series7</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series7</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part6]: Computer Architecture</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;컴퓨터의 구성&lt;/li&gt;
  &lt;li&gt;중앙처리장치(CPU) 작동 원리&lt;/li&gt;
  &lt;li&gt;캐시 메모리(Cache Memory)&lt;/li&gt;
  &lt;li&gt;고정 소수점 &amp;amp; 부동 소수점&lt;/li&gt;
  &lt;li&gt;패리티 비트 &amp;amp; 해밍 코드&lt;/li&gt;
  &lt;li&gt;ARM 프로세서&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview&quot; target=&quot;_blank&quot;&gt;WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gyoogle.dev/blog/guide/%EB%A9%B4%EC%A0%91%20%EC%A4%80%EB%B9%84.html&quot; target=&quot;_blank&quot;&gt;gyoogle, Tech Interview 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blex.me/@baealex/%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%B4-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-%EC%A4%80%EB%B9%84&quot; target=&quot;_blank&quot;&gt;배진오, 신입 개발자 기술면접 준비하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syujisu.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EB%AC%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8?category=871132&quot; target=&quot;_blank&quot;&gt;exp_blog, 데이터베이스 직무 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/88&quot; target=&quot;_blank&quot;&gt;망나니 개발자 CS 준비&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series6</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series6</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part5]: Database</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#트랜잭션&quot; id=&quot;markdown-toc-트랜잭션&quot;&gt;트랜잭션&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#트랜잭션의-4가지-특성-acid&quot; id=&quot;markdown-toc-트랜잭션의-4가지-특성-acid&quot;&gt;트랜잭션의 4가지 특성: ACID&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mysql-스토리지-엔진&quot; id=&quot;markdown-toc-mysql-스토리지-엔진&quot;&gt;MySQL 스토리지 엔진&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스틸과-포스정책&quot; id=&quot;markdown-toc-스틸과-포스정책&quot;&gt;스틸과 포스정책&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#잠금과-격리수준&quot; id=&quot;markdown-toc-잠금과-격리수준&quot;&gt;잠금과 격리수준&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#인덱스&quot; id=&quot;markdown-toc-인덱스&quot;&gt;인덱스&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#인덱스-적용-기준&quot; id=&quot;markdown-toc-인덱스-적용-기준&quot;&gt;인덱스 적용 기준&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#인덱스의-데이터-탐색-방식&quot; id=&quot;markdown-toc-인덱스의-데이터-탐색-방식&quot;&gt;인덱스의 데이터 탐색 방식&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#성능-개선&quot; id=&quot;markdown-toc-성능-개선&quot;&gt;성능 개선&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#쿼리-최적화&quot; id=&quot;markdown-toc-쿼리-최적화&quot;&gt;쿼리 최적화&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#서버-설정&quot; id=&quot;markdown-toc-서버-설정&quot;&gt;서버 설정&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터베이스-모델링&quot; id=&quot;markdown-toc-데이터베이스-모델링&quot;&gt;데이터베이스 모델링&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#데이터베이스-일문일답&quot; id=&quot;markdown-toc-데이터베이스-일문일답&quot;&gt;데이터베이스 일문일답&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#index&quot; id=&quot;markdown-toc-index&quot;&gt;Index&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#정규화에-대해서&quot; id=&quot;markdown-toc-정규화에-대해서&quot;&gt;정규화에 대해서&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#transaction&quot; id=&quot;markdown-toc-transaction&quot;&gt;Transaction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#교착상태&quot; id=&quot;markdown-toc-교착상태&quot;&gt;교착상태&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sql&quot; id=&quot;markdown-toc-sql&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nosql&quot; id=&quot;markdown-toc-nosql&quot;&gt;NoSQL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h1&gt;
&lt;h2 id=&quot;트랜잭션의-4가지-특성-acid&quot;&gt;트랜잭션의 4가지 특성: ACID&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;트랜잭션: 여러 데이터의 변경 사항을 하나의 논리적인 작업 단위로 묶은 것&lt;/li&gt;
  &lt;li&gt;트랜잭션의 4가지 특성: ACID&lt;/li&gt;
  &lt;li&gt;Atomicity
    &lt;ul&gt;
      &lt;li&gt;트랜잭션으로 묶인 데이터의 변경 사항은 모두 반영되거나 하나도 반영되지 않아야 한다 (All or Nothing)&lt;/li&gt;
      &lt;li&gt;만약 Commit 하기로 했다면 모든 변경 사항에 대한 리두로그가 플러시 되거나, 더티 페이지가 플러시 되어야 한다&lt;/li&gt;
      &lt;li&gt;만약 Rollback 하기로 했다면 언두 로그 파일 데이터를 이용해 다시 DB를 롤백해야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Isolation
    &lt;ul&gt;
      &lt;li&gt;하나의 트랜잭션 처리가 다른 트랜잭션에 영향을 주거나 받아서는 안된다&lt;/li&gt;
      &lt;li&gt;실무에서는 격리 수준에 따라 정도가 달라진다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Durability
    &lt;ul&gt;
      &lt;li&gt;커밋된 데이터는 장애가 발생하더라도 DB에 반영되어야 한다&lt;/li&gt;
      &lt;li&gt;InnoDB 버퍼 풀에 데이터를 커밋했으면 다른 트랜잭션에서는 커밋된 데이터를 읽어갈 것&lt;/li&gt;
      &lt;li&gt;디스크에 플러시 되기 전에 장애가 나더라도 리두 로그를 미리 플러시 해둠으로써 복구 가능하도록&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mysql-스토리지-엔진&quot;&gt;MySQL 스토리지 엔진&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;InnoDB Buffer Pool
    &lt;ul&gt;
      &lt;li&gt;데이터의 변경사항을 메모리에 캐시하는 공간&lt;/li&gt;
      &lt;li&gt;데이터를 디스크에 플러시하기 전에 버퍼하는 역할&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Change Buffer
    &lt;ul&gt;
      &lt;li&gt;세컨더리 인덱스 페이지의 변경사항을 버퍼하는 공간&lt;/li&gt;
      &lt;li&gt;나중에 InnoDB 버퍼 풀에 인덱스 페이지 생기면 병합&lt;/li&gt;
      &lt;li&gt;쓰기 작업 많은 환경에 도움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Log Buffer
    &lt;ul&gt;
      &lt;li&gt;데이터 변경사항으로 발생한 로그를 버퍼해 두는 공간&lt;/li&gt;
      &lt;li&gt;트랜잭션 처리 vs 성능 간의 트레이드 오프를 조절&lt;/li&gt;
      &lt;li&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_log_buffer_size&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;innodb_flush_log_at_trx_commit&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Redo Log
    &lt;ul&gt;
      &lt;li&gt;데이터의 변경사항을 기록하는 디스크 기반 자료구조&lt;/li&gt;
      &lt;li&gt;커밋된 후 장애가 발생하더라도 Redo Log를 바탕으로 복구 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Undo Log
    &lt;ul&gt;
      &lt;li&gt;데이터의 변경 이전의 데이터를 기록해두는 디스크 기반 자료구조&lt;/li&gt;
      &lt;li&gt;롤백될 경우 Undo Log를 바탕으로 데이터를 되돌린다&lt;/li&gt;
      &lt;li&gt;트랜잭션간의 Isolation을 위해 Undo Log에 기록된 변경 이전의 데이터를 보여준다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Durability는 InnoDB Buffer Pool, Log Buffer와 같은 버퍼가 어떤 주기로 플러시 되느냐에 따라 달라진다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;스틸과-포스정책&quot;&gt;스틸과 포스정책&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Log Buffer가 아닌 &lt;strong&gt;InnoDB Buffer Pool 의 플러시 주기&lt;/strong&gt;는 어떻게 결정될까? =&amp;gt; 스틸과 포스 정책&lt;/li&gt;
  &lt;li&gt;Log Buffer가 다 차기 전에 InnoDB Buffer Pool이 먼저 다 찰 수도 있다&lt;/li&gt;
  &lt;li&gt;(Log Buffer는 변경 사항에 대한 로깅만 하면 되지만, InnoDB Buffer Pool은 페이지 단위로 메모리에 올린다)&lt;/li&gt;
  &lt;li&gt;(그래서 하나의 트랜잭션이 변경 사항은 적은데 여러 페이지에서 발생하는 문제로 페이지를 많이 가져와야 할 수도 있다)&lt;/li&gt;
  &lt;li&gt;대부분의 RDBMS는 &lt;strong&gt;스틸과 노-포스 정책&lt;/strong&gt;을 취한다&lt;/li&gt;
  &lt;li&gt;스틸 정책
    &lt;ul&gt;
      &lt;li&gt;트랜잭션이 완료되기 전이라도 언제든 더티 페이지를 플러시 할 수 있다 (-&amp;gt; 롤백을 대비해 반드시 Undo Log 있어야함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;노-포스 정책
    &lt;ul&gt;
      &lt;li&gt;트랜잭션이 커밋된다고 해도 더티 페이지를 무조건 플러시할 필요는 없다 (무조건 플러시하도록 하면 성능이 떨어진다)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;트랜잭션 완료 전에도 필요하면 InnoDB Buffer Pool에 있는 더티 페이지를 플러시할 수 있지만,&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;그렇다고 트랜잭션이 완료됐다고 반드시 플러시할 필요는 없다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;잠금과-격리수준&quot;&gt;잠금과 격리수준&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;잠금과 격리수준은 트랜잭션의 &lt;strong&gt;Isolation&lt;/strong&gt;과 깊은 관련이 있다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;잠금은 레코드 쓰기와 관련&lt;/strong&gt;된 Isolation, &lt;strong&gt;격리수준은 레코드 읽기와 관련&lt;/strong&gt;된 Isolation이다&lt;/li&gt;
  &lt;li&gt;잠금
    &lt;ul&gt;
      &lt;li&gt;하나의 레코드를 여러 커넥션에서 동시에 변경하지 못하게 한다&lt;/li&gt;
      &lt;li&gt;스토리지 엔진 종류마다 테이블 잠금, 레코드 잠금, 인덱스 잠금 등이 있다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;InnoDB는 인덱스 잠금을 사용&lt;/strong&gt;한다&lt;/li&gt;
      &lt;li&gt;다른 커넥션에서 같은 레코드여도 해당 인덱스를 쓸 일이 없으면 접근 가능 =&amp;gt; 다른 잠금보다 훨씬 성능이 좋다&lt;/li&gt;
      &lt;li&gt;만약 인덱스가 없으면 모든 레코드를 스캔해야 하므로 전체 레코드 잠금이 걸리게 된다 =&amp;gt; 인덱스 설계가 중요하다ㅓ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;격리수준
    &lt;ul&gt;
      &lt;li&gt;서로 다른 트랜잭션간의 읽기를 어떻게 제공할지에 관한 설정이다&lt;/li&gt;
      &lt;li&gt;오라클 DB는 READ COMMITTED, MySQL은 REATABLE READ를 주로 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/mvcc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;인덱스&quot;&gt;인덱스&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스는 DB의 쿼리 성능과 관련해서 빼놓을 수 없는 부분&lt;/li&gt;
  &lt;li&gt;인덱스는 탐색해야 하는 레코드의 건수를 줄여준다&lt;/li&gt;
  &lt;li&gt;인덱스의 자료구조적 특성은 &lt;strong&gt;B-Tree 형태&lt;/strong&gt;로 데이터가 &lt;strong&gt;정렬&lt;/strong&gt;되어 있다는 점이다&lt;/li&gt;
  &lt;li&gt;-&amp;gt; 장점은 빠른 읽기, 단점은 느린 쓰기이다&lt;/li&gt;
  &lt;li&gt;(해시 인덱스는 컬럼에 대한 해시값을 인덱스로 활용하는데 주로 메모리 기반 DB에서 사용한다)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인덱스-적용-기준&quot;&gt;인덱스 적용 기준&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;WHERE, JOIN, ORDER BY절에 많이 사용되는 컬럼&lt;/li&gt;
  &lt;li&gt;카디널리티가 높은 컬럼&lt;/li&gt;
  &lt;li&gt;테이블 규모가 크지만 읽어오는 데이터는 많지 않은 쿼리&lt;/li&gt;
  &lt;li&gt;MML 입장에서 인덱스는 성능은 떨어트리지만, 동시성 제어에서 잠금 측면에선 도움이 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인덱스의-데이터-탐색-방식&quot;&gt;인덱스의 데이터 탐색 방식&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스 레인지 스캔&lt;/li&gt;
  &lt;li&gt;인덱스 풀 스캔&lt;/li&gt;
  &lt;li&gt;인덱스 루스 스캔&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;성능-개선&quot;&gt;성능 개선&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;성능은 크게 &lt;strong&gt;쿼리 최적화&lt;/strong&gt;, &lt;strong&gt;서버 설정&lt;/strong&gt;을 통해 개선할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;쿼리-최적화&quot;&gt;쿼리 최적화&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;쿼리 최적화의 핵심은 옵티마이저가 인덱스를 쓰고 싶을 때, 가장 최적의 인덱스를 사용하도록 설계하는 것이다&lt;/li&gt;
  &lt;li&gt;쿼리 실행을 보고 싶을 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPLAIN (SELECT ...)&lt;/code&gt;, 인덱스 정보는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW INDEX ...&lt;/code&gt; 사용한다&lt;/li&gt;
  &lt;li&gt;쿼리 실행은
    &lt;ul&gt;
      &lt;li&gt;SQL 파서가 SQL을 트리 형태로 파싱&lt;/li&gt;
      &lt;li&gt;옵티마이저가 통계 정보를 이용해 실행 계획을 수립&lt;/li&gt;
      &lt;li&gt;스토리지 엔진이 실행 계획대로 레코드를 읽고 쓴다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;서버-설정&quot;&gt;서버 설정&lt;/h2&gt;

&lt;h1 id=&quot;데이터베이스-모델링&quot;&gt;데이터베이스 모델링&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;비즈니스 모델링: 비즈니스 룰을 정의한다 (ex. 유저는 하나의 주문에 하나의 리뷰만 달 수 있다)&lt;/li&gt;
  &lt;li&gt;논리적 모델링: 어떤 것을 테이블로 하고, 어떤 것을 컬럼으로 하고 테이블끼리의 관계를 어떻게 정의할지 정의한다&lt;/li&gt;
  &lt;li&gt;정규화: 논리적 모델링을 보수 공사한다&lt;/li&gt;
  &lt;li&gt;물리적 모델링: 테이블명, 컬럼명, 데이터 타입, 제약조건을 정의한다 (Schema, Table, Index 정의)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;데이터베이스-일문일답&quot;&gt;데이터베이스 일문일답&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 사용하는 이유&lt;/li&gt;
  &lt;li&gt;데이터베이스 성능&lt;/li&gt;
  &lt;li&gt;복제&lt;/li&gt;
  &lt;li&gt;파티셔닝&lt;/li&gt;
  &lt;li&gt;샤딩&lt;/li&gt;
  &lt;li&gt;ORM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;index&quot;&gt;Index&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Index 란 무엇인가&lt;/li&gt;
  &lt;li&gt;Index 의 자료구조&lt;/li&gt;
  &lt;li&gt;Primary index vs Secondary index&lt;/li&gt;
  &lt;li&gt;Composite index&lt;/li&gt;
  &lt;li&gt;Index 의 성능과 고려해야할 사항&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규화에-대해서&quot;&gt;정규화에 대해서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;정규화란 무엇인가&lt;/li&gt;
  &lt;li&gt;정규화의 종류&lt;/li&gt;
  &lt;li&gt;정규화의 장단점&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transaction&quot;&gt;Transaction&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;트랜잭션(Transaction)이란 무엇인가?&lt;/li&gt;
  &lt;li&gt;트랜잭션과 Lock&lt;/li&gt;
  &lt;li&gt;트랜잭션의 특성&lt;/li&gt;
  &lt;li&gt;트랜잭션을 사용할 때 주의할 점&lt;/li&gt;
  &lt;li&gt;트랜잭션 격리 수준&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;교착상태&quot;&gt;교착상태&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;교착상태란 무엇인가&lt;/li&gt;
  &lt;li&gt;교착상태의 예(MySQL)&lt;/li&gt;
  &lt;li&gt;교착 상태의 빈도를 낮추는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sql&quot;&gt;SQL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JOIN&lt;/li&gt;
  &lt;li&gt;Sargable&lt;/li&gt;
  &lt;li&gt;Optimizer&lt;/li&gt;
  &lt;li&gt;Statement vs PreparedStatement&lt;/li&gt;
  &lt;li&gt;SQL Injection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nosql&quot;&gt;NoSQL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;정의&lt;/li&gt;
  &lt;li&gt;CAP 이론: 일관성, 가용성, 네트워크 분할 허용성&lt;/li&gt;
  &lt;li&gt;저장방식에 따른 분류: Key-value, Document, Column&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview&quot; target=&quot;_blank&quot;&gt;WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gyoogle.dev/blog/guide/%EB%A9%B4%EC%A0%91%20%EC%A4%80%EB%B9%84.html&quot; target=&quot;_blank&quot;&gt;gyoogle, Tech Interview 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blex.me/@baealex/%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%B4-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-%EC%A4%80%EB%B9%84&quot; target=&quot;_blank&quot;&gt;배진오, 신입 개발자 기술면접 준비하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syujisu.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EB%AC%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8?category=871132&quot; target=&quot;_blank&quot;&gt;exp_blog, 데이터베이스 직무 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/88&quot; target=&quot;_blank&quot;&gt;망나니 개발자 CS 준비&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series5</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series5</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part4]: Network</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tcpip-4계층&quot; id=&quot;markdown-toc-tcpip-4계층&quot;&gt;TCP/IP 4계층&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#응용-계층-l7&quot; id=&quot;markdown-toc-응용-계층-l7&quot;&gt;응용 계층 (L7)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#전송-계층-l4&quot; id=&quot;markdown-toc-전송-계층-l4&quot;&gt;전송 계층 (L4)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#인터넷-계층-l3&quot; id=&quot;markdown-toc-인터넷-계층-l3&quot;&gt;인터넷 계층 (L3)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#http&quot; id=&quot;markdown-toc-http&quot;&gt;HTTP&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#http의-특징&quot; id=&quot;markdown-toc-http의-특징&quot;&gt;HTTP의 특징&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#url과-http-메서드&quot; id=&quot;markdown-toc-url과-http-메서드&quot;&gt;URL과 HTTP 메서드&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#http-헤더&quot; id=&quot;markdown-toc-http-헤더&quot;&gt;HTTP 헤더&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tcp&quot; id=&quot;markdown-toc-tcp&quot;&gt;TCP&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tcp-1&quot; id=&quot;markdown-toc-tcp-1&quot;&gt;TCP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#udp&quot; id=&quot;markdown-toc-udp&quot;&gt;UDP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ip&quot; id=&quot;markdown-toc-ip&quot;&gt;IP&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ip-주소&quot; id=&quot;markdown-toc-ip-주소&quot;&gt;IP 주소&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#서브넷-마스크subnet-mask&quot; id=&quot;markdown-toc-서브넷-마스크subnet-mask&quot;&gt;서브넷 마스크(Subnet Mask)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#네트워크-장비&quot; id=&quot;markdown-toc-네트워크-장비&quot;&gt;네트워크 장비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#응용편&quot; id=&quot;markdown-toc-응용편&quot;&gt;응용편&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#쿠키와-세션&quot; id=&quot;markdown-toc-쿠키와-세션&quot;&gt;쿠키와 세션&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dns&quot; id=&quot;markdown-toc-dns&quot;&gt;DNS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rest&quot; id=&quot;markdown-toc-rest&quot;&gt;REST&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#소켓&quot; id=&quot;markdown-toc-소켓&quot;&gt;소켓&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#로드-밸런싱&quot; id=&quot;markdown-toc-로드-밸런싱&quot;&gt;로드 밸런싱&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#용어&quot; id=&quot;markdown-toc-용어&quot;&gt;용어&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#nat&quot; id=&quot;markdown-toc-nat&quot;&gt;NAT&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#라우터&quot; id=&quot;markdown-toc-라우터&quot;&gt;라우터&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#게이트웨이&quot; id=&quot;markdown-toc-게이트웨이&quot;&gt;게이트웨이&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dhcp&quot; id=&quot;markdown-toc-dhcp&quot;&gt;DHCP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ipc-rpc-grpc&quot; id=&quot;markdown-toc-ipc-rpc-grpc&quot;&gt;IPC, RPC, gRPC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;tcpip-4계층&quot;&gt;TCP/IP 4계층&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷에서 컴퓨터들이 서로 정보를 주고 받는데 쓰이는 프로토콜의 모음을 프로토콜의 네트워킹 범위에 따라 4개로 계층화한 것&lt;/li&gt;
  &lt;li&gt;각 계층은 하위 계층의 기능만을 이용하고, 상위 계층에게 기능을 제공&lt;/li&gt;
  &lt;li&gt;일반적으로 하위 계층들은 하드웨어로, 상위 계층들은 소프트웨어로 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/tcp_ip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;응용-계층-l7&quot;&gt;응용 계층 (L7)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹 브라우저와 같은 사용자들이 사용하는 응용 프로그램에서 사용되는 계층&lt;/li&gt;
  &lt;li&gt;일반적인 응용 서비스는 관련된 응용 프로세스들 사이의 전환을 제공한다.&lt;/li&gt;
  &lt;li&gt;대표적인 프로토콜: FTP, HTTP, SSH, SMTP, DNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;전송-계층-l4&quot;&gt;전송 계층 (L4)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;전송 계층은 송신자와 수신자를 서로 연결(connection)하는 계층&lt;/li&gt;
  &lt;li&gt;양 끝단(End to end)의 사용자들이 신뢰성있는 데이터를 주고 받을 수 있도록 해준다&lt;/li&gt;
  &lt;li&gt;상위 계층들이 데이터 전달의 유효성이나 효율성을 생각하지 않도록 해준다&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위는 Segment(TCP), Datagram(UDP)&lt;/li&gt;
  &lt;li&gt;대표적인 프로토콜: TCP, UDP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인터넷-계층-l3&quot;&gt;인터넷 계층 (L3)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;IP주소를 이용해 목적지로 전송하기 위해 사용되는 계층&lt;/li&gt;
  &lt;li&gt;네트워크 계층은 라우팅, 흐름 제어 등을 수행&lt;/li&gt;
  &lt;li&gt;상대방이 데이터를 제대로 수신했는지에 대해 보장하지 않는 비연결형적인 특징을 가짐&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위는 Packet (또는 Datagram)&lt;/li&gt;
  &lt;li&gt;대표적인 프토로콜: IP, ARP&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;http&quot;&gt;HTTP&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;응용 프로그램은 수도 없이 다양. 응용 계층간의 통신할 수 있는 규약이 필요. 그중 대표적인 것이 HTTP&lt;/li&gt;
  &lt;li&gt;요즘에는 모든 데이터를 HTTP 메세지에 담아서 전송&lt;/li&gt;
  &lt;li&gt;응용 계층에서 데이터를 요청/응답 하는 규약&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http의-특징&quot;&gt;HTTP의 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트/서버 구조: request를 보내면 response 돌려주는 단방향 통신&lt;/li&gt;
  &lt;li&gt;무상태 프로토콜: 서버가 클라이언트의 상태를 보존하지 않음&lt;/li&gt;
  &lt;li&gt;비연결성: connect (3-way handshake) -&amp;gt; request -&amp;gt; response -&amp;gt; disconnect (4-way handshake)&lt;/li&gt;
  &lt;li&gt;(HTTP/2, HTTP/3 오면서 Persistent connection을 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;url과-http-메서드&quot;&gt;URL과 HTTP 메서드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;request를 보내기 위해서는 요청하는 자원의 식별자 URL과 요청 방식인 HTTP 메서드를 이용해야 한다&lt;/li&gt;
  &lt;li&gt;GET
    &lt;ul&gt;
      &lt;li&gt;정보를 조회하기 위한 메서드. 서버에서 정보를 가져오는 것이 목적&lt;/li&gt;
      &lt;li&gt;URL에 요청 정보를 붙여서 전송 -&amp;gt; POST보다 빠르다, POST 방식보다 보안에 취약하다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST
    &lt;ul&gt;
      &lt;li&gt;서버의 값을 바꾸기 위한 메서드 -&amp;gt; Not Idempotent&lt;/li&gt;
      &lt;li&gt;요청정보를 HTTP 메세지 바디에 숨겨서 전송 -&amp;gt; 클라이언트가 인코딩, 서버에서 디코딩 -&amp;gt; GET보다 보안상 안전&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 정보는 HTTP 메세지의 시작 라인에 적는다 (ex. GET /search?q=hello HTTP1.1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-헤더&quot;&gt;HTTP 헤더&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이제 HTTP 메세지를 전송한다. 그전에 여러 부가 기능과 규약을 위해 HTTP 헤더를 잘 작성해야 한다&lt;/li&gt;
  &lt;li&gt;HTTP 헤더 종류에는 크게 표현 헤더, 요청 헤더, 응답 헤더가 있다&lt;/li&gt;
  &lt;li&gt;표현 헤더 (요청/응답 공통 항목)
    &lt;ul&gt;
      &lt;li&gt;Content-Type: 표현 데이터의 형식 (GET 메서드는 안씀) (ex. text/html, application/json, image/png)&lt;/li&gt;
      &lt;li&gt;Content-Encoding: 표현 데이터의 압축방식&lt;/li&gt;
      &lt;li&gt;Content-Language, Content-Length&lt;/li&gt;
      &lt;li&gt;Last-Modified: 리소스를 마지막으로 갱신한 일시&lt;/li&gt;
      &lt;li&gt;Location: 페이지 리다이렉션 (리다이렉트된 새로운 주소)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;요청 헤더
    &lt;ul&gt;
      &lt;li&gt;Host: 호스트명 + 포트 번호&lt;/li&gt;
      &lt;li&gt;User-Agent: 클라이언트의 정보 (어떤 운영체제, 브라우저 등)&lt;/li&gt;
      &lt;li&gt;Referer: 내가 페이지를 요청한 URL (유입경로)&lt;/li&gt;
      &lt;li&gt;Authorization: 클라이언트 인증 정보&lt;/li&gt;
      &lt;li&gt;Cookie: 쿠키에서 사용할 데이터&lt;/li&gt;
      &lt;li&gt;If-Modified-Since: 캐시 데이터의 유효성을 검사하기 위한 목적&lt;/li&gt;
      &lt;li&gt;If-None-Match: 캐시 데이터를 쓸지 서버에서 데이터를 가져올지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응답 헤더
    &lt;ul&gt;
      &lt;li&gt;Server: 캐시, 프록시 아닌 Origin 서버의 정보&lt;/li&gt;
      &lt;li&gt;Set-Cookie: 쿠키에 저장할 데이터 (max-age, expires로 쿠키 생명주기 설정)&lt;/li&gt;
      &lt;li&gt;Age: 캐시가 생성되고 시간이 얼마나 지났는지&lt;/li&gt;
      &lt;li&gt;ETag: 리소스의 고유한 태그 -&amp;gt; 캐시 데이터의 유효성을 검사할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tcp&quot;&gt;TCP&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;전송 계층은 송신자와 수신자를 서로 연결(connection)하는 계층&lt;/li&gt;
  &lt;li&gt;양 끝단(End to end)의 사용자들이 신뢰성있는 데이터를 주고 받을 수 있도록 해준다&lt;/li&gt;
  &lt;li&gt;상위 계층들이 데이터 전달의 유효성이나 효율성을 생각하지 않도록 해준다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tcp-1&quot;&gt;TCP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;연결지향 프로토콜 (논리적 연결)&lt;/li&gt;
  &lt;li&gt;가상 회선 패킷 교환 방식 -&amp;gt; 경로가 이미 정해져 있음 -&amp;gt; 순서 보장&lt;/li&gt;
  &lt;li&gt;패킷에 시퀀스 번호가 있음 -&amp;gt; 순서 보장&lt;/li&gt;
  &lt;li&gt;전이중(Full-Duplex), 점대점(Point to Point) 방식&lt;/li&gt;
  &lt;li&gt;멀티캐스팅이나 브로드캐스팅을 지원하지 않는다&lt;/li&gt;
  &lt;li&gt;UDP보다 속도가 느리다&lt;/li&gt;
  &lt;li&gt;연속성보다 신뢰성있는 전송이 중요할 때에 사용된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;udp&quot;&gt;UDP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;비연결형 프로토콜&lt;/li&gt;
  &lt;li&gt;각각의 패킷은 다른 경로로 전송되고, 각각의 패킷은 독립적인 관계를 지니게 된다&lt;/li&gt;
  &lt;li&gt;연결여부, 순서여부, 손실여부 확인 안함. 오직 데이터 손상 여부만 CheckSum 필드를 통해 검출&lt;/li&gt;
  &lt;li&gt;신뢰성은 낮지만 속도가 빠르다&lt;/li&gt;
  &lt;li&gt;실시간 서비스(streaming)에 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/network_31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ip&quot;&gt;IP&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;IP주소를 이용해 목적지로 전송하기 위해 사용되는 계층&lt;/li&gt;
  &lt;li&gt;네트워크 계층은 라우팅, 흐름 제어 등을 수행&lt;/li&gt;
  &lt;li&gt;상대방이 데이터를 제대로 수신했는지에 대해 보장하지 않는 비연결형적인 특징을 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ip-주소&quot;&gt;IP 주소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;IP 주소 중 네트워크 부분: 하나의 브로드캐스트 영역
    &lt;ul&gt;
      &lt;li&gt;라우터를 거치지 않고 통신이 가능한 영역&lt;/li&gt;
      &lt;li&gt;라우터가 라우팅할 때 참고하는 부분&lt;/li&gt;
      &lt;li&gt;라우터는 다른 네트워크로 갈 때만 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IP 주소 중 호스트 부분: 각각의 PC 또는 장비&lt;/li&gt;
  &lt;li&gt;IP 주소의 Class에 따라 어디까지가 네트워크 부분이고, 어디까지가 호스트 부분인지가 나뉨 (네트워크의 크기가 달라짐)
    &lt;ul&gt;
      &lt;li&gt;클래스 A는 이진수 중에서 맨 앞쪽 숫자가 항상 0으로 시작되는 것들
        &lt;ul&gt;
          &lt;li&gt;호스트 수가 가장 많은 클래스&lt;/li&gt;
          &lt;li&gt;앞의 8비트가 네트워크 부분, 나머지 24비트가 호스트 부분&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.0.0&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;126.0.0.0&lt;/code&gt; 까지로 규정 (0 시작과 127 시작은 제외) -&amp;gt; 126개의 네트워크, 각각의 네트워크는 라우터 없이 통신&lt;/li&gt;
          &lt;li&gt;호스트는 2의 24승 - 2개(모두 0인 경우, 모두 1인 경우) = 16,777,214개 -&amp;gt; 16,777,214개의 호스트가 하나의 네트워크에 연결&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;클래스 B는 맨 앞이 10으로 시작
        &lt;ul&gt;
          &lt;li&gt;앞의 16비트가 네트워크 부분&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128.0.0.0&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;191.255.0.0&lt;/code&gt; 까지로 규정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;클래스 C는 맨 앞이 110으로 시작
        &lt;ul&gt;
          &lt;li&gt;앞의 24비트가 네트워크 부분&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.0.0.0&lt;/code&gt; ~ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;223.255.255.0&lt;/code&gt; 까지로 규정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본 게이트웨이(Default Gateway)
    &lt;ul&gt;
      &lt;li&gt;내부 네트워크에서는 라우터 없이도 통신이 가능&lt;/li&gt;
      &lt;li&gt;내부 네트워크에 없는 IP 주소로 갈 때는 이 기본 게이트웨이를 통해 나감&lt;/li&gt;
      &lt;li&gt;즉 라우터의 이더넷 인터페이스를 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;라우터는 인터페이스별로 IP 주소 부여. 스위치나 허브는 장비별로 IP 주소 부여&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;서브넷-마스크subnet-mask&quot;&gt;서브넷 마스크(Subnet Mask)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 네트워크를 가공할 때 사용&lt;/li&gt;
  &lt;li&gt;우리가 일단 어떤 IP 주소를 배정받게 되면 보통 이 주소를 그대로 사용하지 않고 서브넷 마스크를 조합하여 사용&lt;/li&gt;
  &lt;li&gt;우리가 부여받은 net을 여러개의 subnet으로 나눈다는 의미&lt;/li&gt;
  &lt;li&gt;서브넷마스크를 통해 나누어진 서브넷간의 통신은 라우터를 거쳐야함&lt;/li&gt;
  &lt;li&gt;모든 IP 주소에는 서브넷 마스크가 따라다님. 쓰지 않더라도. 그래야 지금 IP 주소가 마스킹 된건지 아닌지 알 수 있음&lt;/li&gt;
  &lt;li&gt;클래스 A의 기본 서브넷 마스크는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;255.0.0.0&lt;/code&gt;, B는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;255.255.0.0&lt;/code&gt;, C는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;255.255.255.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;서브넷 마스크는 IP주소의 어디까지가 네트워크 부분이고, 어디까지가 호스트 부분인지를 나타내는 역할을 함&lt;/li&gt;
  &lt;li&gt;서브넷 마스크의 이진수 1은 네트워크 부분, 이진수 0은 호스트 부분을 의미함&lt;/li&gt;
  &lt;li&gt;즉, 서브넷 마스킹은 기존 IP 주소의 호스트 부분의 일부를 네트워크 부분으로 바꾸는 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;기존 네트워크: 150.150.100.1 =&amp;gt; 1001 0110 1001 0110 0110 0100 0000 0001 =&amp;gt; 클래스 B =&amp;gt; 150.150.0.0이 네트워크를 의미
서브넷 마스크: 255.255.255.0 =&amp;gt; 1111 1111 1111 1111 1111 1111 0000 0000 =&amp;gt; 네트워크 자리가 16자리에서 24자리 까지로 늘림 (호스트를 8자리로 줄임)
------------------------------------------------------------------------------------------------------------------------------
서브넷: 150.150.100.0 =&amp;gt; 1001 01110 1001 01110 01110 0100 0000 0000 =&amp;gt; 최종적으로 서브넷 네트워크가 150.150.100.0가 됨
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;참고로 호스트 부분이 0인 주소는 호스트 주로로 사용하지 못함. PC에서 사용하는 주소가 아니라 네트워크 자체를 의미&lt;/li&gt;
  &lt;li&gt;또 호스트 부분이 255인 주소 역시 호스트 주소로 사용할 수 없음. 브로드캐스트 주소 (모든 호스트에게 메시지 보낼 때 사용하는 주소)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;네트워크-장비&quot;&gt;네트워크 장비&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;허브
    &lt;ul&gt;
      &lt;li&gt;멀티포트 리피터&lt;/li&gt;
      &lt;li&gt;특정 포트에서 들어온 데이터를 나머지 포트로 데이터를 뿌려주는 역할&lt;/li&gt;
      &lt;li&gt;같은 콜리전 도메인&lt;/li&gt;
      &lt;li&gt;100대가 허브에 연결되어 있다면 1대의 컴퓨터가 통신하는 동안 나머지 99대의 컴퓨터들은 모두 대기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스위치
    &lt;ul&gt;
      &lt;li&gt;콜리전 도메인 분할&lt;/li&gt;
      &lt;li&gt;서로 다른 콜리전 도메인에서는 독립적으로 통신 가능&lt;/li&gt;
      &lt;li&gt;하나의 컴퓨터가 브로드 캐스팅한다면, 이 때는 모든 콜리전 도메인에서 통신 불가&lt;/li&gt;
      &lt;li&gt;만약 세상의 모든 네트워크가 스위치로 이루어져 있다면, 한 명이 브로드 캐스팅 하는 순간 모든 다른 통신이 불가능해짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;라우터
    &lt;ul&gt;
      &lt;li&gt;브로드캐스팅은 하나의 네트워크내에서 이루어짐 -&amp;gt; LAN = 하나의 브로드캐스트 도메인&lt;/li&gt;
      &lt;li&gt;라우터는 네트워크를 분할해줌&lt;/li&gt;
      &lt;li&gt;네트워크는 라우터로 분할, 네트워크 내에서 콜리전 도메인은 스위치로 분할, 콜리전 도메인은 허브로 구성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;응용편&quot;&gt;응용편&lt;/h1&gt;

&lt;h2 id=&quot;쿠키와-세션&quot;&gt;쿠키와 세션&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;쿠키
    &lt;ul&gt;
      &lt;li&gt;HTTP는 무상태 프로토콜&lt;/li&gt;
      &lt;li&gt;매 요청마다 필요한 정보를 누적 전송해야 한다면 비효율적&lt;/li&gt;
      &lt;li&gt;사용자의 선택에 따라 데이터를 브라우저에 저장 (클라이언트 로컬)&lt;/li&gt;
      &lt;li&gt;(ex. 비밀번호를 저장하시겠습니까?, 오늘 하루 보지 않기, 특정 버튼 클릭 횟수, 접속 횟수 등)&lt;/li&gt;
      &lt;li&gt;쿠키는 딱히 유효성 검사 x -&amp;gt; 그냥 Set-Cookie 에서 설정한 쿠키 생명 주기 동안 살아있으면 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;캐시
    &lt;ul&gt;
      &lt;li&gt;프록시 서버&lt;/li&gt;
      &lt;li&gt;웹 페이지의 HTML, CSS, 이미지 파일 등을 저장 -&amp;gt; 빠른 렌더링&lt;/li&gt;
      &lt;li&gt;캐시는 유효성 검사를 한다&lt;/li&gt;
      &lt;li&gt;Last-Modified &amp;amp; If-Modified-Since 조합: 데이터가 A -&amp;gt; B -&amp;gt; A 로의 변환도 modified로 간주 -&amp;gt; 한계&lt;/li&gt;
      &lt;li&gt;Etag &amp;amp; If-None-Match 조합&lt;/li&gt;
      &lt;li&gt;유효하면 캐시 데이터, 아니면 Origin 서버&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;세션
    &lt;ul&gt;
      &lt;li&gt;쿠키와 비슷&lt;/li&gt;
      &lt;li&gt;다만 데이터를 서버에 저장&lt;/li&gt;
      &lt;li&gt;클라이언트 쿠키에는 세션 ID 저장 (브라우저 닫기 전까지 유효)&lt;/li&gt;
      &lt;li&gt;세션 ID 포함해서 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dns&quot;&gt;DNS&lt;/h2&gt;
&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;
&lt;h2 id=&quot;소켓&quot;&gt;소켓&lt;/h2&gt;
&lt;h2 id=&quot;로드-밸런싱&quot;&gt;로드 밸런싱&lt;/h2&gt;

&lt;h1 id=&quot;용어&quot;&gt;용어&lt;/h1&gt;

&lt;h2 id=&quot;nat&quot;&gt;NAT&lt;/h2&gt;
&lt;h2 id=&quot;라우터&quot;&gt;라우터&lt;/h2&gt;
&lt;h2 id=&quot;게이트웨이&quot;&gt;게이트웨이&lt;/h2&gt;
&lt;h2 id=&quot;dhcp&quot;&gt;DHCP&lt;/h2&gt;
&lt;h2 id=&quot;ipc-rpc-grpc&quot;&gt;IPC, RPC, gRPC&lt;/h2&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview&quot; target=&quot;_blank&quot;&gt;WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gyoogle.dev/blog/guide/%EB%A9%B4%EC%A0%91%20%EC%A4%80%EB%B9%84.html&quot; target=&quot;_blank&quot;&gt;gyoogle, Tech Interview 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blex.me/@baealex/%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%B4-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-%EC%A4%80%EB%B9%84&quot; target=&quot;_blank&quot;&gt;배진오, 신입 개발자 기술면접 준비하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syujisu.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EB%AC%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8?category=871132&quot; target=&quot;_blank&quot;&gt;exp_blog, 데이터베이스 직무 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/88&quot; target=&quot;_blank&quot;&gt;망나니 개발자 CS 준비&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series4</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series4</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part3]: OS</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#운영체제&quot; id=&quot;markdown-toc-운영체제&quot;&gt;운영체제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#프로세스&quot; id=&quot;markdown-toc-프로세스&quot;&gt;프로세스&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스의-4가지-상태&quot; id=&quot;markdown-toc-프로세스의-4가지-상태&quot;&gt;프로세스의 4가지 상태&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스-스케줄러&quot; id=&quot;markdown-toc-프로세스-스케줄러&quot;&gt;프로세스 스케줄러&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#스레드&quot; id=&quot;markdown-toc-스레드&quot;&gt;스레드&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#멀티프로세싱과-멀티스레딩&quot; id=&quot;markdown-toc-멀티프로세싱과-멀티스레딩&quot;&gt;멀티프로세싱과 멀티스레딩&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#뮤텍스와-세마포어&quot; id=&quot;markdown-toc-뮤텍스와-세마포어&quot;&gt;뮤텍스와 세마포어&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#메모리&quot; id=&quot;markdown-toc-메모리&quot;&gt;메모리&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#가상-메모리&quot; id=&quot;markdown-toc-가상-메모리&quot;&gt;가상 메모리&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#가변-분할&quot; id=&quot;markdown-toc-가변-분할&quot;&gt;가변 분할&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#고정-분할&quot; id=&quot;markdown-toc-고정-분할&quot;&gt;고정 분할&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#가상-메모리와-물리-메모리&quot; id=&quot;markdown-toc-가상-메모리와-물리-메모리&quot;&gt;가상 메모리와 물리 메모리&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#페이지-교체-알고리즘&quot; id=&quot;markdown-toc-페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#운영체제-일문일답&quot; id=&quot;markdown-toc-운영체제-일문일답&quot;&gt;운영체제 일문일답&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#프로세스-1&quot; id=&quot;markdown-toc-프로세스-1&quot;&gt;프로세스&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#메모리-1&quot; id=&quot;markdown-toc-메모리-1&quot;&gt;메모리&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;운영체제&quot;&gt;운영체제&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;운영체제는 컴퓨터 전원을 켜면 가장 먼저 만나게 되는 소프트웨어 (ex. 윈도우, 맥OS, 리눅스, 안드로이드 등)&lt;/li&gt;
  &lt;li&gt;컴퓨터 시스템의 자원들을 효율적으로 관리하며, 응용 프로그램과 하드웨어 간의 인터페이스 역할을 제공&lt;/li&gt;
  &lt;li&gt;운영체제의 대표적인 역할
    &lt;ul&gt;
      &lt;li&gt;CPU 스케줄링과 프로세스 관리: CPU 소유권을 어떤 프로세스에 할당할지, 프로세스의 생애주기를 관리&lt;/li&gt;
      &lt;li&gt;메모리 관리: 한정된 메모리를 어떤 프로세스에 얼마나 할당할지 관리&lt;/li&gt;
      &lt;li&gt;파일시스템 관리: 파일을 디스크에 어떤 방법으로 보관할지 관리&lt;/li&gt;
      &lt;li&gt;사용자 인터페이스 제공 (CLI, GUI)&lt;/li&gt;
      &lt;li&gt;하드웨어 인터페이스 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;운영체제의 구조
    &lt;ul&gt;
      &lt;li&gt;커널(kernel): 프로세스 관리, 메모리 관리, 저장장치 관리와 같은 운영체제의 핵심적인 기능을 담당&lt;/li&gt;
      &lt;li&gt;인터페이스(interface): 커널과 사용자 사이에서 명령을 전달하고, 실행 결과를 보여주는 역할 (리눅스에서는 이를 쉘이라고 함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../images/os_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로세스&quot;&gt;프로세스&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;하드디스크의 프로그램이 메모리에 올라온 상태
    &lt;ul&gt;
      &lt;li&gt;이 때 코드 영역, 데이터 영역 등은 사용자 영역에,&lt;/li&gt;
      &lt;li&gt;프로세스를 처리하는데 필요한 정보를 가지고 있는 프로세스 제어블록은 운영체제 영역에 올라감&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스의-4가지-상태&quot;&gt;프로세스의 4가지 상태&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스는 메모리에 올라온다고 CPU가 바로 작업을 처리해 주지는 않는다
    &lt;ul&gt;
      &lt;li&gt;프로세스는 4가지 상태를 오가게 된다&lt;/li&gt;
      &lt;li&gt;준비상태
        &lt;ul&gt;
          &lt;li&gt;생성된 프로세스가 레디큐에서 CPU를 기다리고 있는 상태&lt;/li&gt;
          &lt;li&gt;CPU는 준비상태에 있는 프로세스중 다음 프로세스를 선택해야 한다 (이를 디스패치 라고함)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;실행상태
        &lt;ul&gt;
          &lt;li&gt;CPU를 얻어 실제 작업을 수행하는 상태&lt;/li&gt;
          &lt;li&gt;CPU는 프로세스 제어블록을 전달 받는다&lt;/li&gt;
          &lt;li&gt;시간내 작업이 끝나면 종료상태, 못 끝내면 다시 준비상태로 돌려보낸다&lt;/li&gt;
          &lt;li&gt;작업도중 입출력이 필요하면 대기상태로 보낸다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;대기상태
        &lt;ul&gt;
          &lt;li&gt;프로세스가 입출력을 요청하면 입출력 관리자가 입출력을 완료하기 전까지 프로세스를 대기상태로 옮겨둔다&lt;/li&gt;
          &lt;li&gt;입출력이 완료되면 다시 준비상태로 돌려보낸다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;종료상태
        &lt;ul&gt;
          &lt;li&gt;작업이 종료되고 프로세스 제어블록이 사라짐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로세스-스케줄러&quot;&gt;프로세스 스케줄러&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;레디큐에 있는 준비상태의 프로세스중 어떤 것을 실행 상태로 옮길 것인가&lt;/li&gt;
  &lt;li&gt;FCFS: 준비상태에 들어온 순서대로 처리&lt;/li&gt;
  &lt;li&gt;SJF: CPU 소요시간이 짧은 프로세스부터 처리&lt;/li&gt;
  &lt;li&gt;SRTF: SJF + 더 짧은 프로세스 들어오면 다시 스케줄링&lt;/li&gt;
  &lt;li&gt;Round Robin: 모든 프로세스에 동일한 시간을 할당, 시간 다되면 다시 레디큐의 맨 뒤로&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스레드&quot;&gt;스레드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;사실 스케줄러에 의해 처리되는 단위는 프로세스가 아니라 스레드다&lt;/li&gt;
  &lt;li&gt;스레드는 프로세스에 정의된 작업을 처리하는 실행의 단위&lt;/li&gt;
  &lt;li&gt;스레드는 실행 단위이기 때문에 실행할 때마다 달라져야 하는 스택 영역을 제외하고 나머지 영역은 스레드끼리 공유&lt;/li&gt;
  &lt;li&gt;스레드의 이러한 메모리 영역 공유 덕분에 멀티스레딩만의 장점이 있는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;멀티프로세싱과-멀티스레딩&quot;&gt;멀티프로세싱과 멀티스레딩&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;멀티 프로세싱
    &lt;ul&gt;
      &lt;li&gt;멀티스레딩에 대해 알아보기 전에 먼저 멀티 프로세싱을 살펴보자&lt;/li&gt;
      &lt;li&gt;점차 CPU 한개에 더 많은 코어수가 생기고, 분산 시스템을 지원하면서,&lt;/li&gt;
      &lt;li&gt;하나의 프로세스를 여러 프로세서가 처리하길 원했다&lt;/li&gt;
      &lt;li&gt;이를 위해 멀티 프로세싱은 하나의 프로세스를 여러 프로세스로 만들고, 다수의 프로세서에게 처리하도록 했다&lt;/li&gt;
      &lt;li&gt;하지만 프로세스 단위는 무겁고, 메모리 낭비가 심해 이를 개선할 필요가 있었다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;멀티 스레딩
    &lt;ul&gt;
      &lt;li&gt;메모리 낭비를 개선하고자, 프로세스를 여러 스레드 단위로 나누었는데 이를 멀티 스레딩이라고 한다&lt;/li&gt;
      &lt;li&gt;멀티 스레딩은 메모리 자원 공유로 인해 얻는 장점도 있지만, 이로 인해 생기는 단점도 있다&lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;메모리 절약, 빠른 컨텍스트 스위칭&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;메모리 영역중 여러 작업이 동시에 접근할 때 문제가 생기는 영역을 임계 영역이라고 하는데,&lt;/li&gt;
          &lt;li&gt;멀티 스레딩은 메모리 영역 공유로 임계 영역을 여러 작업이 동시에 접근하게 될 위험이 생긴다&lt;/li&gt;
          &lt;li&gt;여러 작업이 동시에 접근할 때 생기는 대표적인 문제가 스레드끼리 같은 영역에 대해 서로 다른 결과를 가지는 비동기화 문제이다&lt;/li&gt;
          &lt;li&gt;그래서 동기화를 위해 작업 처리 순서와 공유자원에 대한 접근을 컨트롤 해야 하는데 이 때 등장한 개념이 뮤텍스와 세마포어이다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;뮤텍스와-세마포어&quot;&gt;뮤텍스와 세마포어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;뮤텍스
    &lt;ul&gt;
      &lt;li&gt;접근 후 락을 걸어서 못들어오게 한다&lt;/li&gt;
      &lt;li&gt;이진 세마포어라고도 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;세마포어
    &lt;ul&gt;
      &lt;li&gt;카운팅 세마포어: 접근 가능한 수를 카운팅하며 접근을 컨트롤한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;뮤텍스와 세마포어는 비동기화 문제를 해결해주지만, 잘못되면 과도한 락으로 병목현상이 생기고 성능을 저하시킬 수 있다&lt;/li&gt;
  &lt;li&gt;최악의 경우 뫼비우스의 띠처럼 데드락으로 인해 아예 프로세서가 작업을 처리하지 못하게 될 수도 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;메모리&quot;&gt;메모리&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;CPU의 작업공간, 프로세스가 올라오는 공간&lt;/li&gt;
  &lt;li&gt;메모리는 1Byte 단위로 주소를 가진다&lt;/li&gt;
  &lt;li&gt;CPU가 필요한 데이터의 메모리 주소는 MAR 레지스터에 보관한다&lt;/li&gt;
  &lt;li&gt;메모리 관리는 MMU (메모리 관리 유닛)라는 메모리 관리자가 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;가상-메모리&quot;&gt;가상 메모리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램이 실행되면 프로세스의 상태로 메모리에 올라온다&lt;/li&gt;
  &lt;li&gt;하지만 메모리에 남은 크기보다 더 큰 크기의 프로세스를 실행해야 할 때도 있다&lt;/li&gt;
  &lt;li&gt;이런 문제를 해결해준 것이 바로 오버레이(overlay)다&lt;/li&gt;
  &lt;li&gt;오버레이는 프로세스를 더 작은 크기로 잘라 필요한 조각만 메모리에 올리고,&lt;/li&gt;
  &lt;li&gt;바로 사용하지 않는 조각들은 스왑 영역에 올려둔다&lt;/li&gt;
  &lt;li&gt;어떤 조각을 메모리에 올릴지는 CPU의 PC(프로그램 카운터) 레지스터에 의해 결정된다&lt;/li&gt;
  &lt;li&gt;프로세스 조각을 올릴 메모리의 크기는 어떻게 할까? 조각의 크기에 비례해 가변 분할? 조각 크기에 상관 없이 고정 분할?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;가변-분할&quot;&gt;가변 분할&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스의 크기에 비례해 메모리를 자른다&lt;/li&gt;
  &lt;li&gt;연속된 공간에 배치 가능&lt;/li&gt;
  &lt;li&gt;가용 가능한 메모리중에 프로세스 크기에 맞는 메모리가 없으면 남은 메모리를 합친다 (조각 모음)&lt;/li&gt;
  &lt;li&gt;연속된 공간에 배치해서 프로세스를 관리하기는 편하지만, 계속 프로세스를 재배열 하는 조각 모음이 일어난다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;고정-분할&quot;&gt;고정 분할&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스 크기에 상관없이 일정한 크기로 메모리를 자른다&lt;/li&gt;
  &lt;li&gt;프로세스가 고정된 크기보다 크면 작게 나누어 여기저기 가능한 메모리에 흩어서 배치한다&lt;/li&gt;
  &lt;li&gt;메모리 크기가 고정되기 때문에 작게 남은 부분을 활용할 수 없다 -&amp;gt; 메모리 낭빕가 생긴다&lt;/li&gt;
  &lt;li&gt;메모리 관리는 편하지만 낭비가 발생한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;가상-메모리와-물리-메모리&quot;&gt;가상 메모리와 물리 메모리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;컴퓨터를 사용하면서 어떤 프로세스가 스왑 영역에 있고, 메모리 영역에 있는지 고민해 본 적은 크게 없을 것이다&lt;/li&gt;
  &lt;li&gt;왜냐하면 우리 눈에 보이는 메모리는 0번지부터 시작되는 16,777,216TB 크기의 가상 메모리이기 때문이다&lt;/li&gt;
  &lt;li&gt;이러한 가상 메모리에 있는 논리 주소는 페이지 매핑 테이블에 의해 알아서 물리주소로 매핑된다&lt;/li&gt;
  &lt;li&gt;만약 매핑된 물리 주소가 메모리 영역이면 해당 메모리 주소를 이용하고, 스왑 영역이면 메모리에 올리고 그 메모리 주소를 이용한다&lt;/li&gt;
  &lt;li&gt;이러한 과정은 메모리 관리자가 페이지 교체 알고리즘에 따라 적절히 가져오기, 배치, 재배치 기능을 수행함으로써 이루어진다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;페이지-교체-알고리즘&quot;&gt;페이지 교체 알고리즘&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FIFO 페이지 교체
    &lt;ul&gt;
      &lt;li&gt;가장 간단한 페이지 교체 알고리즘으로 FIFO(first-in first-out)의 흐름을 가진다. 즉, 먼저 물리 메모리에 들어온 페이지 순서대로 페이지 교체 시점에 먼저 나가게 된다는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LRU 페이지 교체(LRU Page Replacement)
    &lt;ul&gt;
      &lt;li&gt;최적 알고리즘의 근사 알고리즘으로, 가장 오랫동안 사용되지 않은 페이지를 선택하여 교체한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LFU 페이지 교체(LFU Page Replacement)
    &lt;ul&gt;
      &lt;li&gt;참조 횟수가 가장 적은 페이지를 교체하는 방법이다. 활발하게 사용되는 페이지는 참조 횟수가 많아질 거라는 가정에서 만들어진 알고리즘이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;운영체제-일문일답&quot;&gt;운영체제 일문일답&lt;/h1&gt;

&lt;h2 id=&quot;프로세스-1&quot;&gt;프로세스&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;운영체제란?&lt;/li&gt;
  &lt;li&gt;프로세스와 스레드&lt;/li&gt;
  &lt;li&gt;멀티 프로세스 vs 멀티 스레드&lt;/li&gt;
  &lt;li&gt;스케줄러&lt;/li&gt;
  &lt;li&gt;동기와 비동기&lt;/li&gt;
  &lt;li&gt;프로세스 동기화&lt;/li&gt;
  &lt;li&gt;프로세스 주소 공간&lt;/li&gt;
  &lt;li&gt;인터럽트(Interrupt)&lt;/li&gt;
  &lt;li&gt;시스템 콜(System Call)&lt;/li&gt;
  &lt;li&gt;PCB와 Context Switching&lt;/li&gt;
  &lt;li&gt;IPC(Inter Process Communication)&lt;/li&gt;
  &lt;li&gt;임계 구역(Critical Section)&lt;/li&gt;
  &lt;li&gt;데드락(DeadLock)&lt;/li&gt;
  &lt;li&gt;경쟁 상태(Race Condition)&lt;/li&gt;
  &lt;li&gt;세마포어와 뮤텍스&lt;/li&gt;
  &lt;li&gt;스레드 세이프(Thread-safe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메모리-1&quot;&gt;메모리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;메모리 관리 전략&lt;/li&gt;
  &lt;li&gt;가상 메모리&lt;/li&gt;
  &lt;li&gt;캐시의 지역성&lt;/li&gt;
  &lt;li&gt;페이징과 세그먼테이션&lt;/li&gt;
  &lt;li&gt;페이지 교체 알고리즘&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview&quot; target=&quot;_blank&quot;&gt;WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gyoogle.dev/blog/guide/%EB%A9%B4%EC%A0%91%20%EC%A4%80%EB%B9%84.html&quot; target=&quot;_blank&quot;&gt;gyoogle, Tech Interview 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blex.me/@baealex/%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%B4-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-%EC%A4%80%EB%B9%84&quot; target=&quot;_blank&quot;&gt;배진오, 신입 개발자 기술면접 준비하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syujisu.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EB%AC%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8?category=871132&quot; target=&quot;_blank&quot;&gt;exp_blog, 데이터베이스 직무 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/88&quot; target=&quot;_blank&quot;&gt;망나니 개발자 CS 준비&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series3</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series3</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part2]: Algorithm</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#탐색-알고리즘&quot; id=&quot;markdown-toc-탐색-알고리즘&quot;&gt;탐색 알고리즘&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;탐색-알고리즘&quot;&gt;탐색 알고리즘&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Binary Search&lt;/li&gt;
  &lt;li&gt;탐욕 알고리즘(Greedy Algorithm)&lt;/li&gt;
  &lt;li&gt;동적 프로그래밍(Dynamic Programming)&lt;/li&gt;
  &lt;li&gt;분할 정복(Divide and Conquer)&lt;/li&gt;
  &lt;li&gt;Binary Search Tree&lt;/li&gt;
  &lt;li&gt;DFS&lt;/li&gt;
  &lt;li&gt;BFS&lt;/li&gt;
  &lt;li&gt;Dijkstra&lt;/li&gt;
  &lt;li&gt;Kruskal&lt;/li&gt;
  &lt;li&gt;최장 증가 수열(LIS)&lt;/li&gt;
  &lt;li&gt;최장 공통 문자열(LCS)&lt;/li&gt;
  &lt;li&gt;최장 공통 부분 수열(LCS)&lt;/li&gt;
  &lt;li&gt;최소 공통 조상(LCA)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview&quot; target=&quot;_blank&quot;&gt;WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gyoogle.dev/blog/guide/%EB%A9%B4%EC%A0%91%20%EC%A4%80%EB%B9%84.html&quot; target=&quot;_blank&quot;&gt;gyoogle, Tech Interview 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blex.me/@baealex/%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%B4-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-%EC%A4%80%EB%B9%84&quot; target=&quot;_blank&quot;&gt;배진오, 신입 개발자 기술면접 준비하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syujisu.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EB%AC%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8?category=871132&quot; target=&quot;_blank&quot;&gt;exp_blog, 데이터베이스 직무 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/88&quot; target=&quot;_blank&quot;&gt;망나니 개발자 CS 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@emplam27/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-LCS-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Longest-Common-Substring%EC%99%80-Longest-Common-Subsequence&quot; target=&quot;_blank&quot;&gt;[알고리즘] 그림으로 알아보는 LCS 알고리즘 - Longest Common Substring와 Longest Common Subsequence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series2</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series2</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
            <item>
                <title>Tech Interview Series [Part1]: Data Structure</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#배열array&quot; id=&quot;markdown-toc-배열array&quot;&gt;배열(Array)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#링크드-리스트linkedlist&quot; id=&quot;markdown-toc-링크드-리스트linkedlist&quot;&gt;링크드 리스트(LinkedList)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#해시테이블hashtable&quot; id=&quot;markdown-toc-해시테이블hashtable&quot;&gt;해시테이블(HashTable)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#스택과-큐stack--queue&quot; id=&quot;markdown-toc-스택과-큐stack--queue&quot;&gt;스택과 큐(Stack &amp;amp; Queue)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#트리tree&quot; id=&quot;markdown-toc-트리tree&quot;&gt;트리(Tree)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#그래프graph&quot; id=&quot;markdown-toc-그래프graph&quot;&gt;그래프(Graph)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tree와-graph의-차이점&quot; id=&quot;markdown-toc-tree와-graph의-차이점&quot;&gt;Tree와 Graph의 차이점&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;배열array&quot;&gt;배열(Array)&lt;/h1&gt;
&lt;h1 id=&quot;링크드-리스트linkedlist&quot;&gt;링크드 리스트(LinkedList)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Array &amp;amp; ArrayList &amp;amp; LinkedList
    &lt;h1 id=&quot;해시테이블hashtable&quot;&gt;해시테이블(HashTable)&lt;/h1&gt;
    &lt;h1 id=&quot;스택과-큐stack--queue&quot;&gt;스택과 큐(Stack &amp;amp; Queue)&lt;/h1&gt;
    &lt;h1 id=&quot;트리tree&quot;&gt;트리(Tree)&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;이진 트리(Binary Tree)&lt;/li&gt;
  &lt;li&gt;이진 탐색 트리(Binary Search Tree)&lt;/li&gt;
  &lt;li&gt;Red-Black Tree&lt;/li&gt;
  &lt;li&gt;힙(Heap)&lt;/li&gt;
  &lt;li&gt;트라이(Trie)&lt;/li&gt;
  &lt;li&gt;밸런스 트리(B-Tree)
    &lt;h1 id=&quot;그래프graph&quot;&gt;그래프(Graph)&lt;/h1&gt;
    &lt;h1 id=&quot;tree와-graph의-차이점&quot;&gt;Tree와 Graph의 차이점&lt;/h1&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&quot; target=&quot;_blank&quot;&gt;JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/WeareSoft/tech-interview&quot; target=&quot;_blank&quot;&gt;WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gyoogle.dev/blog/guide/%EB%A9%B4%EC%A0%91%20%EC%A4%80%EB%B9%84.html&quot; target=&quot;_blank&quot;&gt;gyoogle, Tech Interview 준비&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blex.me/@baealex/%EC%B7%A8%EC%A4%80%EC%83%9D%EC%9D%B4-%EC%83%9D%EA%B0%81%ED%95%98%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91-%EC%A4%80%EB%B9%84&quot; target=&quot;_blank&quot;&gt;배진오, 신입 개발자 기술면접 준비하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dingrr.com/blog/post/python-python-%EB%A9%B4%EC%A0%91-%EC%98%88%EC%A0%9C-2%ED%8E%B8&quot; target=&quot;_blank&quot;&gt;[PYTHON] Python 면접 예제 2편&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://syujisu.tistory.com/entry/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EB%AC%B4-%EB%A9%B4%EC%A0%91-%EC%A7%88%EB%AC%B8?category=871132&quot; target=&quot;_blank&quot;&gt;exp_blog, 데이터베이스 직무 면접 질문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/88&quot; target=&quot;_blank&quot;&gt;망나니 개발자 CS 준비&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 01 Sep 2022 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/tech_interview_series1</link>
                <guid isPermaLink="true">http://localhost:4000/tech_interview_series1</guid>
                
                <category>tech_interview</category>
                
                
                <category>CS</category>
                
            </item>
        
    </channel>
</rss>