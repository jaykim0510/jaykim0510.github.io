<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jay's Cookbook</title>
        <description>Menca personal blogging theme for Jekyll</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Mon, 11 Mar 2024 19:01:59 +0900</pubDate>
        <lastBuildDate>Mon, 11 Mar 2024 19:01:59 +0900</lastBuildDate>
        <generator>Jekyll v4.2.1</generator>
        
            <item>
                <title>[Docker]: 진화하는 컨테이너 표준</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#도커와-컨테이너-기술&quot; id=&quot;markdown-toc-도커와-컨테이너-기술&quot;&gt;도커와 컨테이너 기술&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#도커-엔진&quot; id=&quot;markdown-toc-도커-엔진&quot;&gt;도커 엔진&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#초기-도커-엔진의-모습&quot; id=&quot;markdown-toc-초기-도커-엔진의-모습&quot;&gt;초기 도커 엔진의 모습&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#새롭게-바뀐-도커-엔진의-모습&quot; id=&quot;markdown-toc-새롭게-바뀐-도커-엔진의-모습&quot;&gt;새롭게 바뀐 도커 엔진의 모습&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#client&quot; id=&quot;markdown-toc-client&quot;&gt;Client&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#dockerd&quot; id=&quot;markdown-toc-dockerd&quot;&gt;dockerd&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#containerd&quot; id=&quot;markdown-toc-containerd&quot;&gt;containerd&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#shim&quot; id=&quot;markdown-toc-shim&quot;&gt;shim&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#runc&quot; id=&quot;markdown-toc-runc&quot;&gt;runc&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#oci&quot; id=&quot;markdown-toc-oci&quot;&gt;OCI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cri&quot; id=&quot;markdown-toc-cri&quot;&gt;CRI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;도커와-컨테이너-기술&quot;&gt;도커와 컨테이너 기술&lt;/h1&gt;
&lt;p&gt;Docker는 컨테이너 기술을 사용하여 애플리케이션에 필요한 환경을 신속하게 구축하고 테스트 및 배포를 할 수 있게 해주는 플랫폼으로 접근 장벽이 비교적 높았던 컨테이너 기술의 상용화를 앞당겼습니다.&lt;/p&gt;

&lt;p&gt;컨테이너 기술은 하드웨어와 호스트 OS는 그대로 둔 채 애플리케이션 영역만 캡슐화하여 독립적인 환경을 제공해주는 가상화 방식입니다. 이 덕분에 이전의 가상화 방식에서는 애플리케이션마다 완전한 OS가 필요했지만 컨테이너 기술에서는 이러한 완전한 OS의 불필요한 중복(redundancy)을 제거하였습니다. 이러한 컨테이너 기술 덕분에 CPU, RAM 및 스토리지와 같은 시스템 리소스를 더 많이 확보할 수 있게 되었으며, 라이센스 비용 절감, OS 패치 및 유지보수에 들어가는 오버헤드를 제거할 수 있게 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;도커-엔진&quot;&gt;도커 엔진&lt;/h1&gt;
&lt;p&gt;이러한 컨테이너 기술을 실현하기 위해서는 컨테이너를 실행시킬 수 있는 환경을 구축해야 하는데 이를 컨테이너 엔진이라고 하고, 도커에서는 도커 엔진에 해당됩니다.&lt;/p&gt;

&lt;h2 id=&quot;초기-도커-엔진의-모습&quot;&gt;초기 도커 엔진의 모습&lt;/h2&gt;
&lt;p&gt;초기 도커 엔진은 크게 dockerd와 LXC로 이루어져 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/docker_26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dockerd&lt;/strong&gt;&lt;br /&gt;
초기 도커 엔진의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt; 지금의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt;보다 훨씬 많은 역할을 하고 있었습니다. 그 이유는 도커가 처음 등장할 당시 도커 개발자들의 목표는 컨테이너 기술의 대중화였습니다. 그렇기 때문에 최대한 사용성을 간편하게 하고 싶었고 이러한 목적으로 도커 개발자들은 컨테이너 기술을 사용하는데 필요한 많은 기능들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt;에 담아두었었습니다.&lt;/p&gt;

    &lt;p&gt;이 당시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt;에는 현재의 Docker Client, Docker API, Docker Runtime, Image Build와 같은 역할들을 모두 담당하고 있었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LXC&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LXC&lt;/code&gt;는 단일 호스트 상에서 여러개의 고립된 리눅스 시스템(컨테이너)들을 실행하기 위한 운영 시스템 레벨 가상화 방법입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LXC&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt;에게 Linux kernel에 존재하는 컨테이너의 기본 building block의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namespaces&lt;/code&gt;나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroups&lt;/code&gt;(control groups)에 대한 접근을 제공했습니다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;namespaces&lt;/strong&gt;: 운영 시스템을 논리적으로 나누어 고립된 환경을 제공하는 역할&lt;br /&gt;
&lt;strong&gt;cgroups&lt;/strong&gt;: 고립된 환경에서 사용할 자원을 제한하는 역할&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;새롭게-바뀐-도커-엔진의-모습&quot;&gt;새롭게 바뀐 도커 엔진의 모습&lt;/h2&gt;
&lt;p&gt;도커는 2016년 12월 14일 쿠버네티스, AWS Fargate, Rancher와 같은 컨테이너 기술 기반의 소프트웨어에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt;안에 포함되어 있던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt;라는 컨테이너 런타임을 제공해주기 위해 컨테이너를 모듈화하였습니다. (&lt;a href=&quot;https://www.docker.com/press-release/docker-extracts-and-donates-containerd-its-core-container-runtime-accelerate/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;도커 공식문서 참고&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;client&quot;&gt;Client&lt;/h3&gt;
&lt;p&gt;도커 클라이언트는 개발자들이 도커를 사용할 때 Docker CLI로 도커 서버에 명령어를 전달하는 역할을 합니다. 흔히 저희가 사용하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt;과 같은 명령어가 REST API로 형태로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerd&lt;/code&gt;에게 전달됩니다.&lt;/p&gt;

&lt;h3 id=&quot;dockerd&quot;&gt;dockerd&lt;/h3&gt;
&lt;p&gt;도커 데몬(dockerd)은 Docker API 요청을 수신하며 이미지 관리, 이미지 빌드, REST API, 인증, 보안, 코어 네트워킹, 오케스트레이션 등과 같은 역할을 담당합니다.&lt;/p&gt;

&lt;h3 id=&quot;containerd&quot;&gt;containerd&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt;는 Container의 생명주기를 관리합니다 (= container lifecycle operations).
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt;는 원래 작고, 가벼운 Container lifecycle operations으로 설계되었는데, 
시간이 지나면서 image pulls, volumes and networks와 같은 기능들이 확장되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;shim&quot;&gt;shim&lt;/h3&gt;
&lt;p&gt;앞에서 containerd가 새로운 컨테이너를 만들기 위해 runc를 사용한다고 했는데요. 
생성되는 모든 container 당 runc의 새로운 인스턴스를 fork 합니다. 
그러나 각 컨테이너가 생성되면, 상위 runc 프로세스가 종료됩니다.
수백 개의 runc 인스턴스를 실행하지 않고도 수백 개의 container를 실행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;컨테이너의 할당된 부모 runc 프로세스가 종료되면, 연결된 containerd-shim 프로세스가 컨테이너의 부모프로세스가 됩니다.&lt;/p&gt;

&lt;p&gt;이는 containerd에게 컨테이너의 file descriptor(e.g. stdin/out)와 종료 상태를 관리하는 데 필요한 최소한의 코드를 메모리에 남깁니다.&lt;/p&gt;

&lt;h3 id=&quot;runc&quot;&gt;runc&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runc&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcontainer&lt;/code&gt;용 CLI Wrapper로, 독립된 container runtime입니다.
docker가 container 관련된 기능들을 쉽게 사용할 수 있도록 해주는 가볍고 이식가능한 툴입니다.
다시 말해, container 동작 환경이 갖추어진 가볍고 이식 가능한 툴입니다.
Docker에서 runc는 목적은 단 하나인데요, 바로 &lt;strong&gt;Container 생성&lt;/strong&gt;입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/docker_25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;oci&quot;&gt;OCI&lt;/h1&gt;

&lt;h1 id=&quot;cri&quot;&gt;CRI&lt;/h1&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://earthly.dev/blog/containerd-vs-docker/&quot; target=&quot;_blank&quot;&gt;Johan Fischer, Comparing Container Runtimes: containerd vs. Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci/&quot; target=&quot;_blank&quot;&gt;tutorialworks: The differences between Docker, containerd, CRI-O and runc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kr.linkedin.com/pulse/containerd는-무엇이고-왜-중요할까-sean-lee&quot; target=&quot;_blank&quot;&gt;LinkedIn: containerd는 무엇이고 왜 중요할까?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.aquasec.com/cloud-native-academy/container-security/container-runtime/&quot; target=&quot;_blank&quot;&gt;cloud native wiki: 3 Types of Container Runtime and the Kubernetes Connection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gngsn.tistory.com/128&quot; target=&quot;_blank&quot;&gt;pageseo: Docker Engine, 제대로 이해하기 (1)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.hyojun.me/5&quot; target=&quot;_blank&quot;&gt;Devin Jeon, Kubernetes의 Docker container runtime 지원 중단에 대하여&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://joejulian.name/post/kubernetes-container-engine-comparison/&quot; target=&quot;_blank&quot;&gt;Selecting a container runtime for use with Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.capitalone.com/tech/cloud/container-runtime/&quot; target=&quot;_blank&quot;&gt;A Comprehensive Container Runtime Comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/&quot; target=&quot;_blank&quot;&gt;Don’t Panic: Kubernetes and Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sat, 10 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/container-series2</link>
                <guid isPermaLink="true">http://localhost:4000/container-series2</guid>
                
                <category>docker</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>[Docker] 네트워크 이해하기</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#bridge-network-driver&quot; id=&quot;markdown-toc-bridge-network-driver&quot;&gt;Bridge Network Driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#overlay-network-driver&quot; id=&quot;markdown-toc-overlay-network-driver&quot;&gt;Overlay Network Driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#도커-네트워크-실습&quot; id=&quot;markdown-toc-도커-네트워크-실습&quot;&gt;도커 네트워크 실습&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#도커-네트워크의-몇-가지-특징&quot; id=&quot;markdown-toc-도커-네트워크의-몇-가지-특징&quot;&gt;도커 네트워크의 몇 가지 특징&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bridge-드라이버-사용해보기&quot; id=&quot;markdown-toc-bridge-드라이버-사용해보기&quot;&gt;Bridge 드라이버 사용해보기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#overlay-드라이버-사용해보기&quot; id=&quot;markdown-toc-overlay-드라이버-사용해보기&quot;&gt;Overlay 드라이버 사용해보기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;도커의 네트워크의 철학은 &lt;strong&gt;CNM(Container Network Model)&lt;/strong&gt;을 따릅니다. CNM은 컨테이너를 사용하는 환경에서 사용자가 네트워크 설계를 쉽게 하기 위한 것입니다. 다시 말해, 복잡한 물리적인 환경을 고려할 필요없이 사용자는 네트워크를 설계할 때 추상적인 개념만을 이용해 설계할 수 있게 됩니다. 이러한 추상화는 운영체제나 인프라 환경에 구애받지 않는 설계를 가능하도록 해줍니다.&lt;/p&gt;

&lt;p&gt;이러한 개념(CNM)으로 네트워크를 구현해 놓은 것이 libnetwork이고 사용자가 사용할 수 있도록 기능을 제공하는 드라이버가 Networkdriver입니다.&lt;/p&gt;

&lt;p&gt;당연히 다음 질문은 &lt;strong&gt;어떤 네트워크 드라이버를 사용해야 하는가&lt;/strong&gt; 하는 것입니다. 각 드라이버는 트레이드오프를 제공하며 사용 사례에 따라 다른 장점이 있습니다. 도커 엔진과 함께 제공되는 내장 네트워크 드라이버가 있으며 네트워킹 벤더와 커뮤니티에서 제공하는 플러그인 네트워크 드라이버도 있습니다. 가장 일반적으로 사용되는 내장 네트워크 드라이버는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overlay&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macvlan&lt;/code&gt;입니다. 이번 포스트에서는 비교적 간단한 드라이버인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overlay&lt;/code&gt;에 대해서만 살펴보겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;bridge-network-driver&quot;&gt;Bridge Network Driver&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge&lt;/code&gt; 네트워크 드라이버가 우리 목록의 첫 번째 드라이버입니다. 이해하기 쉽고, 사용하기 쉽고, 문제 해결이 간단하기 때문에 개발자와 Docker를 처음 접하는 사람들에게 좋은 네트워킹 선택이 됩니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge&lt;/code&gt; 드라이버는 &lt;strong&gt;private 네트워크를 호스트 내부에 생성해 컨테이너들이 생성한 네트워크 안에서 통신할 수 있도록 합니다&lt;/strong&gt;. 컨테이너에 포트를 노출함으로써 외부 액세스가 허용됩니다. 도커는 서로 다른 도커 네트워크 간의 연결을 차단하는 규칙을 관리하여 네트워크를 보호합니다.&lt;/p&gt;

&lt;p&gt;내부적으로 도커 엔진은 &lt;strong&gt;리눅스 브리지, 내부 인터페이스, iptables 규칙 및 호스트 경로&lt;/strong&gt;를 만들어 컨테이너 간의 연결을 가능하게 합니다. 아래 강조 표시된 예에서는 도커 브리지 네트워크가 생성되고 두 개의 컨테이너가 이 네트워크에 연결됩니다. 도커 엔진은 &lt;strong&gt;별도의 설정 없이 필요한 연결을 수행하고 컨테이너에 대한 서비스 디스커버리를 제공&lt;/strong&gt;하며 다른 네트워크와의 통신을 차단하도록 보안 규칙을 구성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리의 애플리케이션은 현재 호스트 8000번 포트에서 서비스되고 있습니다. 도커 브리지는 컨테이너 이름으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt;와 통신할 수 있도록 하고 있습니다. 브릿지 드라이버는 같은 네트워크에 있기 때문에 자동으로 우리를 위해 서비스 디스커버리를 합니다.&lt;/p&gt;

&lt;p&gt;브리지 드라이버는 로컬 범위 드라이버이므로 단일 호스트에서 서비스 디스커버리, IPAM 및 연결만 제공합니다. 다중 호스트 서비스 검색을 수행하려면 컨테이너를 호스트 위치에 매핑할 수 있는 외부 솔루션이 필요합니다. 이 때 필요한 것이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overlay&lt;/code&gt; 드라이버입니다.&lt;/p&gt;

&lt;h1 id=&quot;overlay-network-driver&quot;&gt;Overlay Network Driver&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overlay&lt;/code&gt; 네트워크 드라이버는 &lt;strong&gt;multi-host 네트워킹&lt;/strong&gt;의 많은 복잡성을 획기적으로 단순화합니다. &lt;strong&gt;Swarm 스코프 드라이버&lt;/strong&gt;로, 개별 호스트가 아닌 전체 Swarm 또는 UCP 클러스터에서 작동합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overlay&lt;/code&gt; 드라이버는 컨테이너 네트워크를 물리적 네트워크와 분리해주는 VXLAN data plane을 사용합니다. 덕분에 다양한 클라우드, 온-프레미스 네트워크 환경 속에서 최고의 이식성을 제공해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;도커-네트워크-실습&quot;&gt;도커 네트워크 실습&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_24.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://captcha.tistory.com/70&quot;&gt;(라우드 엔지니어 Won의 성장 블로그 참고)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;도커-네트워크의-몇-가지-특징&quot;&gt;도커 네트워크의 몇 가지 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;도커는 컨테이너에 내부 IP(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;)를 순차적으로 할당&lt;/li&gt;
  &lt;li&gt;컨테이너 외부에 노출시킬 엔드포인트로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;veth&lt;/code&gt;(Virtual Ethernet) 생성&lt;/li&gt;
  &lt;li&gt;컨테이너마다 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;veth&lt;/code&gt; 네트워크 인터페이스 자동 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker0&lt;/code&gt;는 기본 생성되는 디폴트 브리지로 각 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;veth&lt;/code&gt; 인터페이스와 호스트의 기본 네트워크인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;와 연결&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bridge-드라이버-사용해보기&quot;&gt;Bridge 드라이버 사용해보기&lt;/h2&gt;

&lt;h2 id=&quot;overlay-드라이버-사용해보기&quot;&gt;Overlay 드라이버 사용해보기&lt;/h2&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/network/&quot; target=&quot;_blank&quot;&gt;도커 공식문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/blog/understanding-docker-networking-drivers-use-cases/&quot; target=&quot;_blank&quot;&gt;MARK CHURCH, Understanding Docker Networking Drivers and their use cases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://captcha.tistory.com/70&quot; target=&quot;_blank&quot;&gt;클라우드 엔지니어 Won의 성장 블로그, 06. 도커 네트워크 포스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.daleseo.com/docker-networks/&quot; target=&quot;_blank&quot;&gt;DaleSeo: Docker 네트워크 사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://julie-tech.tistory.com/50&quot; target=&quot;_blank&quot;&gt;Julie의 Tech블로그, 도커 - 네트워킹 / bridge와 overlay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/network/network-tutorial-overlay/&quot; target=&quot;_blank&quot;&gt;도커 공식문서, Networking with overlay networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/network/overlay/&quot; target=&quot;_blank&quot;&gt;도커 공식문서, Use overlay networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tutorialworks.com/container-networking/&quot; target=&quot;_blank&quot;&gt;How To Communicate Between Docker Containers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sweharris.org/post/2017-07-30-docker-placement/&quot; target=&quot;_blank&quot;&gt;Using placement constraints with Docker Swarm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository&quot; target=&quot;_blank&quot;&gt;Install Docker Engine on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 09 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/docker-series9</link>
                <guid isPermaLink="true">http://localhost:4000/docker-series9</guid>
                
                <category>docker</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>[Docker] 퍼시스턴시한 어플리케이션 만들기</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#도커에서-데이터-관리하기&quot; id=&quot;markdown-toc-도커에서-데이터-관리하기&quot;&gt;도커에서 데이터 관리하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volume&quot; id=&quot;markdown-toc-volume&quot;&gt;Volume&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#실습&quot; id=&quot;markdown-toc-실습&quot;&gt;실습&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#볼륨-생성&quot; id=&quot;markdown-toc-볼륨-생성&quot;&gt;볼륨 생성&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#dockerfile-volume-인스트럭션&quot; id=&quot;markdown-toc-dockerfile-volume-인스트럭션&quot;&gt;Dockerfile VOLUME 인스트럭션&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#docker-volume-명령어&quot; id=&quot;markdown-toc-docker-volume-명령어&quot;&gt;docker volume 명령어&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#docker-compose&quot; id=&quot;markdown-toc-docker-compose&quot;&gt;docker compose&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#볼륨-삭제&quot; id=&quot;markdown-toc-볼륨-삭제&quot;&gt;볼륨 삭제&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#볼륨-확인&quot; id=&quot;markdown-toc-볼륨-확인&quot;&gt;볼륨 확인&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#볼륨-마운트&quot; id=&quot;markdown-toc-볼륨-마운트&quot;&gt;볼륨 마운트&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bind-mount&quot; id=&quot;markdown-toc-bind-mount&quot;&gt;Bind Mount&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#실습-1&quot; id=&quot;markdown-toc-실습-1&quot;&gt;실습&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;도커에서-데이터-관리하기&quot;&gt;도커에서 데이터 관리하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;기본적으로 컨테이너 안에서 생성된 모든 파일은 &lt;strong&gt;컨테이너 레이어에 저장&lt;/strong&gt;된다&lt;/li&gt;
  &lt;li&gt;그래서, 해당 컨테이너가 삭제되면 데이터도 함께 사라진다 (컨테이너 종료는 데이터를 삭제하지 않는다)&lt;/li&gt;
  &lt;li&gt;따라서 컨테이너의 생명 주기와 관계없이 데이터를 영구적으로 저장하기 위한 방법이 필요하다&lt;/li&gt;
  &lt;li&gt;또한 여러 컨테이너가 데이터를 공유할 수 있으면 데이터를 컨테이너별로 중복 저장할 필요가 없어 컨테이너를 더욱 효율적으로 관리할 수 있게 될 것이다&lt;/li&gt;
  &lt;li&gt;이러한 이유로 도커는 영구적인 요소와의 마운트를 다음의 두 가지 방법으로 제공한다
    &lt;ul&gt;
      &lt;li&gt;볼륨(volume)&lt;/li&gt;
      &lt;li&gt;바인드(bind)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;volume&quot;&gt;Volume&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;도커 볼륨은 도커에서 스토리지를 다루는 단위다&lt;/li&gt;
  &lt;li&gt;데이터베이스처럼 영구성이 필요한 애플리케이션을 컨테이너로 실행하려면 볼륨을 사용해야 한다&lt;/li&gt;
  &lt;li&gt;볼륨을 사용하면 컨테이너의 데이터가 호스트 컴퓨터 내에 있는 도커에 의해 관리되는 파일 시스템(Linux기준 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/docker/volumes/&lt;/code&gt;)에 데이터가 저장된다&lt;/li&gt;
  &lt;li&gt;볼륨은 &lt;strong&gt;완전히 도커에 의해서만 관리&lt;/strong&gt;되어 &lt;strong&gt;호스트 머신의 디렉토리 구조나 OS에 독립적&lt;/strong&gt;인, 도커에서 데이터를 유지하기 위한 권장되는 메커니즘이다&lt;/li&gt;
  &lt;li&gt;볼륨 드라이버를 사용해 클라우드 또는 리모트 호스트에 데이터를 저장할 수도 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;bell-para&quot;&gt;
    &lt;div class=&quot;bell-bar&quot;&gt;
      &lt;i class=&quot;fa-solid fa-bell&quot;&gt;&lt;/i&gt;
      볼륨을 사용하기 좋은 경우  
    &lt;/div&gt;
    &lt;div class=&quot;bell-content&quot;&gt;
      &lt;ul&gt;
        &lt;li&gt;여러 컨테이너에 마운트하고 싶은 경우 (명시적으로 표현한 볼륨이 없으면 자동으로 생성하고 마운트 해준다)&lt;/li&gt;
        &lt;li&gt;도커 호스트의 파일 구조를 모르는 경우 (bind mount와 달리 Volume은 볼륨 명으로 관리)&lt;/li&gt;
        &lt;li&gt;백업, 데이터 통합이 필요한 경우&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;실습&quot;&gt;실습&lt;/h2&gt;

&lt;h3 id=&quot;볼륨-생성&quot;&gt;볼륨 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;볼륨은 도커에서 이미지나 컨테이너와 동급인 요소다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dockerfile-volume-인스트럭션&quot;&gt;Dockerfile VOLUME 인스트럭션&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Dockerfile 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VOLUME&lt;/code&gt; 인스트럭션으로 만들 수 있다&lt;/li&gt;
  &lt;li&gt;하지만 이 방법은 볼륨명(source)을 지정할 수 없고, 컨테이너의 마운트 지점(target)만 지정할 수 있다&lt;/li&gt;
  &lt;li&gt;Dockerfile에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VOLUME&lt;/code&gt;의 용도는 이미지가 데이터베이스 같은 유상태 애플리케이션의 경우 사용자가 볼륨을 지정하지 않더라도 데이터를 유실하지 않기 위한 안전장치 용도이다&lt;/li&gt;
  &lt;li&gt;컨테이너를 실행할 때 볼륨을 새로 정의하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VOLUME&lt;/code&gt; 은 무시된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-volume-명령어&quot;&gt;docker volume 명령어&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume&lt;/code&gt; 명령어를 사용해 볼륨을 만들고 확인하고 삭제할 수 있다&lt;/li&gt;
  &lt;li&gt;볼륨은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume create&lt;/code&gt; 명령어를 이용해 명시적으로 볼륨을 생성할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 볼륨 생성&lt;/span&gt;
docker volume create my-volume

&lt;span class=&quot;c&quot;&gt;# 볼륨 마운트&lt;/span&gt;
docker container run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; my-volume:/data &amp;lt;이미지명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;docker-compose&quot;&gt;docker compose&lt;/h4&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.9&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;frontend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node:lts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-volume:/data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 볼륨 마운트&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;my-volume&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 볼륨 생성&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;볼륨-삭제&quot;&gt;볼륨 삭제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;특정 볼륨을 삭제할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume rm &amp;lt;볼륨명&amp;gt;&lt;/code&gt; 명령어를 사용한다&lt;/li&gt;
  &lt;li&gt;만약 사용하지 않는 불특정 볼륨들을 제거하고 싶다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume prune&lt;/code&gt; 명령어를 사용하면 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;볼륨-확인&quot;&gt;볼륨 확인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;특정 볼륨을 확인할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume inspect &amp;lt;볼륨명&amp;gt;&lt;/code&gt; 명렁어를 사용한다&lt;/li&gt;
  &lt;li&gt;볼륨 목록을 확인할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker volume ls&lt;/code&gt; 명령어를 사용한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;볼륨-마운트&quot;&gt;볼륨 마운트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;볼륨(바인드 포함)을 마운트 할 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; 옵션과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mount&lt;/code&gt; 옵션 두 가지가 있다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;는 기존에 있던 옵션이고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mount&lt;/code&gt;는 이 후에 나온 좀 더 명시적인 옵션이다 (도커에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mount&lt;/code&gt; 옵션 권장)&lt;/li&gt;
  &lt;li&gt;차이점은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;는 콜론(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;)으로 값들을 구분하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mount&lt;/code&gt;는 키-밸류 페어로 구분해 조금 더 명시적이다&lt;/li&gt;
  &lt;li&gt;바인드 마운트의 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;는 명시한 디렉터리가 존재하지 않으면 생성하고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mount&lt;/code&gt;는 에러를 발생한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &amp;lt;볼륨명&amp;gt;:&amp;lt;컨테이너 마운트 지점&amp;gt;:&amp;lt;옵션 ex. ro&amp;gt; &lt;span class=&quot;c&quot;&gt;# 볼륨 마운트&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &amp;lt;호스트 디렉터리&amp;gt;:&amp;lt;컨테이너 마운트 지점&amp;gt;:&amp;lt;옵션 ex. ro&amp;gt; &lt;span class=&quot;c&quot;&gt;# 바인드 마운트&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;volume, &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;볼륨명&amp;gt;, &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;컨테이너 마운트 지점&amp;gt;, &lt;span class=&quot;nb&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 볼륨 마운트&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;호스트 디렉터리&amp;gt;, &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;컨테이너 마운트 지점&amp;gt;, &lt;span class=&quot;nb&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 바인드 마운트&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker volume inspect my-vol

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Labels&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Mountpoint&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker/volumes/my-vol/_data&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;my-vol&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Options&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;Scope&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;bind-mount&quot;&gt;Bind Mount&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;바인드 마운트는 호스트 컴퓨터 파일 시스템의 디렉터리를 컨테이너 파일 시스템의 디렉터리로 만든다&lt;/li&gt;
  &lt;li&gt;(볼륨은 볼륨명이라는 가상의 식별자를 사용하고, 바인드는 호스트 컴퓨터 파일 시스템의 절대 경로를 사용한다)&lt;/li&gt;
  &lt;li&gt;바인드 마운트는 양방향으로 동작한다. 컨테이너에서 만든 파일을 호스트 컴퓨터에서 수정할 수도 있고, 반대로 호스트에서 만든 파일도 컨테이너에서 수정할 수 있다&lt;/li&gt;
  &lt;li&gt;만약 컨테이너의 마운트 경로에 이미지에서 만들어뒀던 파일이 이미 존재하는 경우, 이 파일들은 완전히 대체된다 (볼륨, 바인드 모두)&lt;/li&gt;
  &lt;li&gt;컨테이너에서 호스트 파일 시스템에 접근할 수 있다는 점 때문에 보안에 안좋은 영향을 끼칠 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;bell-para&quot;&gt;
    &lt;div class=&quot;bell-bar&quot;&gt;
      &lt;i class=&quot;fa-solid fa-bell&quot;&gt;&lt;/i&gt;
      바인드를 사용하기 좋은 경우  
    &lt;/div&gt;
    &lt;div class=&quot;bell-content&quot;&gt;
      &lt;ul&gt;
        &lt;li&gt;컨테이너의 애플리케이션에 필요한 설정 파일을 호스트 컴퓨터에서 관리할 때 유용하다&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;실습-1&quot;&gt;실습&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;바인드는 말그대로 호스트 컴퓨터의 경로와 바인드만 하면된다. 볼륨처럼 따로 생성할 필요 없다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &amp;lt;호스트 디렉터리&amp;gt;:&amp;lt;컨테이너 마운트 지점&amp;gt;:&amp;lt;옵션 ex. ro&amp;gt; &lt;span class=&quot;c&quot;&gt;# -v 옵션&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;호스트 디렉터리&amp;gt;, &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;컨테이너 마운트 지점&amp;gt;, &lt;span class=&quot;nb&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# --mount 옵션 (권장방식)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/storage/&quot; target=&quot;_blank&quot;&gt;도커 공식문서: Manage data in Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference&quot; target=&quot;_blank&quot;&gt;도커 공식문서: Docker-compose volume configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.daleseo.com/docker-volumes-bind-mounts/&quot; target=&quot;_blank&quot;&gt;DaleSeo: Docker 컨테이너에 데이터 저장 (볼륨/바인드 마운트)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/41935435/understanding-volume-instruction-in-dockerfile&quot; target=&quot;_blank&quot;&gt;stack overflow: Understanding “VOLUME” instruction in DockerFile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 08 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/docker-volume</link>
                <guid isPermaLink="true">http://localhost:4000/docker-volume</guid>
                
                <category>docker</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>[Docker] 컨테이너에 저장된 데이터는 어떻게 될까?</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#container-layer&quot; id=&quot;markdown-toc-container-layer&quot;&gt;Container Layer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ufs&quot; id=&quot;markdown-toc-ufs&quot;&gt;UFS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cow&quot; id=&quot;markdown-toc-cow&quot;&gt;CoW&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#storage-driver&quot; id=&quot;markdown-toc-storage-driver&quot;&gt;Storage Driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#정리&quot; id=&quot;markdown-toc-정리&quot;&gt;정리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;도커를 공부하면서 궁금했던 것 중에 하나가 &lt;em&gt;컨테이너에서 생성된 파일은 어디에 저장되어 있는걸까?&lt;/em&gt; 였습니다. 그동안 저는 도커에 다른 저장소를 마운트하면 컨테이너에서 생성된 데이터를 저장할 수 있고 그렇지 않다면 컨테이너가 삭제되면서 같이 사라진다라고 알고 있었는데 그러면 &lt;strong&gt;컨테이너가 사라지기 전까지는 어디에 저장&lt;/strong&gt;되어 있는지 궁금해졌습니다.&lt;/p&gt;

&lt;p&gt;그러던 중 좋은 글을 공유해 놓은 블로그를 알게되어 이와 관련해 정리해보았습니다. &lt;a href=&quot;http://cloudrain21.com/examination-of-docker-containersize-ufs&quot; target=&quot;_blank&quot;&gt;(참고: Rain.i 블로그)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;container-layer&quot;&gt;Container Layer&lt;/h1&gt;

&lt;p&gt;도커 컨테이너는 도커 이미지로부터 만들어진 인스턴스입니다. 도커 이미지를 토대로 여러 개의 컨테이너를 만들 수 있습니다. 예를 들어 우분투 운영체제를 제공하는 이미지를 이용해 어떤 컨테이너에는 파이썬을 설치하고, 어떤 곳에는 nginx를 설치해 웹 서버로 사용할 수도 있습니다. 이렇게 새로운 소프트웨어를 설치하거나 파일을 생성하는 등의 작업은 &lt;strong&gt;Container Layer&lt;/strong&gt; 위에서 이루어집니다. &lt;del&gt;이걸 보면 도커는 각각의 서비스를 컨테이너화 했을 뿐 아니라 컨테이너도 또 컨테이너화 한 것 같은 느낌이 드네요.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도커가 컨테이너를 이런식으로 구현한 이유는 이미지의 상태를 최대한 그대로 보존하여 컨테이너를 계속 생성하더라도 토대가 변하지 않아 &lt;strong&gt;예상치 못한 오류를 예방할 수 있고 관리하기도 편합니다.&lt;/strong&gt; 사용하는 입장에서도 어차피 컨테이너를 삭제하면 원래 기본 이미지 상태로 돌아가니까 &lt;strong&gt;걱정없이 컨테이너를 조작할 수 있을 것 입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우선 컨테이너를 생성하고 새로운 데이터를 생성하면 도커 상에서는 Container Layer에 저장된다는 것을 알았습니다. 그런데 Container Layer도 결국 도커를 띄운 호스트의 자원을 이용하기 때문에 제 컴퓨터(로컬이라면 데스크탑이나 노트북, 리모트라면 AWS의 EC2 정도) 어딘가에 저장이 되어 있을 것입니다. 이렇게 컨테이너들이 사용하는 이미지나 변경사항들은 모두 호스트 File system 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/docker&lt;/code&gt; 디렉토리 내에 저장된다. 이 영역을 &lt;strong&gt;Docker area&lt;/strong&gt; 또는 &lt;strong&gt;Backing Filesystem&lt;/strong&gt; 이라고 부르기도 한다.&lt;/p&gt;

&lt;p&gt;만약 컨테이너에서 생성된 파일을 버리지 않고 저장하고 싶다면 다음의 두 가지 방법을 사용할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt;: 컨테이너 상에서 변경을 수행한 후 새로운 이미지로 만들어둔다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Volume&lt;/strong&gt;: 변경사항을 로컬 또는 외부 볼륨에 저장하도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ufs&quot;&gt;UFS&lt;/h1&gt;
&lt;p&gt;위의 내용을 읽다보면 이러한 의문이 생길 수 있습니다. &lt;em&gt;ubuntu 이미지가 가지고 있던 Filesystem이 아닌 별도의 Filesystem에 Container Layer의 데이터가 저장이 되는데 왜 우리는 컨테이너를 사용할 때 이러한 사실을 몰랐을까?&lt;/em&gt; 그 이유는 바로 도커에서는 &lt;strong&gt;UFS(Union File System)&lt;/strong&gt;라는 방식을 이용해 &lt;strong&gt;Image Layer와 Container Layer의 Filesystem을 하나로 통합&lt;/strong&gt;해서 저희에게 제공해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 UFS 방식의 장점은 무엇일까요? 가장 큰 장점은 Image Layer의 데이터를 여러 컨테이너가 공유할 수 있다는 점입니다. 공유한다는 것은 &lt;strong&gt;여러 개의 컨테이너를 띄우더라도 Image Layer의 데이터 용량은 단 1개만큼만 저장&lt;/strong&gt;된다는 말입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cow&quot;&gt;CoW&lt;/h1&gt;
&lt;p&gt;위의 그림과 같이 Image Layer의 &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/em&gt;라는 파일을 &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a'&lt;/code&gt;&lt;/em&gt;으로 수정할 때 Image Layer에서 파일이 수정되지 않고 Container Layer 위에서 새로 파일을 복사한 후 수정하는 것을 &lt;strong&gt;CoW(Copy on Write)&lt;/strong&gt;라고 합니다. 이러한 기법을 통해 &lt;strong&gt;기존의 이미지에 대한 변경을 막을 수 있습니다.&lt;/strong&gt; 하지만 Copy-on-Write 기법은 그 동작 구조 상 다음의 단점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Performance Overhead&lt;/strong&gt;: data 를 먼저 복제(Copy)한 후 변경을 수행해야함&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Capacity Overhead&lt;/strong&gt;: 원본 데이터 뿐 아니라, 변경된 데이터도 저장해야함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 되도록이면 &lt;strong&gt;중복 사용되고 수정되지 않을만한 데이터들을 이미지 레이어로 구성하&lt;/strong&gt;는 것이 좋습니다.&lt;/p&gt;

&lt;h1 id=&quot;storage-driver&quot;&gt;Storage Driver&lt;/h1&gt;
&lt;p&gt;위에서 그동안 배운 &lt;strong&gt;UFS와 CoW 방식을 도커에서 쉽게 이용할 수 있는 것은 도커의 Storage Driver 덕분입니다.&lt;/strong&gt; Storage Driver는 컨테이너 내에서의 파일 I/O 처리를 담당하는 드라이버입니다. Storage Driver는 Pluggable한 구조로 되어 있고 특성도 다릅니다. 또한 리눅스 배포판마다 지원하는 드라이버도 다르므로 자신의 workload에 맞는 Storage Driver를 선택해아 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storage Driver의 종류&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_8.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.docker.com/storage/storagedriver/select-storage-driver/&quot; target=&quot;_blank&quot;&gt;(참고: 도커 공식문서)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;리눅스 배포판별 지원하는 Storage Driver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_9.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.docker.com/storage/storagedriver/select-storage-driver/&quot; target=&quot;_blank&quot;&gt;(참고: 도커 공식문서)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storage Driver와 Backing File System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Storage Driver는 Container Layer의 데이터를 Backing filesystem(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/docker&lt;/code&gt;)으로 저장하고 사용자에게 layered filesystem으로 제공해 줍니다.   &lt;br /&gt;
(참고로 볼륨 마운트는 이러한 Storage Driver의 도움없이 직접 Host의 Filesystem에 접근 가능합니다.)&lt;/p&gt;

&lt;p&gt;참고로 Storage Driver와 Backing filesystem 간에도 종속성이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_10.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.docker.com/storage/storagedriver/select-storage-driver/&quot; target=&quot;_blank&quot;&gt;(참고: 도커 공식문서)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storage Driver와 graphDB&lt;/strong&gt;&lt;br /&gt;
Storage Driver는 사용자에게 최적의 통합된 파일 시스템을 제공하기 위해서는 layer 별 관계를 조회하고 key를 통해 특정 image를 검색하는 등, 이러한 일련의 정보 검색 및 관리하는 데이터베이스가 필요합니다. 이런 정보를 저장하고 있는 데이터베이스를 graphDB라고 합니다. (&lt;del&gt;graphDB는 Storage Driver의 뇌와 같은 역할?&lt;/del&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../images/docker_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;정리&quot;&gt;정리&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;UFS&lt;/strong&gt;: Container Layer와 Image Layer의 파일이 통합되어 보인다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoW&lt;/strong&gt;: Image Layer 내의 파일을 원본은 유지하는 방향으로 파일을 수정할 수 있다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage Driver&lt;/strong&gt;: 위의 기능들을 실제로 수행하는 드라이버&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;graphDB&lt;/strong&gt;: Storage Driver가 최적의 실행을 하는데 필요한 정보를 저장하고 있는 SQLite기반 DB&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/storage/storagedriver/&quot; target=&quot;_blank&quot;&gt;도커 공식문서 About Storage Driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cloudrain21.com/examination-of-docker-containersize-ufs&quot; target=&quot;_blank&quot;&gt;Rain.i님의 도커 컨테이너 까보기(2) – Container Size, UFS 포스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devaom.tistory.com/5&quot; target=&quot;_blank&quot;&gt;Davaom’s Tech Blog, [Docker] 컨테이너의 구조 포스트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 07 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/docker-series6</link>
                <guid isPermaLink="true">http://localhost:4000/docker-series6</guid>
                
                <category>docker</category>
                
                
                <category>devops</category>
                
            </item>
        
            <item>
                <title>[Typescript] 타입 심화편(2): 객체</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Wed, 07 Feb 2024 07:01:35 +0900</pubDate>
                <link>http://localhost:4000/typescript-type-object</link>
                <guid isPermaLink="true">http://localhost:4000/typescript-type-object</guid>
                
                <category>typescript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Typescript] 타입 심화편(1): 함수</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Wed, 07 Feb 2024 07:01:35 +0900</pubDate>
                <link>http://localhost:4000/typescript-type-function</link>
                <guid isPermaLink="true">http://localhost:4000/typescript-type-function</guid>
                
                <category>typescript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Typescript] 데코레이터</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
                <pubDate>Wed, 07 Feb 2024 07:01:35 +0900</pubDate>
                <link>http://localhost:4000/typescript-decorator</link>
                <guid isPermaLink="true">http://localhost:4000/typescript-decorator</guid>
                
                <category>typescript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Typescript] 유틸리티 타입</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#utility-type&quot; id=&quot;markdown-toc-utility-type&quot;&gt;Utility Type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#partial&quot; id=&quot;markdown-toc-partial&quot;&gt;Partial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pick&quot; id=&quot;markdown-toc-pick&quot;&gt;Pick&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#omit&quot; id=&quot;markdown-toc-omit&quot;&gt;Omit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#record&quot; id=&quot;markdown-toc-record&quot;&gt;Record&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#await&quot; id=&quot;markdown-toc-await&quot;&gt;Await&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;utility-type&quot;&gt;Utility Type&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;유틸리티 타입은 기존 타입을 변환하여 새로운 타입을 만드는데 유용한 기능을 제공한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;partial&quot;&gt;Partial&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;파셜(Partial) 타입은 기존 타입의 모든 가능한 부분집합을 의미하는 타입이다&lt;/li&gt;
  &lt;li&gt;기존 타입의 모든 프로퍼티를 옵셔널(optional)로 만든다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Partial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateUser&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Lee&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Seoul&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;pick&quot;&gt;Pick&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;픽(Pick) 타입은 기존 타입의 특정 속성만 명시적으로 골라 정의한 새로운 타입이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Pick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateUser&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Seoul&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;omit&quot;&gt;Omit&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;오밋(Omit) 타입은 기존 타입의 특정 속성만 명시적으로 제외한 타입이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Omit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UpdateUser&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;updateBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Seoul&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;record&quot;&gt;Record&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;키와 값의 타입을 정의한 객체를 의미하는 타입이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Seoul&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Kim&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Seoul&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;await&quot;&gt;Await&lt;/h1&gt;
</description>
                <pubDate>Tue, 06 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/typescript-utility-types</link>
                <guid isPermaLink="true">http://localhost:4000/typescript-utility-types</guid>
                
                <category>typescript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Typescript] Index signature</title>
                <description>&lt;hr /&gt;
&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#인덱스-시그니처란&quot; id=&quot;markdown-toc-인덱스-시그니처란&quot;&gt;인덱스 시그니처란&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#인덱스-시그니처-사용하기&quot; id=&quot;markdown-toc-인덱스-시그니처-사용하기&quot;&gt;인덱스 시그니처 사용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#인덱스-시그니처-사용-예시&quot; id=&quot;markdown-toc-인덱스-시그니처-사용-예시&quot;&gt;인덱스 시그니처 사용 예시&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#참고&quot; id=&quot;markdown-toc-참고&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;인덱스-시그니처란&quot;&gt;인덱스 시그니처란&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;객체타입의 프로퍼티에 가능한 타입을 나타내는것을 의미한다&lt;/li&gt;
  &lt;li&gt;정확한 프로퍼티의 이름을 미리 알 수 없는 경우 유용하다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;인덱스-시그니처-사용하기&quot;&gt;인덱스 시그니처 사용하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserType&lt;/code&gt;을 인덱스 시그니처를 이용해 정의하면, 키가 문자열, 값도 문자열로 하는 어떤 프로퍼티도 올 수 있다는 의미다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Mike&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Seoul&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Carl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;LA&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;engineer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;값의 타입은 자유롭게 쓸 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userThree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Jack&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;New York&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;engineer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스 시그니처의 키 타입은 제한적이다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt;, template literal 그리고 이들의 유니언 타입만 가능하다&lt;/li&gt;
  &lt;li&gt;template literal 쓸 때는 mapped types 방식을 써야 한다 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// O&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// O&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// X&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// O&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// O&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;인덱스-시그니처-사용-예시&quot;&gt;인덱스 시그니처 사용 예시&lt;/h1&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj&lt;/code&gt; 객체에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 키의 타입은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;이 아니고 문자열 리터럴 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'foo'&lt;/code&gt;이다&lt;/li&gt;
  &lt;li&gt;타입스크립트에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 타입의 키를 이용한 객체 접근을 허용하지 않는다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;literalFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stringFoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;literalFoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringFoo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;다음과 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for...of&lt;/code&gt;문을 이용한 객체접근도 같은 이유로 컴파일 에러가 난다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;이럴 때 인덱스 시그니처를 사용할 수 있다&lt;/li&gt;
  &lt;li&gt;인덱스 시그니처의 이름은 마음대로 표기해도 된다 (ex. index, idx, key 등)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;참고&quot;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures&quot;&gt;Typescript Handbook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://soopdop.github.io/2020/12/01/index-signatures-in-typescript/&quot;&gt;Harry Park’s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Tue, 06 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/typescript-index-signature</link>
                <guid isPermaLink="true">http://localhost:4000/typescript-index-signature</guid>
                
                <category>typescript</category>
                
                
                <category>language</category>
                
            </item>
        
            <item>
                <title>[Docker] Docker Compose</title>
                <description>&lt;hr /&gt;

&lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;#&lt;/p&gt;
</description>
                <pubDate>Tue, 06 Feb 2024 21:01:35 +0900</pubDate>
                <link>http://localhost:4000/docker-docker-compose</link>
                <guid isPermaLink="true">http://localhost:4000/docker-docker-compose</guid>
                
                <category>docker</category>
                
                
                <category>devops</category>
                
            </item>
        
    </channel>
</rss>