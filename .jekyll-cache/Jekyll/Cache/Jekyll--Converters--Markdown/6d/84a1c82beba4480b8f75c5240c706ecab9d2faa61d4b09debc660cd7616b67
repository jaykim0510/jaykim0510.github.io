I"<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#rdbms" id="markdown-toc-rdbms">RDBMS</a>    <ul>
      <li><a href="#relational-data-model" id="markdown-toc-relational-data-model">Relational Data Model</a></li>
    </ul>
  </li>
  <li><a href="#nosql" id="markdown-toc-nosql">NoSQL</a>    <ul>
      <li><a href="#the-benefits-of-nosql" id="markdown-toc-the-benefits-of-nosql">The benefits of NoSQL</a></li>
    </ul>
  </li>
  <li><a href="#rdbms-vs-nosql" id="markdown-toc-rdbms-vs-nosql">RDBMS vs NoSQL</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="rdbms">RDBMS</h1>

<ul>
  <li>RDBMS는 Relational DataBase Management System의 약자</li>
  <li>Relational Data Model을 담고있는 데이터베이스를 CRUD할 수 있는 소프트웨어</li>
  <li>그 밖에도 데이터의 ACID 특성, 보안과 같은 필요한 기능들을 제공</li>
  <li>RDBMS는 데이터를 저장하기 전에 미리 데이터 타입, 스키마, 업데이트/삭제 정책을 잘 정의해야함</li>
  <li>이러한 이유로 NoSQL에 비해 유연성이 떨어지고, 데이터 저장을 위한 데이터베이스 설계 과정이 오래걸림</li>
  <li>하지만 잘 정의된 RDBMS는 좋은 Data Warehouse가 되고 결과적으로 분석, 활용에 정확성을 제공</li>
  <li>빠른 분석을 위해 RDBMS에서 사용되는 SQL 언어의 특징을 잘 이해해야함</li>
</ul>

<h2 id="relational-data-model">Relational Data Model</h2>

<ul>
  <li>1970년 대 E. F. Codd에 의해 처음 제안</li>
  <li>테이블과 같은 형태로 데이터를 저장할 수 있도록 모델링한 것</li>
  <li>관계형 데이터 모델은 세상을 상호 관계를 가지는 테이블들의 집합으로 묘사</li>
</ul>

<p><img src="/images/data_model_1.png" alt="" /></p>

<p><img src="/images/data_model_2.png" alt="" /></p>

<ul>
  <li>Table: Record의 집합</li>
  <li>Attribute: Record의 속성</li>
  <li>Record: 관계형 모델로 모델링된 데이터</li>
  <li>Degree: 속성(Attribute)의 수</li>
  <li>Cardinality: Unique한 Record의 수 (집합의 크기)</li>
</ul>

<h1 id="nosql">NoSQL</h1>

<ul>
  <li>요즘은 세상의 모든 것들을 데이터로 뽑아낼 수 있다면 수집해서 저장하길 원함</li>
  <li>그런데 온갖 종류의 데이터가 다 관계형 데이터 모델로 정의되지 않음</li>
  <li>Semi-Structured한 데이터를 저장하기 위한 용도로 NoSQL 등장</li>
  <li>RDBMS와 비교해 쿼리의 성능을 조금 포기하는 대신 범용적인 데이터 수집을 가능하게 함</li>
  <li>(JOIN과 같은 쿼리 고급 기능이 없거나, 성능이 떨어짐)</li>
  <li>NoSQL은 데이터를 표현하는 방법도 다양해서 그 안에서도 Document store, Key-value store, Wide column store 등과 같이 더 세분화됨</li>
</ul>

<h2 id="the-benefits-of-nosql">The benefits of NoSQL</h2>

<ul>
  <li>RDBMS에 저장하기에는 비교적 데이터의 변동성이 큰 데이터를 저장할 수 있음</li>
  <li>비교적 빠르게 데이터베이스를 설계할 수 있음</li>
  <li>스키마, 업데이트/삭제 정책과 같은 제약사항이 비교적 덜한 편</li>
  <li>Scale-Out 방식의 데이터베이스 확장이 가능</li>
</ul>

<h1 id="rdbms-vs-nosql">RDBMS vs NoSQL</h1>

<ul>
  <li>RDBMS도 그 종류가 다양하고, NoSQL은 더 다양함 -&gt; 묶어서 비교하는 것은 정확한 비교 방법은 아님</li>
  <li>그래도 최대한 비교 가능한 부분만 가지고 비교해보자</li>
</ul>

<p><img src="/images/data_model_3.png" alt="" /></p>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://khj93.tistory.com/entry/Database-RDBMS%EC%99%80-NOSQL-%EC%B0%A8%EC%9D%B4%EC%A0%90" target="_blank">khj93, [Database] RDBMS와 NoSQL의 차이점</a></li>
  <li><a href="https://opentextbc.ca/dbdesign01/chapter/chapter-7-the-relational-data-model/" target="_blank">BCcampus, The Relational Data Model</a></li>
  <li><a href="https://db-engines.com/en/systems" target="_blank">DB Enigne</a></li>
</ul>
:ET