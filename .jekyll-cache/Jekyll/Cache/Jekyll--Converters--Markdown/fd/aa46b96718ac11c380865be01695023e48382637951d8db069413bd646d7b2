I"%<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#mongodb" id="markdown-toc-mongodb">MongoDB</a>    <ul>
      <li><a href="#몽고db의-역사" id="markdown-toc-몽고db의-역사">몽고DB의 역사</a></li>
      <li><a href="#nosql" id="markdown-toc-nosql">NoSQL</a></li>
    </ul>
  </li>
  <li><a href="#mongodb의-장점" id="markdown-toc-mongodb의-장점">MongoDB의 장점</a></li>
  <li><a href="#mongodb의-특징" id="markdown-toc-mongodb의-특징">MongoDB의 특징</a>    <ul>
      <li><a href="#데이터-구조" id="markdown-toc-데이터-구조">데이터 구조</a></li>
      <li><a href="#bson" id="markdown-toc-bson">BSON</a></li>
      <li><a href="#replica-set" id="markdown-toc-replica-set">Replica Set</a></li>
      <li><a href="#sharded-cluster" id="markdown-toc-sharded-cluster">Sharded Cluster</a></li>
      <li><a href="#wiredtiger-storage-engine" id="markdown-toc-wiredtiger-storage-engine">WiredTiger Storage Engine</a></li>
    </ul>
  </li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="mongodb">MongoDB</h1>

<ul>
  <li>C++로 개발된 <strong>도큐먼트 기반 NoSQL 오픈소스 데이터베이스</strong>이다</li>
</ul>

<h2 id="몽고db의-역사">몽고DB의 역사</h2>

<ul>
  <li>Humongous(거대한) Database를 줄인 MongoDB로 명명</li>
  <li>2007년 뉴욕 기반의 10gen 이라는 기관에서 시작</li>
  <li>기존의 회사가 운영하던 관계형 데이터베이스의 확장성에 심각한 한계점을 느끼고 나서 높은 확장성을 제공하는 데이터베이스를 만들기로 결심</li>
  <li>Kevin P. Ryan, Dwight Merriman 그리고 Eliot Horowitz가 10gen을 나와 MongoDB Inc 라는 회사를 따로 설립</li>
  <li>2009년에 오픈소스로 처음 MongoDB가 세상에 등장</li>
</ul>

<h2 id="nosql">NoSQL</h2>

<ul>
  <li>NoSQL은 RDBMS 처럼 엄격하게 스키마를 정의하지 않고, <strong>Semi-Structured한 형태의 데이터 저장을 지원하는 데이터베이스</strong>이다</li>
  <li>NoSQL의 일반적인 장점: 유연한 스키마, 유연한 확장성, 높은 가용성</li>
  <li>데이터 형태를 표현하는 방법에 따라 Document store, Key-value store, Wide column store 등으로 더욱 세분화된다</li>
</ul>

<h1 id="mongodb의-장점">MongoDB의 장점</h1>

<ul>
  <li><strong>유연한 스키마</strong></li>
  <li><strong>유연한 확장성</strong>: Scale-out, 샤딩, 자체 로드 밸런싱(mongos)</li>
  <li><strong>높은 가용성</strong>: Replica Set</li>
  <li><strong>인덱스 지원</strong>: 프라이머리 키 인덱스, 세컨더리 인덱스</li>
  <li><strong>복잡하고 다양한 쿼리 가능</strong>: Ad-hoc 쿼리, 전문 검색</li>
  <li><strong>BSON 형태의 데이터 저장 포맷</strong>: 데이터 크기가 가벼워짐, 다양한 데이터 타입 지원, 빠른 쿼리</li>
</ul>

<h1 id="mongodb의-특징">MongoDB의 특징</h1>

<h2 id="데이터-구조">데이터 구조</h2>

<ul>
  <li><strong>Database</strong>
    <ul>
      <li>사용자 정의 db</li>
      <li><code class="language-plaintext highlighter-rouge">admin</code> db: 인증과 권한 부여와 관련된 데이터베이스</li>
      <li><code class="language-plaintext highlighter-rouge">local</code> db: 복제 처리와 관련된 데이터베이스</li>
      <li><code class="language-plaintext highlighter-rouge">config</code> db: 분산처리, 샤드(shard)에 관련된 데이터베이스</li>
    </ul>
  </li>
  <li><strong>Collection</strong>
    <ul>
      <li>RDBMS의 테이블과 비슷한 개념</li>
      <li>컬렉션 단위로 동적인 스키마를 가진다</li>
      <li>컬렉션 단위로 인덱스를 생성할 수 있다</li>
      <li>컬렉션 단위로 샤딩할 수 있다</li>
    </ul>
  </li>
  <li><strong>Document</strong>
    <ul>
      <li>RDBMS의 레코드와 비슷한 개념</li>
      <li>다른 도큐먼트, 배열과 같은 필드를 가질 수 있다</li>
      <li>JSON 형태로 표현하고, BSON 형태로 저장한다</li>
      <li>도큐먼트마다 고유한 <code class="language-plaintext highlighter-rouge">_id</code> 프라이머리 키 값이 있다.</li>
      <li>도큐먼트 한 개의 최대 크기는 16MB 이다</li>
    </ul>
  </li>
  <li><strong>Field</strong>
    <ul>
      <li>필드를 추가하기 위해 컬렉션의 스키마를 다시 정의할 필요가 없다</li>
      <li>필드의 추가, 삭제가 자유롭다</li>
    </ul>
  </li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">_id</code> 필드</strong></p>

<ul>
  <li>어떤 데이터 타입이어도 상관 없지만 <code class="language-plaintext highlighter-rouge">ObjectId</code>가 기본이다</li>
  <li>하나의 컬렉션에서 모든 도큐먼트는 고유한 <code class="language-plaintext highlighter-rouge">_id</code> 값을 가진다</li>
  <li><code class="language-plaintext highlighter-rouge">ObjectId</code> 데이터 타입을 사용하는 주된 이유는 몽고DB의 분산 특성 때문이다</li>
  <li>샤딩된 환경에서 고유 식별자를 쉽게 생성하도록 도와준다</li>
  <li>(여러 서버에 걸쳐 자동으로 증가하는 기본 키를 동기화하는 작업은 어렵고 시간이 걸린다)</li>
  <li>(https://www.mongodb.com/docs/manual/core/document/#the-_id-field 참고)</li>
</ul>

<h2 id="bson">BSON</h2>

<ul>
  <li>데이터 입출력 시에는 JSON 형식을 사용</li>
  <li>데이터 저장 시에는 BSON 형식을 사용</li>
  <li>JSON 데이터를 이진 형식으로 인코딩한 포맷</li>
  <li>컴퓨터가 쉽게 이해할 수 있는 이진 포맷으로 검색 속도가 빠름</li>
  <li>날짜 및 이진 데이터 타입을 지원함</li>
  <li>(https://www.mongodb.com/docs/manual/reference/bson-types/ 참고)</li>
</ul>

<p><img src="/images/json_bson_2.png" alt="" /></p>

<h2 id="replica-set">Replica Set</h2>

<p><img src="/images/replica_set_1.png" alt="" /></p>

<ul>
  <li><strong>높은 가용성</strong>을 제공하기 위해 같은 데이터 셋을 저장 및 관리하는 몽고DB의 서버 그룹</li>
  <li>크게 Primary와 Secondary로 구성</li>
  <li><strong>Primary</strong>
    <ul>
      <li>Leader Server</li>
      <li>Read/Write 모두 처리 가능</li>
      <li>Replica Set당 한 개만 존재</li>
    </ul>
  </li>
  <li><strong>Secondary</strong>
    <ul>
      <li>Follower Server</li>
      <li>Read에 대한 요청만 처리 가능 -&gt; Secondary 수를 늘림으로써 Read 분산 처리 가능</li>
      <li>복제를 통해 Primary와 동일한 데이터 셋을 유지</li>
    </ul>
  </li>
  <li>지속적으로 하트비트(Heartbeat)를 주고 받으며 서버 살아 있는지 확인
<img src="/images/replica_set_2.png" alt="" width="50%" /></li>
  <li>Primary 서버가 Replica Set에서 이탈하면 Secondary중에서 새로운 리더를 선출해야함 (Leader election)</li>
  <li><code class="language-plaintext highlighter-rouge">local</code> db의 <code class="language-plaintext highlighter-rouge">Oplog</code> 컬렉션을 통해 복제를 수행</li>
</ul>

<h2 id="sharded-cluster">Sharded Cluster</h2>

<p><img src="/images/sharded_cluster.png" alt="" /></p>

<ul>
  <li><strong>유연한 확장성</strong>을 제공하기 위해 데이터 셋을 일정 기준에 따라 나누어 여러 대의 서버에 분산 저장 및 처리(Write 작업)하는 몽고DB의 서버 그룹</li>
  <li>모든 Shard는 Replica Set으로 구성 (높은 가용성과, 분산 Read 작업도 함께 지원)</li>
  <li>샤딩을 위해서는 Shard Key를 선정해야 하고, 해당 필드에 인덱스가 만들어져 있어야 한다
    <ul>
      <li>Ranged Sharding: 값의 범위에 따라 분산</li>
      <li>Hashed Sharding: 값의 해시 결과에 따라 분산 (가능하면 이 방법을 통해 분산한다)</li>
    </ul>
  </li>
  <li>비교적 관리가 복잡하다는 단점이 있다</li>
</ul>

<h2 id="wiredtiger-storage-engine">WiredTiger Storage Engine</h2>

<ul>
  <li>MongoDB 3.2부터 기본 스토리지 엔진으로 WiredTiger를 사용</li>
  <li>데이터 압축 지원: 4~6배 정도의 압축</li>
  <li>도큐먼트 레벨의 잠금 지원</li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://www.mongodb.com/docs/manual/tutorial/getting-started/" target="_blank">MongoDB 공식문서, Home</a></li>
  <li><a href="https://www.mongodb.com/why-use-mongodb" target="_blank">MongoDB 공식문서, Why Use MongoDB and When to Use It?</a></li>
  <li><a href="https://meetup.toast.com/posts/274" target="_blank">NHN 클라우드, mongoDB Story 1: mongoDB 정의와 NoSQL</a></li>
  <li><a href="https://bytescout.com/blog/2019/09/mongodb-history-and-advantages.html" target="_blank">BYTESCOUT, MONGODB HISTORY AND ADVANTAGES</a></li>
  <li><a href="https://www.guru99.com/what-is-mongodb.html" target="_blank">Guru99, What is MongoDB? Introduction, Architecture, Features &amp; Example</a></li>
  <li><a href="https://www.mongodb.com/docs/manual/replication/" target="_blank">MongoDB 공식문서, Replication</a></li>
  <li><a href="https://freekim.tistory.com/13" target="_blank">프리킴: [MongoDB] 몽고DB 기본 명령어</a></li>
  <li><a href="https://www.confluent.io/hub/debezium/debezium-connector-mongodb" target="_blank">Confluent hub: Debezium MongoDB CDC Source Connector</a></li>
</ul>
:ET