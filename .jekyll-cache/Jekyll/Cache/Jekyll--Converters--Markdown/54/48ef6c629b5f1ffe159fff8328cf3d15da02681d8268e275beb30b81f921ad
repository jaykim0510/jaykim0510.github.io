I"0<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#docker-소개" id="markdown-toc-docker-소개">Docker 소개</a></li>
  <li><a href="#도커의-장점" id="markdown-toc-도커의-장점">도커의 장점</a></li>
  <li><a href="#도커의-구조" id="markdown-toc-도커의-구조">도커의 구조</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />
<h1 id="docker-소개">Docker 소개</h1>

<p><strong>Docker는 컨테이너 기술을 이용해 개개인의 인프라 환경에 상관없이 모든 애플리케이션을 독립적으로 배포, 실행</strong> 가능하도록 해줍니다. 컨테이너 기술은 가상화를 위한 방법 중 하나인데 이에 관한 더 자세한 내용은 추후에 다루어 보도록 하겠습니다.</p>

<p>개발자들에게 있어 골칫거리 중 하나는 새로 만든 애플리케이션을 개발 환경에서 테스트 환경으로, 테스트 환경에서 운영환경으로 옮길 때마다 온갖 이상한 오류를 만난다는 것입니다. 그 이유는 인프라 환경마다 네트워크 기술과 보안 정책, 스토리지가 모두 제각각이어서 그렇습니다. 그래서 ‘소프트웨어를 한 컴퓨팅 환경에서 다른 컴퓨팅 환경으로 이동하면서도 안정적으로 실행하는 방법이 없을까?’라는 고민이 커졌고 그 대답이 바로 컨테이너였습니다.</p>

<p>개념은 간단합니다. 애플리케이션과 그 실행에 필요한 라이브러리, 바이너리, 구성 파일 등을 패키지로 묶어 배포하는 것입니다. 이렇게 하면 노트북-테스트 환경-실제 운영환경으로 바뀌어도 실행에 필요한 파일이 함께 따라다니므로 오류를 최소화할 수 있습니다. <strong>운영체제를 제외하고 애플리케이션 실행에 필요한 모든 파일을 패키징</strong>한다는 점에서 운영체제 위에서 구현된 가상화, 즉 <strong>‘운영체제 레벨 가상화’</strong>라고 부르기도 합니다.</p>

<p>참고로 도커 이전에도 컨테이너 기술을 이용한 운영체제 레벨의 가상화는 있었습니다. 구글에서는 도커가 등장하기 전부터 이러한 기술을 회사 내부적으로 이용하고 있었다고 합니다. 그러나 기술적으로 높은 진입 장벽 때문에 대중화되지 않았던 것 뿐입니다.</p>

<p>이러한 상황 속에서 도커가 등장하게 되면서 <strong>컨테이너 기술</strong>에 대한 접근성이 훨씬 좋아지게 되었고, 개발자들은 이제 모든 애플리케이션을 컨테이너화하여 사용하기 시작했습니다. 이렇게 도커는 인프라 세계를 컨테이너 세상으로 바꿔버렸습니다. 필요한 모든  애플리케이션들을 <strong>도커파일을 이용해 이미지를 만들고 컨테이너로 배포하는 게 흔한 개발 프로세스</strong>가 되었습니다.</p>

<h1 id="도커의-장점">도커의 장점</h1>

<ul>
  <li>애플리케이션을 인프라 환경에 상관없이 빠른 배포할 수 있습니다.</li>
  <li>어플리케이션을 실행하기 위한 독립적인 컨테이너 환경을 제공해 서비스간 디펜던시 오류를 해결해줍니다.</li>
  <li>별다른 운영체제 소프트웨어가 필요없어 가볍습니다.</li>
</ul>

<h1 id="도커의-구조">도커의 구조</h1>
<ul>
  <li>도커의 아키텍처는 클라이언트-서버 아키텍처입니다.</li>
  <li>도커 클라이언트(<code class="language-plaintext highlighter-rouge">docker</code>)는 도커 (REST) API를 사용해 도커 데몬(<code class="language-plaintext highlighter-rouge">dockerd</code>)에게 요청 메시지를 보냅니다.</li>
  <li><code class="language-plaintext highlighter-rouge">dockerd</code>은 요청을 받으면 이미지, 컨테이너, 네트워크, 볼륨과 같은 도커 오브젝트를 생성하고 관리합니다.</li>
  <li>도커 레지스트리는 public한 곳(docker hub)도 있고, private(AWS의 ECR)한 곳도 있습니다. <br />
<img src="/images/docker_3.png" alt="" /></li>
</ul>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://docs.docker.com/get-started/overview/">도커 공식문서</a></li>
  <li><a href="https://www.itworld.co.kr/t/62077/VDI/103469">ITWorld 용어풀이: 컨테이너(container), IT World</a></li>
</ul>
:ET