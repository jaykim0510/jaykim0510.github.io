I"0<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#프론트엔드-영역의-등장" id="markdown-toc-프론트엔드-영역의-등장">프론트엔드 영역의 등장</a>    <ul>
      <li><a href="#html" id="markdown-toc-html">HTML</a></li>
      <li><a href="#자바스크립트" id="markdown-toc-자바스크립트">자바스크립트</a></li>
      <li><a href="#css" id="markdown-toc-css">CSS</a></li>
      <li><a href="#ajax" id="markdown-toc-ajax">Ajax</a></li>
      <li><a href="#spa" id="markdown-toc-spa">SPA</a></li>
    </ul>
  </li>
  <li><a href="#리액트의-등장" id="markdown-toc-리액트의-등장">리액트의 등장</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="프론트엔드-영역의-등장">프론트엔드 영역의 등장</h1>

<h2 id="html">HTML</h2>

<ul>
  <li><strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</li>
  <li>텍스트를 <code class="language-plaintext highlighter-rouge">h1</code>, <code class="language-plaintext highlighter-rouge">div</code> 와 같은 태그로 구조화 하였다</li>
  <li>텍스트로 된 문서에 링크를 입혀 웹 공간에서 문서간 이동을 가능하게 했다</li>
</ul>

<h2 id="자바스크립트">자바스크립트</h2>

<ul>
  <li>웹 브라우저에 동적인 요소를 구현하기 위해 프로그래밍 언어를 개발했다</li>
</ul>

<h2 id="css">CSS</h2>

<ul>
  <li>텍스트의 서식을 따로 분리하기 위해 만들어졌다</li>
</ul>

<h2 id="ajax">Ajax</h2>

<ul>
  <li>Ajax의 등장으로 브라우저는 필요한 부분의 데이터만 비동기적으로 받아와 변경된 부분만 재렌더링할 수 있게 되었다</li>
</ul>

<h2 id="spa">SPA</h2>

<p><img src="/images/react_frontend_1.png" alt="" />
<em><a href="https://www.scalablepath.com/front-end/single-page-applications">출처: Scalable Path</a></em></p>

<ul>
  <li><strong>S</strong>ingle <strong>P</strong>age <strong>A</strong>pplication</li>
  <li>하나의 HTML 파일(index.html)만 이용해 서비스를 제공하는 어플리케이션을 말한다</li>
  <li>하나의 HTML 파일에 <strong>변경되는 요소만 재렌더링 하는 방식으로 훨씬 부드러운 사용자 경험을 제공</strong>한다</li>
  <li>프론트엔드의 랜더링 방식을 페이지 단위의 렌더링에서 <strong>컴포넌트 단위의 렌더링으로 변화</strong>시켰다</li>
  <li>Ajax가 SPA를 촉발시켰으며, SPA의 등장으로 서버는 이제 더이상 전체 HTML 파일을 제공할 필요 없이, 필요한 데이터만 JSON 형식으로 보내면 되게 되었다</li>
  <li>이로 인해 서버사이드 진영에서는 자연스럽게 <strong>화면을 담당하는 코드와 데이터를 담당하는 코드를 분리하는 MVC 패턴 형태</strong>로 코드를 작성하게 되었다</li>
  <li>그리고 웹 애플리케이션의 규모가 점점 커지게 되면서, <strong>프론트엔드라는 영역이 따로 분리</strong>되어 생겨났다</li>
</ul>

<div class="bell-para">
    <div class="bell-bar">
      <i class="fa-solid fa-bell"></i>
      SPA의 장단점
    </div>
    <div class="bell-content">
      <ul>
        <li>장점
          <ul>
            <li>페이지 이동에 있어 유저에게 더 높은 UX 를 제공한다</li>
            <li>JSON API 를 통해 느슨한 결합 형태로 설계할 수 있다</li>
          </ul>
        </li>
        <li>단점
          <ul>
            <li>유저가 처음 접속시 필요한 모든 요소를 자바스크립트 코드 실행을 통해 만들기 때문에 오래 걸린다</li>
            <li>HTML 파일이 데이터로 모두 채워져 있지 않기 때문에 SEO의 성능이 낮다</li>
            <li>이후에 알아볼 리액트 또한 SPA 기반 프레임워크인데, 이러한 단점을 서버사이드 렌더링(SSR)으로 보완했다</li>
          </ul>
        </li>
      </ul>
    </div>
</div>

<h1 id="리액트의-등장">리액트의 등장</h1>

<ul>
  <li>UI 만을 담당하는 프론트엔드라는 영역이 따로 분리된 데에는 그만큼 프론트엔드 영역의 규모와 복잡성이 커졌기 때문이다</li>
  <li>페이스북은 프론트엔드 영역에도 프레임워크의 필요성을 느끼고 2013년 리액트를 세상에 공개했다</li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://www.scalablepath.com/front-end/single-page-applications">What Is a Single-Page Application (SPA)? Pros &amp; Cons With Examples, Scalable path</a></li>
</ul>
:ET