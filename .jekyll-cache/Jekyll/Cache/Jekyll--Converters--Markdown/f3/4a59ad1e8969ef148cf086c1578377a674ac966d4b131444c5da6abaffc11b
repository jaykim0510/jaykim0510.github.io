I"G><hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#sync-vs-async" id="markdown-toc-sync-vs-async">Sync vs. Async</a></li>
  <li><a href="#sync" id="markdown-toc-sync">Sync</a></li>
  <li><a href="#async" id="markdown-toc-async">Async</a></li>
  <li><a href="#con" id="markdown-toc-con">con</a></li>
  <li><a href="#parallel" id="markdown-toc-parallel">parallel</a></li>
  <li><a href="#multi-processing" id="markdown-toc-multi-processing">multi processing</a></li>
  <li><a href="#multi-threading" id="markdown-toc-multi-threading">multi threading</a></li>
  <li><a href="#there-are-several-scenarios-in-which-concurrency-can-occur" id="markdown-toc-there-are-several-scenarios-in-which-concurrency-can-occur">There are several scenarios in which concurrency can occur:</a></li>
  <li><a href="#스레드로-나눌-수-있는-기준" id="markdown-toc-스레드로-나눌-수-있는-기준">스레드로 나눌 수 있는 기준</a></li>
  <li><a href="#멀티-프로세싱을-위해-프로세스를-나눌-수-있는-기준" id="markdown-toc-멀티-프로세싱을-위해-프로세스를-나눌-수-있는-기준">멀티 프로세싱을 위해 프로세스를 나눌 수 있는 기준</a></li>
  <li><a href="#global-interpreter-lock" id="markdown-toc-global-interpreter-lock">Global Interpreter Lock</a></li>
  <li><a href="#콜백-함수" id="markdown-toc-콜백-함수">콜백 함수</a></li>
  <li><a href="#thread-safe" id="markdown-toc-thread-safe">Thread Safe</a></li>
</ul>
<hr />

<p><img src="/images/os_35.png" alt="" /></p>

<ul>
  <li>동기성은 각각의 작업을 시작하고 끝내는 것을 순차적으로 하는 것을 의미한다. 동기적으로 프로그래밍했다면, 여러 개의 프로그램을</li>
  <li>비동기성은 각각의 작업이 다른 작업의 시작과 끝에 종속되지 않는 것을 의미한다.</li>
  <li>동시성은 프로세스내 작업들을 순차적으로 시작하고 마치는 것이 아니라 동시다발적으로 실행하는 것을 의미한다.</li>
  <li>병렬성은 여러 개의 코어를 사용하는 것을 의미한다.</li>
</ul>

<p>상황에 맞게 적절히 비동기 프로그래밍을 할 수 있는 것은 중요하다.</p>

<h1 id="sync-vs-async">Sync vs. Async</h1>
<p>Sync and async are two different programming models, which refer to styles of programming - how you should write code and how your code will run.</p>

<p>Synchronous tasks happen in order — you must finish task one before moving on to the next. Asynchronous tasks can be executed in any order, or even simultaneously. How can this be understood in terms of programming?</p>

<p>Understanding how these two models differ is critical in building application programming interfaces (APIs), creating event-based architectures, and deciding how to handle long-running tasks. In choosing which method to use and when, it’s important to know a few key things about synchronous programming and asynchronous programming.</p>

<p>The differences between asynchronous and synchronous include:</p>

<p>Async is multi-thread, which means operations or programs can run in parallel. Sync is single-thread, so only one operation or program will run at a time.<br />
Async is non-blocking, which means it will send multiple requests to a server. Sync is blocking — it will only send the server one request at a time and will wait for that request to be answered by the server.<br />
Async increases throughput because multiple operations can run at the same time. Sync is slower and more methodical.
Differences aside, asynchronous and synchronous methods both offer advantages, but for different stakeholders: async for users, sync for developers.</p>

<p>Asynchronous programming enhances a user’s experience by decreasing the lag time between when a function is called and when the value of that function is returned. In the real world, this translates to a faster, more seamless flow. For example, users want their apps to run fast, but it takes time to fetch data from an application programming interface (API). In these cases, asynchronous programming helps the app screens load faster, improving the user experience.</p>

<p>Synchronous programming, on the other hand, is advantageous for developers. Quite simply, synchronous programming is much easier to code. It’s well supported among all programming languages, and as the default programming method, developers don’t have to spend time learning something new that could open the door to bugs.</p>

<p>When to use async<br />
Asynchronous programming should only be used in programming independent tasks, where it plays a critical role. For instance, asynchronous programs are ideal for development projects with a large number of iterations. Because steps don’t have to follow a fixed sequence, asynchronous programming keeps development moving forward.</p>

<p>Responsive UI is a great use case for asynchronous planning. Take, for example, a shopping app. When a user pulls up their order, the font size should increase. Instead of first waiting to load the history and update the font size, asynchronous programming can make both actions happen simultaneously.</p>

<p>When to use sync<br />
Asynchronous programming is relatively complex. It can overcomplicate things and make code difficult to read. Synchronous programming, on the other hand, is fairly straightforward; its code is easier to write and doesn’t require tracking and measuring process flows (as async does). Because tasks are dependent on each other, there’s a need to know if they could run independently without interrupting each other.</p>

<p>Synchronous programming could be appropriate for a shopping app, for example. When checking out online, a user wants to buy all of their items together, not individually. Instead of completing an order every time the user adds something to their cart, synchronous programming ensures that the payment method and shipping destination for all items are selected at the same time.</p>

<h1 id="sync">Sync</h1>

<p>Synchronous is known as a blocking architecture and is ideal for programming reactive systems. As a single-thread model, it follows a strict set of sequences, which means that operations are performed one at a time, in perfect order. While one operation is being performed, other operations’ instructions are blocked. The completion of the first task triggers the next, and so on.</p>

<p>To illustrate how synchronous programming works, think of a telephone. During a phone call, while one person speaks, the other listens. When the first person finishes, the second tends to respond immediately.</p>

<p>동기 프로그래밍으로 작성된 코드는 내가 작성한 순서대로 실행될 것이다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">func</span> <span class="nx">step1</span><span class="p">()</span> <span class="p">{</span> <span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">func</span> <span class="nx">step2</span><span class="p">()</span> <span class="p">{</span> <span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>

<span class="nx">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">step1</span><span class="p">()</span>
    <span class="nx">step2</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// result -&gt; 12</span>
</code></pre></div></div>

<p>동기 프로그래밍은 우리가 결과를 예측할 수 있기 때문에 predictable programming model이라고도 한다. 대부분의 프로그래밍 언어가 동기 프로그래밍을 디폴트로 한다.</p>

<h1 id="async">Async</h1>

<p>Asynchronous programming, conversely, is a multithreaded model that’s most applicable to networking and communications. Asynchronous is a non-blocking architecture, which means it doesn’t block further execution while one or more operations are in progress.</p>

<p>With asynchronous programming, multiple related operations can run concurrently without waiting for other tasks to complete. During asynchronous communication, parties receive and process messages when it’s convenient or possible to do so, rather than responding immediately upon receipt.</p>

<p>Texting is an asynchronous communication method. One person can send a text message and the recipient can respond at their leisure. In the meantime, the sender may do other things while waiting for a response.<br />
비동기 프로그래밍으로 작성된 코드는 내부에 작성된 작업들이 동시다발적으로 실행된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">func</span> <span class="nx">task1</span><span class="p">()</span> <span class="p">{</span> <span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>
<span class="nx">func</span> <span class="nx">task2</span><span class="p">()</span> <span class="p">{</span> <span class="nx">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span>

<span class="nx">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">task1</span><span class="p">()</span>
    <span class="nx">task2</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// result -&gt; 12 or 21</span>
</code></pre></div></div>

<p>위의 결과를 보면 결과가 undeterministic하다. 이러한 특성 때문에 비동기 프로그래밍을 unpredictable programming model이라고도 한다. 비동기 프로그래밍은 각각의 작업이 서로 의존적이지 않은 경우, 그리고 순서가 중요하지 않은 경우에 사용할 수 있다.</p>

<h1 id="con">con</h1>

<p><img src="/images/os_33.png" alt="" /></p>

<p>동시성(Concurrency)를 얻으려면 무조건 비동기 프로그래밍으로 코드를 작성해야 한다.</p>

<p>Concurrent and parallel are effectively the same principle as you correctly surmise, both are related to tasks being executed simultaneously although I would say that parallel tasks should be truly multitasking, executed “at the same time” whereas concurrent could mean that the tasks are sharing the execution thread while still appearing to be executing in parallel.</p>

<p>Asynchronous methods aren’t directly related to the previous two concepts, asynchrony is used to present the impression of concurrent or parallel tasking but effectively an asynchronous method call is normally used for a process that needs to do work away from the current application and we don’t want to wait and block our application awaiting the response.</p>

<p>For example, getting data from a database could take time but we don’t want to block our UI waiting for the data. The async call takes a call-back reference and returns execution back to your code as soon as the request has been placed with the remote system. Your UI can continue to respond to the user while the remote system does whatever processing is required, once it returns the data to your call-back method then that method can update the UI (or handoff that update) as appropriate.</p>

<p>Concurrency means executing multiple tasks at the same time but not necessarily simultaneously. When you have to perform more than one task but you have a single resource then we go for concurrency. In a single-core environment, concurrency is achieved by context switching.</p>

<p>Parallelism is like performing more than one task simultaneously like you can sing and bath together. Now you are doing the tasks in parallel.</p>

<p>The term asynchronous is related to thread execution. In an asynchronous model, when one task gets executed, you can switch to a different task without waiting for the previous task to get completed.</p>

<p>Asynchronous programming helps us to achieve concurrency. Asynchronous programming in a multi-threaded environment is a way to achieve parallelism.</p>

<h1 id="parallel">parallel</h1>

<p><img src="/images/os_34.png" alt="" /></p>

<h1 id="multi-processing">multi processing</h1>

<h1 id="multi-threading">multi threading</h1>

<p>race condition, deadlocks, shared resources, and callbacks events 같은 문제들을 처리해야한다.</p>

<h1 id="there-are-several-scenarios-in-which-concurrency-can-occur">There are several scenarios in which concurrency can occur:</h1>

<p>Asynchrony— This means that your program performs non-blocking operations. For example, it can initiate a request for a remote resource via HTTP and then go on to do some other task while it waits for the response to be received. It’s a bit like when you send an email and then go on with your life without waiting for a response.</p>

<p>Parallelism— This means that your program leverages the hardware of multi-core machines to execute tasks at the same time by breaking up work into tasks, each of which is executed on a separate core. It’s a bit like singing in the shower: you’re actually doing two things at exactly the same time.</p>

<p>Multithreading— This is a software implementation allowing different threads to be executed concurrently. A multithreaded program appears to be doing several things at the same time even when it’s running on a single-core machine. This is a bit like chatting with different people through various IM windows; although you’re actually switching back and forth, the net result is that you’re having multiple conversations at the same time.</p>

<h1 id="스레드로-나눌-수-있는-기준">스레드로 나눌 수 있는 기준</h1>

<h1 id="멀티-프로세싱을-위해-프로세스를-나눌-수-있는-기준">멀티 프로세싱을 위해 프로세스를 나눌 수 있는 기준</h1>

<h1 id="global-interpreter-lock">Global Interpreter Lock</h1>

<h1 id="콜백-함수">콜백 함수</h1>

<ul>
  <li>함수 안에 인자로 전달되는 함수</li>
  <li>fun1(fun2) -&gt; fun1 함수를 실행하는 도중에 fun2 함수가 실행되고 fun2 함수가 종료된 후 fun1 함수가 마저 실행됨</li>
  <li>fun2와 같은 함수를 콜백 함수라고 함</li>
</ul>

<h1 id="thread-safe">Thread Safe</h1>

<ul>
  <li><a href="https://phuctm97.com/blog/sync-async-concurrent-parallel" target="_blank">Minh-Phuc Tran, Sync vs. Async vs. Concurrent vs. Parallel</a></li>
  <li><a href="https://blog.devgenius.io/concurrency-multi-threading-multi-processing-asynchronous-programming-and-event-loop-1b8df9fa6c20" target="_blank">Concurrency, Multi-threading, Multi-processing, Asynchronous Programming and Event Loop</a></li>
  <li><a href="https://oxylabs.io/blog/concurrency-vs-parallelism" target="_blank">oxylabs, Concurrency vs Parallelism: The Main Differences</a></li>
  <li><a href="https://www.mendix.com/blog/asynchronous-vs-synchronous-programming/" target="_blank">David Bevans, Asynchronous vs. Synchronous Programming: Key Similarities and Differences</a></li>
  <li><a href="https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods" target="_blank">stackoverflow, What is the difference between concurrency, parallelism and asynchronous methods?</a></li>
  <li><a href="https://jayhyun-hwang.github.io/2021/09/02/The-Difference-Between-Asynchronous-And-Multi-Threading/" target="_blank">비동기와 멀티스레딩</a></li>
</ul>
:ET