I"k<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#해시테이블" id="markdown-toc-해시테이블">해시테이블</a>    <ul>
      <li><a href="#해시-충돌-해결" id="markdown-toc-해시-충돌-해결">해시 충돌 해결</a></li>
    </ul>
  </li>
  <li><a href="#딕셔너리" id="markdown-toc-딕셔너리">딕셔너리</a></li>
</ul>

<hr />
<h1 id="해시테이블">해시테이블</h1>

<ul>
  <li>해시 테이블은 <strong>키-값을 쌍으로 저장해둔 자료구조</strong>로 값(value)에 해당하는 키(key)가 무엇인지만 알면 어디에 위치한 값(value)이든 평균적으로 O(1)으로 값을 찾을 수 있다.</li>
  <li>키 값이 해시 함수를 통과해 해시값이 되면, 이 해시값을 인덱스로 하는 배열에 키-값 쌍을 저장한다.</li>
  <li>인덱스가 저장되는 자료구조가 배열이기 때문에, 인덱스만 알면 평균적으로 O(1)에 키-값 쌍에 접근이 가능하다.</li>
  <li>평균적으로 O(1)인 이유는 해시 함수의 한계로 인해 해시값 충돌이 불가피하기 때문이다.</li>
  <li>해시값 충돌이 발생했을 때 이를 해결하는데 시간이 걸림 -&gt; 분할 상환 분석에 기반해 O(1)</li>
</ul>

<p><img src="/images/hash.png" alt="" /></p>

<h2 id="해시-충돌-해결">해시 충돌 해결</h2>

<p><img src="/images/collision.png" alt="" /></p>

<p>충돌은 크게 두 가지 방법으로 해결한다.</p>

<p>한 가지는 충돌이 발생했을 때, 두 쌍을 서로 체이닝 하여 저장하는 것이다. 이를 체이닝(Chaining) 방식이라고 한다.</p>

<p>두 번째는 충돌이 발생했을 때, 배열의 다른 빈공간을 찾는 것이다. 빈공간을 찾는데에는 선형 방식과 제곱 방식이 있다. 이러한 충돌 해결 방식을 개방주소법(Open Addressing) 방식이라고 한다</p>

<h1 id="딕셔너리">딕셔너리</h1>

<p>파이썬에서 해시 테이블로 구현된 자료형은 <strong>딕셔너리</strong>입니다.</p>

<p>딕셔너리는 <strong>대부분의 연산을 O(1)</strong>으로 처리할 수 있다는 점에서 성능이 매우 우수합니다.</p>

<table>
  <tbody>
    <tr>
      <td><strong>연산</strong></td>
      <td><strong>시간복잡도</strong></td>
    </tr>
    <tr>
      <td>len(a)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>a[key]</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>key in a</td>
      <td>O(1)</td>
    </tr>
  </tbody>
</table>

<p>파이썬에서는 이외에도 딕셔너리에서 자주 사용되는 성질들을 편하게 사용하는 기능을 제공해주는 다양한 모듈들을 가지고 있습니다. 대표적으로 <code class="language-plaintext highlighter-rouge">collections.defaultdict()</code>, <code class="language-plaintext highlighter-rouge">collections.Counter()</code>가 있습니다.</p>

:ET