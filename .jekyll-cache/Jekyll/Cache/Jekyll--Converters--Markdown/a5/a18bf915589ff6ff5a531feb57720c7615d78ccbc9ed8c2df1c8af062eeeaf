I"[<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#container-layer" id="markdown-toc-container-layer">Container Layer</a></li>
  <li><a href="#ufs" id="markdown-toc-ufs">UFS</a></li>
  <li><a href="#cow" id="markdown-toc-cow">CoW</a></li>
  <li><a href="#storage-driver" id="markdown-toc-storage-driver">Storage Driver</a></li>
</ul>

<hr />

<p>도커를 공부하면서 궁금했던 것 중에 하나가 <em>컨테이너에서 생성된 파일은 어디에 저장되어 있는걸까?</em> 였습니다. 그동안 저는 도커에 다른 저장소를 마운트하면 컨테이너에서 생성된 데이터를 저장할 수 있고 그렇지 않다면 컨테이너가 삭제되면서 같이 사라진다라고 알고 있었는데 그러면 <strong>컨테이너가 사라지기 전까지는 어디에 저장</strong>되어 있는지 궁금해졌습니다.</p>

<p>그러던 중 좋은 글을 공유해 놓은 블로그를 알게되어 이와 관련해 정리해보았습니다. <a href="http://cloudrain21.com/examination-of-docker-containersize-ufs" target="_blank">(참고: Rain.i 블로그)</a></p>

<h1 id="container-layer">Container Layer</h1>

<p>도커 컨테이너는 도커 이미지로부터 만들어진 인스턴스입니다. 도커 이미지를 토대로 여러 개의 컨테이너를 만들 수 있습니다. 예를 들어 우분투 운영체제를 제공하는 이미지를 이용해 어떤 컨테이너에는 파이썬을 설치하고, 어떤 곳에는 nginx를 설치해 웹 서버로 사용할 수도 있습니다. 이렇게 새로운 소프트웨어를 설치하거나 파일을 생성하는 등의 작업은 <strong>Container Layer</strong> 위에서 이루어집니다. <del>이걸 보면 도커는 각각의 서비스를 컨테이너화 했을 뿐 아니라 컨테이너도 또 컨테이너화 한 것 같은 느낌이 드네요.</del></p>

<p><img src="../../images/docker_5.png" alt="" /></p>

<p>도커가 컨테이너를 이런식으로 구현한 이유는 이미지의 상태를 최대한 그대로 보존하여 컨테이너를 계속 생성하더라도 토대가 변하지 않아 <strong>예상치 못한 오류를 예방할 수 있고 관리하기도 편합니다.</strong> 사용하는 입장에서도 어차피 컨테이너를 삭제하면 원래 기본 이미지 상태로 돌아가니까 <strong>걱정없이 컨테이너를 조작할 수 있을 것 입니다.</strong></p>

<p>우선 컨테이너를 생성하고 새로운 데이터를 생성하면 도커 상에서는 Container Layer에 저장된다는 것을 알았습니다. 그런데 Container Layer도 결국 도커를 띄운 호스트의 자원을 이용하기 때문에 제 컴퓨터(로컬이라면 데스크탑이나 노트북, 리모트라면 AWS의 EC2 정도) 어딘가에 저장이 되어 있을 것입니다. 이렇게 컨테이너들이 사용하는 이미지나 변경사항들은 모두 호스트 File system 의 <code class="language-plaintext highlighter-rouge">/var/lib/docker</code> 디렉토리 내에 저장된다. 이 영역을 <strong>Docker area</strong> 또는 <strong>Backing Filesystem</strong> 이라고 부르기도 한다.</p>

<p>만약 컨테이너에서 생성된 파일을 버리지 않고 저장하고 싶다면 다음의 두 가지 방법을 사용할 수 있습니다.</p>

<ul>
  <li><strong>Commit</strong>: 컨테이너 상에서 변경을 수행한 후 새로운 이미지로 만들어둔다.</li>
  <li><strong>Volume</strong>: 변경사항을 로컬 또는 외부 볼륨에 저장하도록 한다.</li>
</ul>

<h1 id="ufs">UFS</h1>
<p>위의 내용을 읽다보면 이러한 의문이 생길 수 있습니다. <em>ubuntu 이미지가 가지고 있던 Filesystem이 아닌 별도의 Filesystem에 Container Layer의 데이터가 저장이 되는데 왜 우리는 컨테이너를 사용할 때 이러한 사실을 몰랐을까?</em> 그 이유는 바로 도커에서는 <strong>UFS(Union File System)</strong>라는 방식을 이용해 <strong>Image Layer와 Container Layer의 Filesystem을 하나로 통합</strong>해서 저희에게 제공해줍니다.</p>

<p><img src="../../images/docker_6.png" alt="" /></p>

<p>이러한 UFS 방식의 장점은 무엇일까요? 가장 큰 장점은 Image Layer의 데이터를 여러 컨테이너가 공유할 수 있다는 점입니다. 공유한다는 것은 <strong>여러 개의 컨테이너를 띄우더라도 Image Layer의 데이터 용량은 단 1개만큼만 저장</strong>된다는 말입니다.</p>

<p><img src="../../images/docker_7.png" alt="" /></p>

<h1 id="cow">CoW</h1>
<p>위의 그림과 같이 Image Layer의 <em><code class="language-plaintext highlighter-rouge">a</code></em>라는 파일을 <em><code class="language-plaintext highlighter-rouge">a'</code></em>으로 수정할 때 Image Layer에서 파일이 수정되지 않고 Container Layer 위에서 새로 파일을 복사한 후 수정하는 것을 <strong>CoW(Copy on Write)</strong>라고 합니다. 이러한 기법을 통해 기존의 image 에 대한 변경을 막을 수 있습니다. 하지만 Copy-on-Write 기법은 그 동작 구조 상 다음의 단점이 있습니다.</p>

<ul>
  <li><strong>Performance Overhead</strong>: data 를 먼저 복제(Copy)한 후 변경을 수행해야함</li>
  <li><strong>Capacity Overhead</strong>: 원본 데이터 뿐 아니라, 변경된 데이터도 저장해야함
    <h1 id="storage-driver">Storage Driver</h1>
  </li>
</ul>
:ET