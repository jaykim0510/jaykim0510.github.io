I"GM<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#pyflink" id="markdown-toc-pyflink">PyFlink</a></li>
  <li><a href="#datastream-api" id="markdown-toc-datastream-api">DataStream API</a>    <ul>
      <li><a href="#datastream-api-맛보기" id="markdown-toc-datastream-api-맛보기">DataStream API 맛보기</a></li>
    </ul>
  </li>
  <li><a href="#table-api" id="markdown-toc-table-api">Table API</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="pyflink">PyFlink</h1>

<p><img src="/images/flink_30.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install apache-flink
</code></pre></div></div>

<ul>
  <li>PyFlink는 <strong>실시간 데이터 처리 파이프라인 작업을 수행하는데 필요한 고수준 API를 제공</strong></li>
  <li>크게 두 가지의 <strong>Table API, DataStream API</strong>를 제공</li>
  <li>
    <p>제공받은 API를 이용해 실시간 데이터 처리를 위한 스크립트를 <strong>파이썬</strong> 언어로 작성할 수 있음</p>
  </li>
  <li>Table API는 SQL과 유사한 형태의 강력한 관계형 쿼리를 작성하는데 필요한 기능을 제공</li>
</ul>

<h1 id="datastream-api">DataStream API</h1>

<ul>
  <li>DataStream API는 시간, 상태와 같은 스트림 처리의 핵심이 되는 개념들을 다루는데 필요한 기능을 제공</li>
  <li><strong>Filtering, Update state, Defining window, Aggregating</strong>과 같은 스트림 데이터 변환 기능을 제공</li>
</ul>

<h2 id="datastream-api-맛보기">DataStream API 맛보기</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># DataStream API 관련 패키지 임포트하기
</span>
<span class="kn">from</span> <span class="nn">pyflink.common</span> <span class="kn">import</span> <span class="n">WatermarkStrategy</span><span class="p">,</span> <span class="n">Encoder</span><span class="p">,</span> <span class="n">Types</span>
<span class="kn">from</span> <span class="nn">pyflink.datastream</span> <span class="kn">import</span> <span class="n">StreamExecutionEnvironment</span><span class="p">,</span> <span class="n">RuntimeExecutionMode</span>
<span class="kn">from</span> <span class="nn">pyflink.datastream.connectors</span> <span class="kn">import</span> <span class="p">(</span><span class="n">FileSource</span><span class="p">,</span> <span class="n">StreamFormat</span><span class="p">,</span> <span class="n">FileSink</span><span class="p">,</span> <span class="n">OutputFileConfig</span><span class="p">,</span> <span class="n">RollingPolicy</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 스트리밍 프로그램이 실행되는 실행환경
# 작업의 특성을 설정
# 소스 생성
# 작업의 실행 트리거
</span>
<span class="n">env</span> <span class="o">=</span> <span class="n">StreamExecutionEnvironment</span><span class="p">.</span><span class="n">get_execution_environment</span><span class="p">()</span>
<span class="n">env</span><span class="p">.</span><span class="n">set_runtime_mode</span><span class="p">(</span><span class="n">RuntimeExecutionMode</span><span class="p">.</span><span class="n">BATCH</span><span class="p">)</span>
<span class="n">env</span><span class="p">.</span><span class="n">set_parallelism</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># env를 이용해서 소스 생성
# 소스는 외부시스템에서 데이터 가져옴
</span>
<span class="n">ds</span> <span class="o">=</span> <span class="n">env</span><span class="p">.</span><span class="n">from_source</span><span class="p">(</span>
    <span class="n">source</span><span class="o">=</span><span class="n">FileSource</span><span class="p">.</span><span class="n">for_record_stream_format</span><span class="p">(</span><span class="n">StreamFormat</span><span class="p">.</span><span class="n">text_line_format</span><span class="p">(),</span>
                                               <span class="n">input_path</span><span class="p">)</span>
                     <span class="p">.</span><span class="n">process_static_file_set</span><span class="p">().</span><span class="n">build</span><span class="p">(),</span>
    <span class="n">watermark_strategy</span><span class="o">=</span><span class="n">WatermarkStrategy</span><span class="p">.</span><span class="n">for_monotonous_timestamps</span><span class="p">(),</span>
    <span class="n">source_name</span><span class="o">=</span><span class="s">"file_source"</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 데이터 변환
# 싱크에 데이터 쓰기
</span>
<span class="n">ds</span><span class="p">.</span><span class="n">sink_to</span><span class="p">(</span>
    <span class="n">sink</span><span class="o">=</span><span class="n">FileSink</span><span class="p">.</span><span class="n">for_row_format</span><span class="p">(</span>
        <span class="n">base_path</span><span class="o">=</span><span class="n">output_path</span><span class="p">,</span>
        <span class="n">encoder</span><span class="o">=</span><span class="n">Encoder</span><span class="p">.</span><span class="n">simple_string_encoder</span><span class="p">())</span>
    <span class="p">.</span><span class="n">with_output_file_config</span><span class="p">(</span>
        <span class="n">OutputFileConfig</span><span class="p">.</span><span class="n">builder</span><span class="p">()</span>
        <span class="p">.</span><span class="n">with_part_prefix</span><span class="p">(</span><span class="s">"prefix"</span><span class="p">)</span>
        <span class="p">.</span><span class="n">with_part_suffix</span><span class="p">(</span><span class="s">".ext"</span><span class="p">)</span>
        <span class="p">.</span><span class="n">build</span><span class="p">())</span>
    <span class="p">.</span><span class="n">with_rolling_policy</span><span class="p">(</span><span class="n">RollingPolicy</span><span class="p">.</span><span class="n">default_rolling_policy</span><span class="p">())</span>
    <span class="p">.</span><span class="n">build</span><span class="p">()</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>


<span class="n">ds</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="n">flat_map</span><span class="p">(</span><span class="n">split</span><span class="p">)</span> \
       <span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">output_type</span><span class="o">=</span><span class="n">Types</span><span class="p">.</span><span class="n">TUPLE</span><span class="p">([</span><span class="n">Types</span><span class="p">.</span><span class="n">STRING</span><span class="p">(),</span> <span class="n">Types</span><span class="p">.</span><span class="n">INT</span><span class="p">()]))</span> \
       <span class="p">.</span><span class="n">key_by</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> \
       <span class="p">.</span><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">:</span> <span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 스트림 작업 실행
# 플링크는 lazy operation -&gt; MapReduce에서 Map과 같은 연산이 일어나는 시점에 클러스터로 작업 전달
</span>
<span class="n">env</span><span class="p">.</span><span class="n">execute</span><span class="p">()</span>
</code></pre></div></div>

<p><a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/python/datastream_tutorial/" target="_blank"><strong>전체 코드 참고</strong></a></p>

<h1 id="table-api">Table API</h1>

<ul>
  <li>배치, 스트림 처리를 위한 필요한 기능을 제공</li>
  <li>EDA, ETL과 같은 애플리케이션을 쉽게 정의하기 위해 일반적으로 사용됨</li>
  <li>데이터가 유한(Bounded), 무한(Unbounded)한 경우에 관계없이 같은 의미</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pyflink.common</span> <span class="kn">import</span> <span class="n">Row</span>
<span class="kn">from</span> <span class="nn">pyflink.table</span> <span class="kn">import</span> <span class="p">(</span><span class="n">EnvironmentSettings</span><span class="p">,</span> <span class="n">TableEnvironment</span><span class="p">,</span>       
                           <span class="n">TableDescriptor</span><span class="p">,</span> <span class="n">Schema</span><span class="p">,</span>
                           <span class="n">DataTypes</span><span class="p">,</span> <span class="n">FormatDescriptor</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">pyflink.table.expressions</span> <span class="kn">import</span> <span class="n">lit</span><span class="p">,</span> <span class="n">col</span>
<span class="kn">from</span> <span class="nn">pyflink.table.udf</span> <span class="kn">import</span> <span class="n">udtf</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 테이블 환경 생성
# 플링크 런타임과 상호작용하기 위한 엔트리 포인트
# 실행을 위한 세팅(재시작 전략, 병렬성 등)
</span><span class="n">t_env</span> <span class="o">=</span> <span class="n">TableEnvironment</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">EnvironmentSettings</span><span class="p">.</span><span class="n">in_streaming_mode</span><span class="p">())</span>
<span class="n">t_env</span><span class="p">.</span><span class="n">get_config</span><span class="p">().</span><span class="nb">set</span><span class="p">(</span><span class="s">"parallelism.default"</span><span class="p">,</span> <span class="s">"1"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 테이블 생성
</span>
<span class="n">t_env</span><span class="p">.</span><span class="n">create_temporary_table</span><span class="p">(</span>
    <span class="s">'source'</span><span class="p">,</span>
    <span class="n">TableDescriptor</span><span class="p">.</span><span class="n">for_connector</span><span class="p">(</span><span class="s">'filesystem'</span><span class="p">)</span>
        <span class="p">.</span><span class="n">schema</span><span class="p">(</span><span class="n">Schema</span><span class="p">.</span><span class="n">new_builder</span><span class="p">()</span>
                <span class="p">.</span><span class="n">column</span><span class="p">(</span><span class="s">'word'</span><span class="p">,</span> <span class="n">DataTypes</span><span class="p">.</span><span class="n">STRING</span><span class="p">())</span>
                <span class="p">.</span><span class="n">build</span><span class="p">())</span>
        <span class="p">.</span><span class="n">option</span><span class="p">(</span><span class="s">'path'</span><span class="p">,</span> <span class="n">input_path</span><span class="p">)</span>
        <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'csv'</span><span class="p">)</span>
        <span class="p">.</span><span class="n">build</span><span class="p">())</span>
<span class="n">tab</span> <span class="o">=</span> <span class="n">t_env</span><span class="p">.</span><span class="n">from_path</span><span class="p">(</span><span class="s">'source'</span><span class="p">)</span>

<span class="n">t_env</span><span class="p">.</span><span class="n">create_temporary_table</span><span class="p">(</span>
    <span class="s">'sink'</span><span class="p">,</span>
    <span class="n">TableDescriptor</span><span class="p">.</span><span class="n">for_connector</span><span class="p">(</span><span class="s">'filesystem'</span><span class="p">)</span>
        <span class="p">.</span><span class="n">schema</span><span class="p">(</span><span class="n">Schema</span><span class="p">.</span><span class="n">new_builder</span><span class="p">()</span>
                <span class="p">.</span><span class="n">column</span><span class="p">(</span><span class="s">'word'</span><span class="p">,</span> <span class="n">DataTypes</span><span class="p">.</span><span class="n">STRING</span><span class="p">())</span>
                <span class="p">.</span><span class="n">column</span><span class="p">(</span><span class="s">'count'</span><span class="p">,</span> <span class="n">DataTypes</span><span class="p">.</span><span class="n">BIGINT</span><span class="p">())</span>
                <span class="p">.</span><span class="n">build</span><span class="p">())</span>
        <span class="p">.</span><span class="n">option</span><span class="p">(</span><span class="s">'path'</span><span class="p">,</span> <span class="n">output_path</span><span class="p">)</span>
        <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">FormatDescriptor</span><span class="p">.</span><span class="n">for_format</span><span class="p">(</span><span class="s">'canal-json'</span><span class="p">)</span>
                <span class="p">.</span><span class="n">build</span><span class="p">())</span>
        <span class="p">.</span><span class="n">build</span><span class="p">())</span>
</code></pre></div></div>

<p>You can also use the TableEnvironment.execute_sql() method to register a source/sink table defined in DDL:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_source_ddl</span> <span class="o">=</span> <span class="s">"""
    create table source (
        word STRING
    ) with (
        'connector' = 'filesystem',
        'format' = 'csv',
        'path' = '{}'
    )
"""</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">input_path</span><span class="p">)</span>

<span class="n">my_sink_ddl</span> <span class="o">=</span> <span class="s">"""
    create table sink (
        word STRING,
        `count` BIGINT
    ) with (
        'connector' = 'filesystem',
        'format' = 'canal-json',
        'path' = '{}'
    )
"""</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">output_path</span><span class="p">)</span>

<span class="n">t_env</span><span class="p">.</span><span class="n">execute_sql</span><span class="p">(</span><span class="n">my_source_ddl</span><span class="p">)</span>
<span class="n">t_env</span><span class="p">.</span><span class="n">execute_sql</span><span class="p">(</span><span class="n">my_sink_ddl</span><span class="p">)</span>
</code></pre></div></div>

<p>This registers a table named source and a table named sink in the table environment. The table source has only one column, word, and it consumes strings read from file specified by input_path. The table sink has two columns, word and count, and writes data to the file specified by output_path.</p>

<p>You can now create a job which reads input from table source, performs some transformations, and writes the results to table sink.</p>

<p>Finally, you must execute the actual Flink Python Table API job. All operations, such as creating sources, transformations and sinks are lazy. Only when execute_insert(sink_name) is called, the job will be submitted for execution.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">udtf</span><span class="p">(</span><span class="n">result_types</span><span class="o">=</span><span class="p">[</span><span class="n">DataTypes</span><span class="p">.</span><span class="n">STRING</span><span class="p">()])</span>
<span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">line</span><span class="p">:</span> <span class="n">Row</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">():</span>
        <span class="k">yield</span> <span class="n">Row</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="c1"># compute word count
</span><span class="n">tab</span><span class="p">.</span><span class="n">flat_map</span><span class="p">(</span><span class="n">split</span><span class="p">).</span><span class="n">alias</span><span class="p">(</span><span class="s">'word'</span><span class="p">)</span> \
   <span class="p">.</span><span class="n">group_by</span><span class="p">(</span><span class="n">col</span><span class="p">(</span><span class="s">'word'</span><span class="p">))</span> \
   <span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">col</span><span class="p">(</span><span class="s">'word'</span><span class="p">),</span> <span class="n">lit</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">count</span><span class="p">)</span> \
   <span class="p">.</span><span class="n">execute_insert</span><span class="p">(</span><span class="s">'sink'</span><span class="p">)</span> \
   <span class="p">.</span><span class="n">wait</span><span class="p">()</span>
</code></pre></div></div>

<p><a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/python/table_api_tutorial/" target="_blank"><strong>전체 코드 참고</strong></a></p>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/python/overview/" target="_blank">Apache Flink: pyflink 공식문서</a></li>
  <li><a href="https://nightlies.apache.org/flink/flink-docs-master/api/python/" target="_blank">Apache Flink” pyflink Docs 공식문서</a></li>
</ul>

:ET