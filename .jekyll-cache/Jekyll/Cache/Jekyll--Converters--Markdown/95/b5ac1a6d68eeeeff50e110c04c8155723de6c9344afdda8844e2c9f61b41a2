I"ÅC<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#producer" id="markdown-toc-producer">Producer</a>    <ul>
      <li><a href="#keyword-arguments" id="markdown-toc-keyword-arguments">Keyword Arguments</a></li>
      <li><a href="#send" id="markdown-toc-send">send()</a></li>
      <li><a href="#flush" id="markdown-toc-flush">flush()</a></li>
      <li><a href="#close" id="markdown-toc-close">close()</a></li>
      <li><a href="#metrics" id="markdown-toc-metrics">metrics()</a></li>
      <li><a href="#partitions_for" id="markdown-toc-partitions_for">partitions_for()</a></li>
      <li><a href="#bootstrap_connected" id="markdown-toc-bootstrap_connected">bootstrap_connected()</a></li>
    </ul>
  </li>
  <li><a href="#consumer" id="markdown-toc-consumer">Consumer</a>    <ul>
      <li><a href="#parameters" id="markdown-toc-parameters">Parameters</a></li>
      <li><a href="#keyword-arguments-1" id="markdown-toc-keyword-arguments-1">Keyword Arguments</a></li>
      <li><a href="#assignment" id="markdown-toc-assignment">assignment()</a></li>
      <li><a href="#bootstrap_connected-1" id="markdown-toc-bootstrap_connected-1">bootstrap_connected()</a></li>
      <li><a href="#beginning_offsetspartitions" id="markdown-toc-beginning_offsetspartitions">beginning_offsets(partitions)</a></li>
      <li><a href="#end_offsetspartitions" id="markdown-toc-end_offsetspartitions">end_offsets(partitions)</a></li>
    </ul>
  </li>
  <li><a href="#ì°¸ê³ " id="markdown-toc-ì°¸ê³ ">ì°¸ê³ </a></li>
</ul>

<hr />

<h1 id="producer">Producer</h1>

<ul>
  <li>A Kafka client that publishes records to the Kafka cluster.</li>
  <li>The producer consists of a pool of buffer space that holds records that havenâ€™t yet been transmitted to the server</li>
</ul>

<h2 id="keyword-arguments">Keyword Arguments</h2>

<ul>
  <li><strong>bootstrap_servers</strong>: <code class="language-plaintext highlighter-rouge">host[:port]</code> string (or list of <code class="language-plaintext highlighter-rouge">host[:port]</code> strings) that the producer should contact to bootstrap initial cluster metadata. This does not have to be the full node list. It just needs to have at least one broker that will respond to a Metadata API Request. Default port is <code class="language-plaintext highlighter-rouge">9092</code>
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">localhost:9092</code></li>
    </ul>
  </li>
  <li><strong>key_serializer</strong> (callable): used to convert user-supplied keys to bytes If not None, called as f(key), should return bytes.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">None</code></li>
    </ul>
  </li>
  <li><strong>value_serializer</strong> (callable): used to convert user-supplied message values to bytes. If not None, called as f(value), should return bytes.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">None</code></li>
      <li>ex. <code class="language-plaintext highlighter-rouge">KafkaProducer(value_serializer=lambda m: json.dumps(m).encode('ascii'))</code></li>
      <li>ex. <code class="language-plaintext highlighter-rouge">KafkaProducer(value_serializer=msgpack.dumps)</code></li>
    </ul>
  </li>
  <li><strong>acks</strong> : The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are common:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">0</code>: Producer will not wait for any acknowledgment from the server.
The message will immediately be added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client wonâ€™t generally know of any failures). The offset given back for each record will always be set to -1.</li>
      <li><code class="language-plaintext highlighter-rouge">1</code>: Wait for leader to write the record to its local log only.
Broker will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost.</li>
      <li><code class="language-plaintext highlighter-rouge">all(-1)</code>: Wait for the full set of in-sync replicas to write the record.
This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee.</li>
      <li>default: <code class="language-plaintext highlighter-rouge">1</code></li>
    </ul>
  </li>
  <li>
    <p><strong>linger_ms</strong> (int): The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay; that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagleâ€™s algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch_size worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will â€˜lingerâ€™ for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger_ms=5 would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load. Default: 0.</p>
  </li>
  <li><strong>retries</strong> (int): Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting max_in_flight_requests_per_connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">0</code></li>
    </ul>
  </li>
  <li><strong>batch_size</strong> (int): Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent. A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely).
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">16384</code></li>
    </ul>
  </li>
  <li><strong>compression_type</strong> (str): The compression type for all data generated by the producer. Valid values are <code class="language-plaintext highlighter-rouge">gzip</code>, <code class="language-plaintext highlighter-rouge">snappy</code>, <code class="language-plaintext highlighter-rouge">lz4</code>, or <code class="language-plaintext highlighter-rouge">None</code>. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">None</code></li>
    </ul>
  </li>
  <li>
    <p><strong>partitioner</strong> (callable): Callable used to determine which partition each message is assigned to. Called (after key serialization): partitioner(key_bytes, all_partitions, available_partitions). The default partitioner implementation hashes each non-None key using the same murmur2 algorithm as the java client so that messages with the same key are assigned to the same partition. When a key is None, the message is delivered to a random partition (filtered to partitions with available leaders only, if possible).</p>
  </li>
  <li><strong>max_in_flight_requests_per_connection</strong> (int): Requests are pipelined to kafka brokers up to this number of maximum requests per broker connection. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">5</code></li>
    </ul>
  </li>
  <li><strong>buffer_memory</strong> (int): The total bytes of memory the producer should use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block up to max_block_ms, raising an exception on timeout. In the current implementation, this setting is an approximation.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">33554432</code> (32MB)</li>
    </ul>
  </li>
</ul>

<h2 id="send">send()</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">send(topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None)</code></li>
  <li><code class="language-plaintext highlighter-rouge">send()</code> is asynchronous</li>
  <li>
    <p>When called, it adds the record to a buffer of pending record sends and immediately returns. This allows the producer to batch together</p>
  </li>
  <li><strong>topic</strong> (str): topic where the message will be published</li>
  <li><strong>value</strong> (optional): message value. Must be type bytes, or be serializable to bytes via configured value_serializer. If value is None, key is required and message acts as a â€˜deleteâ€™. See kafka compaction documentation for more details: https://kafka.apache.org/documentation.html#compaction (compaction requires kafka &gt;= 0.8.1)</li>
  <li><strong>partition</strong> (int, optional): optionally specify a partition. If not set, the partition will be selected using the configured â€˜partitionerâ€™.</li>
  <li><strong>key</strong> (optional): a key to associate with the message. Can be used to determine which partition to send the message to. If partition is None (and producerâ€™s partitioner config is left as default), then messages with the same key will be delivered to the same partition (but if key is None, partition is chosen randomly). Must be type bytes, or be serializable to bytes via configured key_serializer.</li>
  <li><strong>headers</strong> (optional): a list of header key value pairs. List items are tuples of str key and bytes value.</li>
  <li><strong>timestamp_ms</strong> (int, optional): epoch milliseconds (from Jan 1 1970 UTC) to use as the message timestamp. Defaults to current time.</li>
</ul>

<h2 id="flush">flush()</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">flush(timeout=None)</code></li>
  <li>
    <p>Invoking this method makes all buffered records immediately available to send (even if linger_ms is greater than 0) and blocks on the completion of the requests associated with these records.</p>
  </li>
  <li><strong>timeout</strong> (float, optional): timeout in seconds to wait for completion.</li>
</ul>

<h2 id="close">close()</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">close(timeout=None)</code></li>
  <li>
    <p>Close this producer</p>
  </li>
  <li><strong>timeout</strong> (float, optional): timeout in seconds to wait for completion.</li>
</ul>

<h2 id="metrics">metrics()</h2>

<ul>
  <li>Get metrics on producer performance.</li>
</ul>

<h2 id="partitions_for">partitions_for()</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">partitions_for(topic)</code></li>
  <li>Returns set of all known partitions for the topic.</li>
</ul>

<h2 id="bootstrap_connected">bootstrap_connected()</h2>

<ul>
  <li>Return True if the bootstrap is connected.</li>
</ul>

<h1 id="consumer">Consumer</h1>

<ul>
  <li>Consume records from a Kafka cluster.</li>
  <li>It also interacts with the assigned kafka Group Coordinator</li>
  <li>The consumer is not thread safe and should not be shared across threads</li>
</ul>

<h2 id="parameters">Parameters</h2>

<ul>
  <li><strong>*topics</strong> (str): optional list of topics to subscribe to. If not set, call <code class="language-plaintext highlighter-rouge">subscribe()</code> or <code class="language-plaintext highlighter-rouge">assign()</code> before consuming records.</li>
</ul>

<h2 id="keyword-arguments-1">Keyword Arguments</h2>

<ul>
  <li>
    <p><strong>bootstrap_servers</strong>: â€˜host[:port]â€™ string (or list of â€˜host[:port]â€™ strings) that the consumer should contact to bootstrap initial cluster metadata. This does not have to be the full node list. It just needs to have at least one broker that will respond to a Metadata API Request. Default port is 9092. If no servers are specified, will default to localhost:9092.</p>
  </li>
  <li><strong>group_id</strong> (str or None): The name of the consumer group to join for dynamic partition assignment (if enabled), and to use for fetching and committing offsets. If None, auto-partition assignment (via group coordinator) and offset commits are disabled.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">None</code></li>
    </ul>
  </li>
  <li>
    <p><strong>key_deserializer</strong> (callable): Any callable that takes a raw message key and returns a deserialized key.</p>
  </li>
  <li>
    <p><strong>value_deserializer</strong> (callable): Any callable that takes a raw message value and returns a deserialized value.</p>
  </li>
  <li><strong>auto_offset_reset</strong> (str): A policy for resetting offsets on OffsetOutOfRange errors: â€˜earliestâ€™ will move to the oldest available message, â€˜latestâ€™ will move to the most recent. Any other value will raise the exception.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">latest</code></li>
    </ul>
  </li>
  <li><strong>enable_auto_commit</strong> (bool): If True , the consumerâ€™s offset will be periodically committed in the background.
    <ul>
      <li>Default: <code class="language-plaintext highlighter-rouge">True</code></li>
    </ul>
  </li>
  <li><strong>auto_commit_interval_ms</strong> (int): Number of milliseconds between automatic offset commits, if enable_auto_commit is True.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">5000</code></li>
    </ul>
  </li>
  <li><strong>session_timeout_ms</strong> (int): The timeout used to detect failures when using Kafkaâ€™s group management facilities. The consumer sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this consumer from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">10000</code></li>
    </ul>
  </li>
  <li><strong>heartbeat_interval_ms</strong> (int): The expected time in milliseconds between heartbeats to the consumer coordinator when using Kafkaâ€™s group management facilities. Heartbeats are used to ensure that the consumerâ€™s session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session_timeout_ms, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">3000</code></li>
    </ul>
  </li>
  <li><strong>partition_assignment_strategy</strong> (list): List of objects to use to distribute partition ownership amongst consumer instances when group management is used.
    <ul>
      <li>default: <code class="language-plaintext highlighter-rouge">[RangePartitionAssignor, RoundRobinPartitionAssignor]</code></li>
    </ul>
  </li>
</ul>

<h2 id="assignment">assignment()</h2>

<ul>
  <li>Get the TopicPartitions currently assigned to this consumer.</li>
</ul>

<h2 id="bootstrap_connected-1">bootstrap_connected()</h2>

<ul>
  <li>Return True if the bootstrap is connected</li>
</ul>

<h2 id="beginning_offsetspartitions">beginning_offsets(partitions)</h2>

<ul>
  <li>Get the first offset for the given partitions</li>
  <li>This method may block indefinitely if the partition does not exist</li>
</ul>

<h2 id="end_offsetspartitions">end_offsets(partitions)</h2>

<ul>
  <li>Get the last offset for the given partitions. The last offset of a partition is the offset of the upcoming message, i.e. the offset of the last available message + 1.</li>
  <li>This method may block indefinitely if the partition does not exist.</li>
</ul>

<h1 id="ì°¸ê³ ">ì°¸ê³ </h1>

<ul>
  <li><a href="https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html" target="_blank">kafka-python API</a></li>
</ul>
:ET