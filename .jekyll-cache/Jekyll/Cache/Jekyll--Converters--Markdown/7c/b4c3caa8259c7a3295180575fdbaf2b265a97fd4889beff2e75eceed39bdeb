I"<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#스코프" id="markdown-toc-스코프">스코프</a>    <ul>
      <li><a href="#스코프-결정-방식" id="markdown-toc-스코프-결정-방식">스코프 결정 방식</a></li>
      <li><a href="#스코프-종류" id="markdown-toc-스코프-종류">스코프 종류</a></li>
      <li><a href="#스코프-체인" id="markdown-toc-스코프-체인">스코프 체인</a></li>
      <li><a href="#렉시컬-스코프" id="markdown-toc-렉시컬-스코프">렉시컬 스코프</a></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="스코프">스코프</h1>

<ul>
  <li>스코프는 <span class="very__important">식별자의 유효범위</span>를 의미한다</li>
  <li>자바스크립트 엔진이 식별자를 검색할 때 <strong>스코프 체인</strong>을 통해 식별자를 참조하고 있는 코드의 스코프에서 시작해 상위 스코프 방향으로 이동하며 선언된 식별자를 검색한다</li>
  <li>상위 스코프에서 유효한 식별자는 하위 스코프에서도 자유롭게 참조할 수 있지만, 하위 스코프에서 유효한 식별자는 상위 스코프에서 참조할 수 없다</li>
  <li>식별자중에서 변수는 정의할 수 있는 키워드 종류가 <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code> 이렇게 세 가지가 있는데, <code class="language-plaintext highlighter-rouge">var</code>로 정의된 변수는 함수 레벨 스코프를 가지고, <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code>로 정의된 변수를 블록 레벨 스코프를 가진다</li>
</ul>

<h2 id="스코프-결정-방식">스코프 결정 방식</h2>

<ul>
  <li><span class="very__important">식별자가 선언된 위치</span>에 의해 스코프가 결정된다</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">global</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 글로벌 스코프를 가진다</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">local</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 지역 스코프를 가진다</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// x를 참조하고 있는 이 코드는 자기 자신의 스코프에서 먼저 x를 찾고, 없으면 점점 상위 스코프로 확장한다. 여기서는 자신의 스코프에 'local'이 있다</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// x를 참조하고 있는 이 코드는 자기 자신의 스코프가 글로벌이다. 그래서 글로벌에 정의된 'global'을 참조한다</span>
</code></pre></div></div>

<h2 id="스코프-종류">스코프 종류</h2>

<ul>
  <li>스코프는 크게 <strong>글로벌 스코프</strong>와 <strong>지역 스코프</strong>가 있다</li>
  <li>글로벌 스코프에서 정의된 변수는 어디서든 참조할 수 있다</li>
  <li>지역 스코프는 자신 스코프와 하위 스코프에서만 참조할 수 있다
    <ul>
      <li><code class="language-plaintext highlighter-rouge">var</code>로 정의된 변수는 함수 안에서 정의되었을 때만 지역 스코프로 여겨지고, 그 외의 경우에는 글로벌 스코프로 여겨진다</li>
      <li>ES6에서 부터 블록 레벨 스코프를 지원하기 위해 <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code> 라는 키워드를 만들었다</li>
      <li>덕분에 <code class="language-plaintext highlighter-rouge">if</code>문, <code class="language-plaintext highlighter-rouge">for</code>문, <code class="language-plaintext highlighter-rouge">while</code>문, <code class="language-plaintext highlighter-rouge">try/catch</code>문에서 <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code>로 정의한 변수가 자신 스코프를 지역 스코프로 다룰 수 있게 되었다</li>
    </ul>
  </li>
</ul>

<h2 id="스코프-체인">스코프 체인</h2>

<ul>
  <li>코드에서 <span class="context__flow">식별자를 참조하게 되면, 자바스크립트 엔진이 해당 식별자의 값을 찾게된다</span></li>
  <li>이 때 식별자의 찾는 순서는, 식별자를 참조한 코드의 자신 스코프에서 점점 상위 스코프, 마지막으로 없으면 글로벌 스코프까지 순차적으로 탐색하게 된다</li>
  <li>이렇게 <span class="very__important">자신 스코프 -&gt; 상위 스코프들 -&gt; 글로벌 스코프 순</span>으로 찾는 모습이 마치 체인처럼 보여 스코프 체인이라 한다</li>
</ul>

<h2 id="렉시컬-스코프">렉시컬 스코프</h2>

<ul>
  <li><span class="context__flow">함수는 다른 식별자들과 다르게 정의된 곳의 코드와 참조(호출)된 곳의 코드의 스코프가 다를 수 있다</span></li>
  <li><span class="very__important">정의된 곳을 상위 스코프로 결정하는 방식을 렉시컬 스코프</span> 또는 정적 스코프라 한다</li>
  <li>참조된 곳을 상위 스코프로 결정하는 방식을 동적 스코프라 한다</li>
  <li>자바스크립트를 비롯한 대부분의 프로그래밍 언어는 <strong>렉시컬 스코프 방식을 따른다</strong></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="nx">bar</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">();</span>

<span class="c1">// foo 함수의 경우 정의된 곳과 참조된 곳 모두 글로벌 스코프다</span>
<span class="c1">// bar 함수의 경우 정의된 곳은 글로벌 스코프, 참조된 곳은 foo 함수 스코프다</span>

<span class="c1">// 그래서 bar 함수 안에서 x를 찾기 위해 상위 스코프로 이동할 때,</span>
<span class="c1">// bar 함수가 정의된 글로벌 스코프가 상위 스코프다</span>
<span class="c1">// 그래서 글로벌 스코프에서 x를 찾는다 -&gt; 1을 출력</span>
</code></pre></div></div>
:ET