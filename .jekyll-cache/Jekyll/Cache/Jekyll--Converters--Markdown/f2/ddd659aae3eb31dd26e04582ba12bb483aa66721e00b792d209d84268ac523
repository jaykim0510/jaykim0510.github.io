I"v<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#jpa" id="markdown-toc-jpa">JPA</a></li>
  <li><a href="#jpa가-좋은-이유" id="markdown-toc-jpa가-좋은-이유">JPA가 좋은 이유</a></li>
  <li><a href="#jpa의-내부-동작-원리" id="markdown-toc-jpa의-내부-동작-원리">JPA의 내부 동작 원리</a></li>
</ul>

<hr />

<h1 id="jpa">JPA</h1>

<ul>
  <li>Java Persistence API 의 약자</li>
  <li>(자바 객체의 영속성(DB에 저장)을 도와주는 API)</li>
  <li>자바 진영에서 ORM(Object-Relational Mapping) 기술 표준 인터페이스</li>
  <li>(구현된 클래스와 매핑을 해주기 위해 사용되는 프레임워크)</li>
  <li>
    <p>JPA의 인터페이스를 구현한 구현체로는 대표적으로 Hibernate, EclipseLink 등
  <img src="/images/jpa_implementations.png" alt="" /></p>
  </li>
  <li>정리하면 JPA는 객체의 DB 저장을 위해 ORM (객체를 RDBMS의 데이터와 매핑) 기능을 정의한 인터페이스 모음</li>
  <li>쉽게 얘기하면 JPA를 이용하면 객체를 저장하기 위해 우리가 SQL 언어를 직접 작성하지 않고, 마치 <strong>원래 객체를 컬렉션에 저장하듯 사용</strong>하면, JPA의 구현체인 Hibernate 가 <strong>SQL 언어로 변환</strong>해주고, SQL 언어를 JDBC API가 DB에 전달한다</li>
</ul>

<p><img src="/images/jpa_3.png" alt="" /></p>

<p><img src="/images/jpa_4.png" alt="" /></p>

<h1 id="jpa가-좋은-이유">JPA가 좋은 이유</h1>

<ul>
  <li>객체는 객체대로 설계, DB는 DB대로 설계할 수 있도록 함</li>
  <li>메서드를 사용하듯 개발하면 JPA가 알아서 SQL 언어로 매핑/변환</li>
  <li>DB 종류마다 SQL 문법이 약간씩 다른데 이런 문제도 <code class="language-plaintext highlighter-rouge">org.hirbernate.dialect</code> 라는 속성값만 바꿔주면 해결
<img src="/images/jpa_5.png" alt="" /></li>
  <li>객체를 SQL 언어로 조작할 수 있도록 JPQL 언어 지원</li>
</ul>

<h1 id="jpa의-내부-동작-원리">JPA의 내부 동작 원리</h1>

<p><img src="/images/jpa_6.png" alt="" /></p>
:ET