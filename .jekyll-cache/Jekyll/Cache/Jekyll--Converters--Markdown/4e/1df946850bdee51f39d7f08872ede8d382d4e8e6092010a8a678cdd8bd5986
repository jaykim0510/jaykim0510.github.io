I"o<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#테이블-생성" id="markdown-toc-테이블-생성">테이블 생성</a>    <ul>
      <li><a href="#sql문-데이터-타입" id="markdown-toc-sql문-데이터-타입">SQL문 데이터 타입</a></li>
    </ul>
  </li>
  <li><a href="#데이터-추가-갱신-삭제" id="markdown-toc-데이터-추가-갱신-삭제">데이터 추가, 갱신, 삭제</a></li>
  <li><a href="#테이블-다루기" id="markdown-toc-테이블-다루기">테이블 다루기</a></li>
</ul>

<hr />

<p>앞에서 저희가 배웠던 SQL문들은 모두 <strong>이미 테이블이 주어졌고 그 테이블에 데이터가 쌓여있는 상태에서 원하는 데이터를 조회</strong>하는 방법에 관한 것들이었습니다.</p>

<p>하지만 저희가 <strong>직접 테이블을 생성하고 데이터를 쌓아야 하는 순간도 있을 것</strong>입니다. 이번 포스트에서는 이러한 순간에 필요한 SQL문에 대해 배워 보겠습니다.</p>

<h1 id="테이블-생성">테이블 생성</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 데이터베이스 생성
CREATE DATABASE [생성할 데이터베이스 이름]
CREATE DATABASE IF NOT EXISTS [생성할 데이터베이스 이름]

# 데이터베이스 지정
USE [생성한 데이터베이스 이름]
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 테이블 생성
CREATE TABLE ['데이터베이스 이름'].['생성할 테이블 이름'] (
    ['컬럼1'] INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ['컬럼2'] VARCHAR(20) NULL,
    ['컬럼3'] VARCHAR(15) NULL,
    또는 PRIMARY KEY (['컬럼1'])
);
</code></pre></div></div>

<h2 id="sql문-데이터-타입">SQL문 데이터 타입</h2>

<table>
  <tbody>
    <tr>
      <td><strong>종류</strong></td>
      <td><strong>타입</strong></td>
    </tr>
    <tr>
      <td><strong>정수형</strong></td>
      <td>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT</td>
    </tr>
    <tr>
      <td><strong>실수형</strong></td>
      <td>DECIMAL, FLOAT, DOUBLE</td>
    </tr>
    <tr>
      <td><strong>날짜 및 시간</strong></td>
      <td>DATE, TIME, DATETIME, TIMESTAMP</td>
    </tr>
    <tr>
      <td><strong>문자열</strong></td>
      <td>CHAR, VARCHAR, TEXT</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p><strong>TINYINT</strong><br />
signed: -128 ~ 127<br />
unsigned: 0 ~ 255</p>
  </li>
  <li>
    <p><strong>INT</strong><br />
signed: -2147483648 ~ 2147483647<br />
unsigned: 0 ~ 4294967295</p>
  </li>
  <li>
    <p><strong>DECIMAL</strong><br />
DECIMAL(M, D): M은 전체 숫자의 최대 자리수, D는 소수점 자리 숫자의 최대 자리수<br />
DECIMAL(5, 2): -999.99 ~ 999.99<br />
M은 최대 65까지 가능, D는 최대 30까지 가능</p>
  </li>
  <li>
    <p><strong>FLOAT</strong><br />
-3.4 * 10^38 ~ 3.4 * 10^38</p>
  </li>
  <li>
    <p><strong>DOUBLE</strong><br />
-1.7 * 10^308 ~ 1.7 * 10^308<br />
FLOAT와 비교해 범위도 더 넓고, 정밀도 또한 더 높음(더 많은 소수점 자리 수 지원)</p>
  </li>
  <li>
    <p><strong>DATE</strong><br />
날짜를 저장하는 데이터 타입<br />
’2021-03-21’ 이런 형식의 연, 월, 일 순</p>
  </li>
  <li>
    <p><strong>TIME</strong>
시간을 저장하는 데이터 타입<br />
’09:27:31’ 이런 형식의 시, 분, 초</p>
  </li>
  <li>
    <p><strong>DATETIME</strong><br />
날짜와 시간을 저장하는 데이터 타입<br />
’2021-03-21 09:30:27’ 이런 식으로 연, 월, 일, 시, 분, 초</p>
  </li>
  <li>
    <p><strong>TIMESTAMP</strong><br />
DATETIME과 같다<br />
차이점은 TIMESTAMP는 타임 존 정보도 포함</p>
  </li>
  <li>
    <p><strong>CHAR</strong>
CHAR(30): 최대 30자의 문자열을 저장 (0~255까지 가능)<br />
차지하는 용량이 항상 숫자값에 고정됨<br />
데이터의 길이가 크게 변하지 않는 상황에 적합</p>
  </li>
  <li>
    <p><strong>VARCHAR</strong><br />
VARCHAR(30): 최대 30자의 문자열을 저장 (0~65536까지 가능)<br />
차지하는 용량이 가변적. 30이어도 그 이하의 길이면 용량도 적게 차지함<br />
해당 값의 사이즈를 나타내는 부분(1byte 또는 2byte)이 저장 용량에 추가
데이터 길이가 크게 들쑥날쑥해지는 경우에 적합</p>
  </li>
  <li>
    <p><strong>TEXT</strong><br />
문자열이 아주 긴 상황에 적합</p>
  </li>
</ul>

<h1 id="데이터-추가-갱신-삭제">데이터 추가, 갱신, 삭제</h1>

<h1 id="테이블-다루기">테이블 다루기</h1>
:ET