I"]<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#web-server" id="markdown-toc-web-server">Web Server</a></li>
  <li><a href="#web-application-serverwas" id="markdown-toc-web-application-serverwas">Web Application Server(WAS)</a>    <ul>
      <li><a href="#웹-서버와-was" id="markdown-toc-웹-서버와-was">웹 서버와 WAS</a></li>
    </ul>
  </li>
  <li><a href="#servlet" id="markdown-toc-servlet">Servlet</a></li>
</ul>

<hr />

<h1 id="web-server">Web Server</h1>

<ul>
  <li>HTTP 기반으로 동작</li>
  <li>정적 리소스(HTML, CSS, JS, 이미지, 동영상 등)을 주고받기 위한 용도</li>
  <li>ex. Nginx, Apache 등</li>
</ul>

<h1 id="web-application-serverwas">Web Application Server(WAS)</h1>

<ul>
  <li>HTTP 기반으로 동작</li>
  <li>웹 서버 기능 포함하기도 함</li>
  <li>프로그래밍을 통해 애플리케이션 로직을 수행할 수 있음
    <ul>
      <li>동적 HTML 생성</li>
      <li>HTTP API 제공</li>
      <li>서블릿, JSP, 스프링 MVC가 WAS에서 동작함</li>
    </ul>
  </li>
  <li>ex. Tomcat, Undertow 등</li>
</ul>

<h2 id="웹-서버와-was">웹 서버와 WAS</h2>

<ul>
  <li>최근에는 두 서버의 경계가 모호해짐</li>
  <li>가장 큰 차이점은 WAS는 애플리케이션 코드를 실행하는데 특화되어 있다는 점</li>
  <li>보통 서블릿 컨테이너 기능을 제공하는 서버를 WAS라고 함</li>
  <li>WAS 하나로 서버 구축 가능 -&gt; 하지만 WAS는 코드 오류로 장애가 잘 나기 때문에 분리하는게 좋음</li>
  <li>정적 리소스는 웹 서버가 처리하다가, 애플리케이션 로직같은 동적인 처리가 필요하면 WAS에 요청을 넘김</li>
  <li>요청에 맞게 웹 서버 또는 WAS를 독립적으로 증설 가능</li>
  <li>만약 WAS 또는 DB에 장애가 나더라도 서버는 응답(오류 상태)을 해줘야함 -&gt; 웹 서버가 오류화면 HTML 리턴</li>
</ul>

<p><img src="/images/was_1.png" alt="" /></p>

<h1 id="servlet">Servlet</h1>

<ul>
  <li>자바를 사용하여 웹페이지를 동적으로 생성하는 서버측 프로그램(자바 클래스)</li>
  <li>HTTP 메세지를 알아서 읽고 해석한 다음, HTTP 응답 메세지도 알아서 생성해줌</li>
  <li>개발자는 애플리케이션 로직을 개발하는데에만 집중할 수 있음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="err">'</span><span class="n">helloServlet</span><span class="err">'</span><span class="o">,</span> <span class="n">urlPatterns</span><span class="o">=</span><span class="err">'</span><span class="o">/</span><span class="n">hello</span><span class="err">'</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//애플리케이션 로직 작성</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">request</code>를 이용해 요청 메세지의 정보를 쉽게 활용할 수 있음</li>
  <li><code class="language-plaintext highlighter-rouge">response</code>에 우리가 원하는 데이터를 쉽게 넣어줄 수 있음</li>
  <li>서블릿 객체는 서블릿 컨테이너가 알아서 관리해줌</li>
  <li>서블릿 객체는 싱글톤 -&gt; 모든 요청은 하나의 서블릿 객체에 접근</li>
  <li><code class="language-plaintext highlighter-rouge">request</code> 객체와 <code class="language-plaintext highlighter-rouge">response</code> 객체만 고객 요청마다 새로 생성</li>
</ul>

<p><img src="/images/servlet_1.png" alt="" /></p>

<ul>
  <li>서블릿은 멀티 스레드 처리도 지원</li>
</ul>
:ET