I"7V<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#몽고db-crud-연산" id="markdown-toc-몽고db-crud-연산">몽고DB CRUD 연산</a>    <ul>
      <li><a href="#insert" id="markdown-toc-insert">Insert</a></li>
      <li><a href="#delete" id="markdown-toc-delete">Delete</a></li>
      <li><a href="#find" id="markdown-toc-find">Find</a></li>
      <li><a href="#update" id="markdown-toc-update">Update</a></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="몽고db-crud-연산">몽고DB CRUD 연산</h1>

<ul>
  <li>다양한 언어를 지원한다 (ex. MongoDB Shell, Python, Node.js 등)</li>
  <li>(나는 MongoDB Shell 기준으로 작성했다)</li>
  <li>Read, Update, Delete 관련 작업은 SQL의 <code class="language-plaintext highlighter-rouge">WHERE</code>와 같은 필터(filter)를 잘 작성하는 것이 중요하다</li>
  <li><a href="https://www.mongodb.com/docs/manual/crud/">(공식문서 참고)</a></li>
</ul>

<h2 id="insert">Insert</h2>

<ul>
  <li>데이터베이스에 데이터를 <strong>삽입하는 작업</strong>과 관련된 쿼리이다</li>
  <li><code class="language-plaintext highlighter-rouge">insertOne()</code>, <code class="language-plaintext highlighter-rouge">insertMany()</code> 명령어를 주로 사용한다</li>
  <li>Update 관련 명령어에서 <code class="language-plaintext highlighter-rouge">upsert: true</code> 옵션을 주면 Insert 역할을 수행할 수도 있다
    <ul>
      <li>(ex. <code class="language-plaintext highlighter-rouge">findOneAndReplace(filter, replacement, { upsert: true })</code>)</li>
    </ul>
  </li>
  <li>몽고DB는 데이터를 저장할 때 <code class="language-plaintext highlighter-rouge">_id</code> 필드를 반드시 포함해야 한다. 그래서 데이터를 삽입할 때 <code class="language-plaintext highlighter-rouge">_id</code> 필드를 생략하면, 몽고DB가 <code class="language-plaintext highlighter-rouge">ObjectId</code> 타입의 <code class="language-plaintext highlighter-rouge">_id</code> 필드를 자동으로 생성한다</li>
  <li>반환 값은 삽입된 문서가 아닌, 결과에 관한 메타정보를 포함하는 도큐먼트를 반환한다</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 하나의 도큐먼트 삽입 예시</span>
db.inventory.insertOne<span class="o">(</span>
   <span class="o">{</span> item: <span class="s2">"canvas"</span>, qty: 100, tags: <span class="o">[</span><span class="s2">"cotton"</span><span class="o">]</span>, size: <span class="o">{</span> h: 28, w: 35.5, uom: <span class="s2">"cm"</span> <span class="o">}</span> <span class="o">}</span>
<span class="o">)</span>

<span class="c"># 여러 도큐먼트 삽입 예시</span>
db.inventory.insertMany<span class="o">([</span>
   <span class="o">{</span> item: <span class="s2">"journal"</span>, qty: 25, tags: <span class="o">[</span><span class="s2">"blank"</span>, <span class="s2">"red"</span><span class="o">]</span>, size: <span class="o">{</span> h: 14, w: 21, uom: <span class="s2">"cm"</span> <span class="o">}</span> <span class="o">}</span>,
   <span class="o">{</span> item: <span class="s2">"mat"</span>, qty: 85, tags: <span class="o">[</span><span class="s2">"gray"</span><span class="o">]</span>, size: <span class="o">{</span> h: 27.9, w: 35.5, uom: <span class="s2">"cm"</span> <span class="o">}</span> <span class="o">}</span>,
   <span class="o">{</span> item: <span class="s2">"mousepad"</span>, qty: 25, tags: <span class="o">[</span><span class="s2">"gel"</span>, <span class="s2">"blue"</span><span class="o">]</span>, size: <span class="o">{</span> h: 19, w: 22.85, uom: <span class="s2">"cm"</span> <span class="o">}</span> <span class="o">}</span>
<span class="o">])</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 반환 도큐먼트 예시</span>
<span class="o">{</span>
   <span class="s2">"acknowledged"</span> : <span class="nb">true</span>,
   <span class="s2">"insertedIds"</span> : <span class="o">[</span>
      ObjectId<span class="o">(</span><span class="s2">"562a94d381cb9f1cd6eb0e1a"</span><span class="o">)</span>,
      ObjectId<span class="o">(</span><span class="s2">"562a94d381cb9f1cd6eb0e1b"</span><span class="o">)</span>,
      ObjectId<span class="o">(</span><span class="s2">"562a94d381cb9f1cd6eb0e1c"</span><span class="o">)</span>
   <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="delete">Delete</h2>

<ul>
  <li>데이터베이스에 데이터를 <strong>삭제하는 작업</strong>과 관련된 쿼리이다</li>
  <li><code class="language-plaintext highlighter-rouge">deleteOne()</code>, <code class="language-plaintext highlighter-rouge">deleteMany()</code> 명령어를 주로 사용한다
    <ul>
      <li><code class="language-plaintext highlighter-rouge">deleteOne()</code>의 경우 필터에 여러 도큐먼트가 매칭되어도 가장 첫 번째 매칭된 도큐먼트만 삭제한다</li>
      <li><code class="language-plaintext highlighter-rouge">deleteOne()</code>이 의도한대로 동작하도록 하기 위해서는 필터에서 사용하는 필드는 <code class="language-plaintext highlighter-rouge">_id</code> 같은 유니크 인덱스를 갖는 필드를 쓰는게 좋다</li>
      <li><code class="language-plaintext highlighter-rouge">findOneAndDelete()</code> 명령어는 <code class="language-plaintext highlighter-rouge">sort</code> 옵션이 있어서, 정렬된 결과에서 첫 번째 도큐먼트를 삭제하도록 유도할 수 있다</li>
    </ul>
  </li>
  <li>컬렉션의 모든 도큐먼트를 삭제하더라도 컬렉션 안에 포함된 인덱스는 여전히 남아있다</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 컬렉션 안에 있는 모든 도큐먼트 삭제 예시</span>
db.inventory.deleteMany<span class="o">({})</span>

<span class="c"># 필터에 매칭되는 도큐먼트 한 개 삭제 예시</span>
db.inventory.deleteOne<span class="o">(</span> <span class="o">{</span> status: <span class="s2">"D"</span> <span class="o">}</span> <span class="o">)</span>

<span class="c"># 필터에 매칭되는 도큐먼트 모두 삭제 예시</span>
db.inventory.deleteMany<span class="o">(</span> <span class="o">{</span> status : <span class="s2">"A"</span> <span class="o">}</span> <span class="o">)</span>
</code></pre></div></div>

<h2 id="find">Find</h2>

<ul>
  <li>데이터베이스의 데이터를 <strong>읽는 작업</strong>과 관련된 쿼리이다</li>
  <li><code class="language-plaintext highlighter-rouge">findOne()</code>, <code class="language-plaintext highlighter-rouge">find()</code> 명령어를 주로 사용한다
    <ul>
      <li>(<code class="language-plaintext highlighter-rouge">findOne()</code>은 내부적으로 <code class="language-plaintext highlighter-rouge">find()</code>에서 <code class="language-plaintext highlighter-rouge">limit: 1</code> 옵션을 주는 것과 똑같이 동작한다 )</li>
    </ul>
  </li>
  <li>쿼리에 사용되는 필터를 어떻게 작성할지가 가장 중요하면서도 어렵다
    <ul>
      <li>제공되는 연산자가 다양하다 <a href="https://www.mongodb.com/docs/manual/reference/operator/query/">(공식문서 참고)</a></li>
      <li>어떤 경우에는 필드가 먼저오고, 또 어떤 경우에는 연산자가 먼저온다</li>
      <li>몽고DB는 필드의 타입으로 도큐먼트, 배열도 가능해서 이와 관련한 필터 작성법도 익혀야 한다</li>
    </ul>
  </li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 컬렉션 내에서 전체 도큐먼트 조회 예시</span>
db.inventory.find<span class="o">(</span> <span class="o">{}</span> <span class="o">)</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 필드 값의 동등 비교를 통한 도큐먼트 조회 예시</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> status: <span class="s2">"D"</span> <span class="o">}</span> <span class="o">)</span>

<span class="c"># 필드 값의 조건 비교를 통한 도큐먼트 조회 예시</span>

<span class="c">## 대소 비교 </span>
<span class="c">## (관련 연산자: $gt, $gte, $lt, $lte)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> quantity: <span class="o">{</span> <span class="nv">$gt</span>: 20 <span class="o">}</span> <span class="o">}</span> <span class="o">)</span>

<span class="c">## 동등 비교 </span>
<span class="c">## (관련 연산자: $eq, $ne) (위에서 살펴본 것과 같이 $eq는 생략해 축약 표현 가능하다)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> qty: <span class="o">{</span> <span class="nv">$eq</span>: 20 <span class="o">}</span> <span class="o">}</span> <span class="o">)</span>

<span class="c">## 포함 여부 비교 </span>
<span class="c">## (관련 연산자: $in, $nin)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> quantity: <span class="o">{</span> <span class="nv">$in</span>: <span class="o">[</span> 5, 15 <span class="o">]</span> <span class="o">}</span> <span class="o">}</span>, <span class="o">{</span> _id: 0 <span class="o">}</span> <span class="o">)</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># AND, OR 을 이용한 도큐먼트 조회 예시</span>
<span class="c"># (관련 연산자: $and, $or)</span>

<span class="c">## AND (콤마(,) 또는 $and 를 통해 구현할 수 있다)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> status: <span class="s2">"A"</span>, qty: <span class="o">{</span> <span class="nv">$lt</span>: 30 <span class="o">}</span> <span class="o">}</span> <span class="o">)</span>

<span class="c">## 같은 필드에 대한 AND 쿼리문은 콤마로 사용하면 편하다</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> <span class="nv">$and</span>: <span class="o">[</span> <span class="o">{</span> price: <span class="o">{</span> <span class="nv">$ne</span>: 1.99 <span class="o">}</span> <span class="o">}</span>, <span class="o">{</span> price: <span class="o">{</span> <span class="nv">$exists</span>: <span class="nb">true</span> <span class="o">}</span> <span class="o">}</span> <span class="o">]</span> <span class="o">}</span> <span class="o">)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> price: <span class="o">{</span> <span class="nv">$ne</span>: 1.99, <span class="nv">$exists</span>: <span class="nb">true</span> <span class="o">}</span> <span class="o">}</span> <span class="o">)</span>

<span class="c">## OR</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> <span class="nv">$or</span>: <span class="o">[</span> <span class="o">{</span> status: <span class="s2">"A"</span> <span class="o">}</span>, <span class="o">{</span> qty: <span class="o">{</span> <span class="nv">$lt</span>: 30 <span class="o">}</span> <span class="o">}</span> <span class="o">]</span> <span class="o">}</span> <span class="o">)</span>

<span class="c">## x AND (y OR Z) </span>
db.inventory.find<span class="o">(</span> <span class="o">{</span>
     status: <span class="s2">"A"</span>,
     <span class="nv">$or</span>: <span class="o">[</span> <span class="o">{</span> qty: <span class="o">{</span> <span class="nv">$lt</span>: 30 <span class="o">}</span> <span class="o">}</span>, <span class="o">{</span> item: /^p/ <span class="o">}</span> <span class="o">]</span>
<span class="o">}</span> <span class="o">)</span>

<span class="c">## AND Queries With Multiple Expressions Specifying the Same Operator</span>
<span class="c">## (The query cannot use an implicit AND operation because it uses the $or operator more than once.)</span>
<span class="c">## (정확히 잘 모르겠지만 아래처럼 같은 연산자(여기서는 $or)를 여러 번 쓰는 경우에는 콤마가 아닌 반드시 $and 연산자로 묶어야 하는 것 같다)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span>
    <span class="nv">$and</span>: <span class="o">[</span>
        <span class="o">{</span> <span class="nv">$or</span>: <span class="o">[</span> <span class="o">{</span> qty: <span class="o">{</span> <span class="nv">$lt</span> : 10 <span class="o">}</span> <span class="o">}</span>, <span class="o">{</span> qty : <span class="o">{</span> <span class="nv">$gt</span>: 50 <span class="o">}</span> <span class="o">}</span> <span class="o">]</span> <span class="o">}</span>,
        <span class="o">{</span> <span class="nv">$or</span>: <span class="o">[</span> <span class="o">{</span> sale: <span class="nb">true</span> <span class="o">}</span>, <span class="o">{</span> price : <span class="o">{</span> <span class="nv">$lt</span> : 5 <span class="o">}</span> <span class="o">}</span> <span class="o">]</span> <span class="o">}</span>
    <span class="o">]</span>
<span class="o">}</span> <span class="o">)</span>

<span class="c">## AND 쿼리는, 같은 필드에 대한 경우에만 콤마 연산자로 간단히 쓰고, 좀 복잡해지는 경우에는 $and 연산자를 쓰는게 좋은 것 같다</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 필드의 존재 여부를 통한 도큐먼트 조회</span>
<span class="c"># (관련 연산자: $exists)</span>
db.inventory.find<span class="o">(</span> <span class="o">{</span> qty: <span class="o">{</span> <span class="nv">$exists</span>: <span class="nb">true</span>, <span class="nv">$nin</span>: <span class="o">[</span> 5, 15 <span class="o">]</span> <span class="o">}</span> <span class="o">}</span> <span class="o">)</span>

<span class="c"># 필드의 타입 체크를 통한 도큐먼트 조회</span>
<span class="c"># (관련 연산자: $type)</span>
db.addressBook.find<span class="o">(</span> <span class="o">{</span> <span class="s2">"zipCode"</span> : <span class="o">{</span> <span class="nv">$type</span> : <span class="s2">"number"</span> <span class="o">}</span> <span class="o">}</span> <span class="o">)</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 표현식을 이용한 도큐먼트 조회</span>
<span class="c"># (관련 연산자: $expr)</span>

<span class="c">## 도큐먼트 안의 다른 필드 값을 참조</span>
db.monthlyBudget.find<span class="o">(</span> <span class="o">{</span> <span class="nv">$expr</span>: <span class="o">{</span> <span class="nv">$gt</span>: <span class="o">[</span> <span class="s2">"</span><span class="nv">$spent</span><span class="s2">"</span> , <span class="s2">"</span><span class="nv">$budget</span><span class="s2">"</span> <span class="o">]</span> <span class="o">}</span> <span class="o">}</span> <span class="o">)</span> // 도큐먼트의 spent 필드 값이 budget 필드 값보다 큰 도큐먼트

// Aggregation expression to calculate discounted price

<span class="nb">let </span>discountedPrice <span class="o">=</span> <span class="o">{</span>
   <span class="nv">$cond</span>: <span class="o">{</span>
      <span class="k">if</span>: <span class="o">{</span> <span class="nv">$gte</span>: <span class="o">[</span><span class="s2">"</span><span class="nv">$qty</span><span class="s2">"</span>, 100] <span class="o">}</span>,
      <span class="k">then</span>: <span class="o">{</span> <span class="nv">$multiply</span>: <span class="o">[</span><span class="s2">"</span><span class="nv">$price</span><span class="s2">"</span>, NumberDecimal<span class="o">(</span><span class="s2">"0.50"</span><span class="o">)]</span> <span class="o">}</span>,
      <span class="k">else</span>: <span class="o">{</span> <span class="nv">$multiply</span>: <span class="o">[</span><span class="s2">"</span><span class="nv">$price</span><span class="s2">"</span>, NumberDecimal<span class="o">(</span><span class="s2">"0.75"</span><span class="o">)]</span> <span class="o">}</span>
   <span class="o">}</span>
<span class="o">}</span><span class="p">;</span>

// Query the supplies collection using the aggregation expression

db.supplies.find<span class="o">(</span> <span class="o">{</span> <span class="nv">$expr</span>: <span class="o">{</span> <span class="nv">$lt</span>:[ discountedPrice,  NumberDecimal<span class="o">(</span><span class="s2">"5"</span><span class="o">)</span> <span class="o">]</span> <span class="o">}</span> <span class="o">})</span><span class="p">;</span> // 컬렉션 내에서 각 도큐먼트마다 discountedPrice를 구한 후, 그 값이 5보다 작은지 비교
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Aggregation을 이용한 도큐먼트 조회 (이건 분량이 많다)</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 배열 필드를 이용한 도큐먼트 조회</span>
<span class="c"># (관련 연산자: $all, $elemMatch, $size)</span>

<span class="c">## 일치</span>
db.inventory.find<span class="o">({</span> tags: <span class="o">[</span>’red’, ‘blank’] <span class="o">})</span> // tags 필드가 정확히 <span class="o">[</span>‘red’, ‘blank’]인 도큐먼트 <span class="o">(</span>순서까지 같아야함<span class="o">)</span>

db.inventory.find<span class="o">({</span> tags: <span class="o">{</span> <span class="nv">$all</span>: <span class="o">[</span>’red’, ‘blank’] <span class="o">}</span> <span class="o">})</span> // tags 필드가 정확히 <span class="o">[</span>‘red’, ‘blank’]인 도큐먼트 <span class="o">(</span>순서는 상관 없음<span class="o">)</span>


<span class="c">## 포함</span>
db.inventory.find<span class="o">({</span> tags: ‘red’ <span class="o">})</span> // tags 필드에 red가 포함된 도큐먼트

db.inventory.find<span class="o">({</span> dim_cm: <span class="o">{</span> <span class="nv">$gt</span>: 30 <span class="o">}</span> <span class="o">})</span> // dim_cm 필드에 30보다 큰 원소가 하나라도 포함된 도큐먼트

db.inventory.find<span class="o">({</span> dim_cm: <span class="o">{</span> <span class="nv">$gt</span>: 15, <span class="nv">$lt</span>: 20 <span class="o">}</span> <span class="o">})</span> // dim_cm 필드에 15보다 큰 원소 또는 20보다 작은 원소 또는 15~20인 원소를 하나라도 포함하는 도큐먼트

db.inventory.find<span class="o">({</span> dim_cm: <span class="o">{</span> <span class="nv">$elemMatch</span>: <span class="o">{</span> <span class="nv">$gt</span>: 15, <span class="nv">$lt</span>: 20 <span class="o">}</span> <span class="o">}</span> <span class="o">})</span> // dim_cm 필드에 15~20인 원소가 하나라도 포함된 도큐먼트


<span class="c">## 일부</span>
db.inventory.find<span class="o">({</span> dim_cm.1: <span class="o">{</span> <span class="nv">$gt</span>: 25<span class="o">})</span> // dim_cm 필드의 2번째 원소 값이 25보다 큰 도큐먼트


<span class="c">## 개수</span>
db.inventory.find<span class="o">({</span> dim_cm: <span class="o">{</span> <span class="nv">$size</span>: 3<span class="o">})</span> //dim_cm 필드의 원소 개수가 3개인 도큐먼트

</code></pre></div></div>

<h2 id="update">Update</h2>

<ul>
  <li>데이터베이스의 데이터를 <strong>수정하는 작업</strong>과 관련된 쿼리이다</li>
  <li><code class="language-plaintext highlighter-rouge">updateOne()</code>, <code class="language-plaintext highlighter-rouge">updateMany()</code>, <code class="language-plaintext highlighter-rouge">replaceOne()</code> 명령어를 주로 사용한다</li>
  <li>위의 Find 처럼 필터로 특정 도큐먼트를 찾고, 추가로 해당 도큐먼트를 어떻게 업데이트 할지에 관해서도 나타내야 한다</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 관련 연산자: $currentDate, $min, $max, $inc, $mul, $rename, $set, $unset, $setOnInsert</span>

<span class="c">## db.collection.updateMany(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</span>
db.inventory.updateMany<span class="o">(</span>
   <span class="o">{</span> <span class="s2">"qty"</span>: <span class="o">{</span> <span class="nv">$lt</span>: 50 <span class="o">}</span> <span class="o">}</span>,
   <span class="o">{</span>
     <span class="nv">$set</span>: <span class="o">{</span> <span class="s2">"size.uom"</span>: <span class="s2">"in"</span>, status: <span class="s2">"P"</span> <span class="o">}</span>,
     <span class="nv">$currentDate</span>: <span class="o">{</span> lastModified: <span class="nb">true</span> <span class="o">}</span>
   <span class="o">}</span>
<span class="o">)</span>

<span class="c">## db.collection.replaceOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</span>
db.inventory.replaceOne<span class="o">(</span>
   <span class="o">{</span> item: <span class="s2">"paper"</span> <span class="o">}</span>,
   <span class="o">{</span> item: <span class="s2">"paper"</span>, instock: <span class="o">[</span> <span class="o">{</span> warehouse: <span class="s2">"A"</span>, qty: 60 <span class="o">}</span>, <span class="o">{</span> warehouse: <span class="s2">"B"</span>, qty: 40 <span class="o">}</span> <span class="o">]</span> <span class="o">}</span>
<span class="o">)</span>
</code></pre></div></div>
:ET