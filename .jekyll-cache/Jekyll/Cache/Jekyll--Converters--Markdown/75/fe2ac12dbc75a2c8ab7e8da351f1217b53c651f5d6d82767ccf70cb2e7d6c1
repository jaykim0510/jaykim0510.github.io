I"T8<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#도커에서-데이터-관리하기" id="markdown-toc-도커에서-데이터-관리하기">도커에서 데이터 관리하기</a></li>
  <li><a href="#volume" id="markdown-toc-volume">Volume</a></li>
  <li><a href="#bind-mount" id="markdown-toc-bind-mount">Bind Mount</a></li>
  <li><a href="#사용-방법" id="markdown-toc-사용-방법">사용 방법</a>    <ul>
      <li><a href="#dockerfile" id="markdown-toc-dockerfile">Dockerfile</a></li>
      <li><a href="#docker-run-command" id="markdown-toc-docker-run-command">docker run command</a></li>
      <li><a href="#docker-compose" id="markdown-toc-docker-compose">docker compose</a></li>
    </ul>
  </li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="도커에서-데이터-관리하기">도커에서 데이터 관리하기</h1>

<ul>
  <li>기본적으로 컨테이너 안에서 생성된 모든 파일은 <strong>컨테이너 레이어에 저장</strong>된다</li>
  <li>그래서, 해당 컨테이너가 삭제되면 데이터도 함께 사라진다 (컨테이너 종료는 데이터를 삭제하지 않는다)</li>
  <li>따라서 컨테이너의 생명 주기와 관계없이 데이터를 영구적으로 저장하기 위한 방법이 필요하다</li>
  <li>또한 여러 컨테이너가 데이터를 공유할 수 있으면 데이터를 컨테이너별로 중복 저장할 필요가 없어 컨테이너를 더욱 효율적으로 관리할 수 있게 될 것이다</li>
  <li>이러한 이유로 도커는 영구적인 요소와의 마운트를 다음의 두 가지 방법으로 제공한다
    <ul>
      <li><strong>볼륨(volume)</strong></li>
      <li><strong>바인드(bind)</strong></li>
    </ul>
  </li>
</ul>

<p><img src="../../images/docker_17.png" alt="" /></p>

<h1 id="volume">Volume</h1>

<p><img src="../../images/docker_18.png" alt="" /></p>

<ul>
  <li>도커 볼륨은 도커에서 스토리지를 다루는 단위다</li>
  <li>데이터베이스처럼 영구성이 필요한 애플리케이션을 컨테이너로 실행하려면 볼륨을 사용해야 한다</li>
  <li>볼륨을 사용하면 컨테이너의 데이터가 호스트 컴퓨터 내에 있는 도커에 의해 관리되는 파일 시스템(Linux기준 <code class="language-plaintext highlighter-rouge">/var/lib/docker/volumes/</code>)에 데이터가 저장된다</li>
  <li>볼륨은 <strong>완전히 도커에 의해서만 관리</strong>되어 <strong>호스트 머신의 디렉토리 구조나 OS에 독립적</strong>인, 도커에서 데이터를 유지하기 위한 권장되는 메커니즘이다</li>
  <li>볼륨 드라이버를 사용해 클라우드 또는 리모트 호스트에 데이터를 저장할 수도 있다</li>
</ul>

<div class="bell-para">
    <div class="bell-bar">
      <i class="fa-solid fa-bell"></i>
      볼륨을 사용하기 좋은 경우  
    </div>
    <div class="bell-content">
      <ul>
        <li>여러 컨테이너에 마운트하고 싶은 경우 (명시적으로 표현한 볼륨이 없으면 자동으로 생성하고 마운트 해준다)</li>
        <li>도커 호스트의 파일 구조를 모르는 경우 (bind mount와 달리 Volume은 볼륨 명으로 관리)</li>
        <li>백업, 데이터 통합이 필요한 경우</li>
      </ul>
    </div>
</div>

<ul>
  <li>볼륨은 도커에서 이미지나 컨테이너와 동급인 요소다</li>
  <li><code class="language-plaintext highlighter-rouge">docker volume</code> 명령어를 사용해 볼륨을 만들고 확인하고 삭제할 수 있다</li>
  <li>볼륨은 <code class="language-plaintext highlighter-rouge">docker volume create</code> 명령어를 이용해 명시적으로 볼륨을 생성할 수 있다</li>
  <li><code class="language-plaintext highlighter-rouge">docker run -v &lt;볼륨명&gt;:&lt;컨테이너 마운트 디렉터리 경로&gt;</code> 명령어를 이용해 컨테이너를 생성할 때 같이 볼륨을 생성할 수도 있다</li>
  <li>만약 사용하지 않는 볼륨을 제거하고 싶다면 <code class="language-plaintext highlighter-rouge">docker volume prune</code> 명령어를 사용하면 된다</li>
</ul>

<h1 id="bind-mount">Bind Mount</h1>

<p><img src="../../images/docker_19.png" alt="" /></p>

<ul>
  <li>바인드 마운트는 호스트 컴퓨터 파일 시스템의 디렉터리를 컨테이너 파일 시스템의 디렉터리로 만든다</li>
  <li>(볼륨은 볼륨명이라는 가상의 식별자를 사용하고, 바인드는 호스트 컴퓨터 파일 시스템의 절대 경로를 사용한다)</li>
  <li>바인드 마운트는 양방향으로 동작한다. 컨테이너에서 만든 파일을 호스트 컴퓨터에서 수정할 수도 있고, 반대로 호스트에서 만든 파일도 컨테이너에서 수정할 수 있다</li>
  <li>만약 컨테이너의 마운트 경로에 이미지에서 만들어뒀던 파일이 이미 존재하는 경우, 이 파일들은 완전히 대체된다 (볼륨, 바인드 모두)</li>
  <li>컨테이너에서 호스트 파일 시스템에 접근할 수 있다는 점 때문에 보안에 안좋은 영향을 끼칠 수 있다</li>
</ul>

<div class="bell-para">
    <div class="bell-bar">
      <i class="fa-solid fa-bell"></i>
      바인드를 사용하기 좋은 경우  
    </div>
    <div class="bell-content">
      <ul>
        <li>컨테이너의 애플리케이션에 필요한 설정 파일을 호스트 컴퓨터에서 관리할 때 유용하다</li>
      </ul>
    </div>
</div>

<h1 id="사용-방법">사용 방법</h1>

<h2 id="dockerfile">Dockerfile</h2>
<ul>
  <li>Dockerfile에는 볼륨 기능을 위해 <strong>VOLUME</strong>을 제공합니다.</li>
  <li>이미지가 빌드되는 호스트 머신은 사용자에 따라 달라지므로 source는 지정할 수 없습니다.</li>
  <li>VOLUME에서 표기하는 것은 오직 <strong>컨테이너안에 있는 볼륨의 destination</strong>입니다.</li>
</ul>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">VOLUME</span><span class="s"> /myvolume</span>
</code></pre></div></div>

<ul>
  <li>데이터가 사라지지 않도록 저장해두는 source는 컨테이너 생성/실행 시 표기할 수 있습니다.</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/src:/src my-image
</code></pre></div></div>

<ul>
  <li>사실 Dockerfile에서 <strong>VOLUME은 사용하지 않는 것이 좋습니다</strong>. (어차피 source를 지정할 수 없으므로)</li>
</ul>

<h2 id="docker-run-command">docker run command</h2>
<p>컨테이너를 생성하거나 실행할 때 <code class="language-plaintext highlighter-rouge">-v</code>(<code class="language-plaintext highlighter-rouge">--volume</code>) or <code class="language-plaintext highlighter-rouge">--mount</code> 옵션을 이용해 볼륨을 마운트할 수 있습니다.</p>

<ul>
  <li><strong>-v(--volume)</strong></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># first field</span>
<span class="c"># volume옵션을 사용할 때는 명명된 볼륨이면 볼륨의 이름, 익명 볼륨이면 생략 가능</span>
<span class="c"># bind mount옵션의 경우 호스트 머신의 디렉토리 경로</span>

<span class="c"># second field는 컨테이너내의 마운트하고자 하는 경로</span>

<span class="c"># third field는 옵셔널, 예를 들어 ro(read only라는 의미)</span>

<span class="nt">-v</span> &lt;first field&gt;:&lt;second field&gt;:&lt;thrid field&gt;
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예시</span>
docker run <span class="nt">-d</span> <span class="se">\</span>
  <span class="nt">--name</span> devtest <span class="se">\</span>
  <span class="nt">-v</span> myvol2:/app <span class="se">\</span>
  nginx:latest
</code></pre></div></div>
<ul>
  <li><strong>--mount</strong></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># type=volume, bind, tmpfs</span>
<span class="c"># source(src)</span>
<span class="c"># target(destination, dst)</span>
<span class="c"># readonly</span>
<span class="nt">--mount</span> &lt;key&gt;<span class="o">=</span>&lt;value&gt;, &lt;key&gt;<span class="o">=</span>&lt;value&gt;, ..
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예시</span>
<span class="nt">--mount</span> <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span><span class="s2">"</span>/target,target<span class="o">=</span>/app <span class="se">\</span>
  nginx:latest
</code></pre></div></div>

<ul>
  <li><strong>볼륨 생성</strong></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume create my-vol
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume <span class="nb">ls</span>
<span class="nt">-------------------------------</span>
DRIVER              VOLUME NAME
<span class="nb">local               </span>my-vol
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume inspect my-vol
<span class="o">[</span>
    <span class="o">{</span>
        <span class="s2">"CreatedAt"</span>: <span class="s2">"2022-02-02T17:03:46Z"</span>,
        <span class="s2">"Driver"</span>: <span class="s2">"local"</span>,
        <span class="s2">"Labels"</span>: <span class="o">{}</span>,
        <span class="s2">"Mountpoint"</span>: <span class="s2">"/var/lib/docker/volumes/my-vol/_data"</span>,
        <span class="s2">"Name"</span>: <span class="s2">"my-vol"</span>,
        <span class="s2">"Options"</span>: <span class="o">{}</span>,
        <span class="s2">"Scope"</span>: <span class="s2">"local"</span>
    <span class="o">}</span>
<span class="o">]</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker volume <span class="nb">rm </span>my-vol
</code></pre></div></div>

<ul>
  <li><strong>볼륨과 함께 컨테이너 실행</strong></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># --mount flag 이용</span>
docker run <span class="nt">-d</span> <span class="se">\</span>
  <span class="nt">--name</span> devtest <span class="se">\</span>
  <span class="nt">--mount</span> <span class="nb">source</span><span class="o">=</span>myvol2,target<span class="o">=</span>/app <span class="se">\</span>
  nginx:latest

<span class="c"># -v flag 이용</span>
docker run <span class="nt">-d</span> <span class="se">\</span>
  <span class="nt">--name</span> devtest <span class="se">\</span>
  <span class="nt">-v</span> myvol2:/app <span class="se">\</span>
  nginx:latest
</code></pre></div></div>
<ul>
  <li><strong>읽기 전용 볼륨</strong></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># --mount flag 이용</span>
docker run <span class="nt">-d</span> <span class="se">\</span>
  <span class="nt">-it</span> <span class="se">\</span>
  <span class="nt">--name</span> devtest <span class="se">\</span>
  <span class="nt">--mount</span> <span class="nb">type</span><span class="o">=</span><span class="nb">bind</span>,source<span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span><span class="s2">"</span>/target,target<span class="o">=</span>/app,readonly <span class="se">\</span>
  nginx:latest

<span class="c"># -v flag 이용</span>
docker run <span class="nt">-d</span> <span class="se">\</span>
  <span class="nt">-it</span> <span class="se">\</span>
  <span class="nt">--name</span> devtest <span class="se">\</span>
  <span class="nt">-v</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span><span class="s2">"</span>/target:/app:ro <span class="se">\</span>
  nginx:latest
</code></pre></div></div>

<h2 id="docker-compose">docker compose</h2>

<p>docker compose에 관한 포스트는 <a href="https://jaykim0510.github.io/docker-series4"><strong>여기</strong></a>를 참고해주시면 감사드리겠습니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.9"</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">frontend</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">node:lts</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">myapp:/home/node/app</span>
<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">myapp</span><span class="pi">:</span>
</code></pre></div></div>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://docs.docker.com/storage/" target="_blank">도커 공식문서: Manage data in Docker</a></li>
  <li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference" target="_blank">도커 공식문서: Docker-compose volume configuration</a></li>
  <li><a href="https://www.daleseo.com/docker-volumes-bind-mounts/" target="_blank">DaleSeo: Docker 컨테이너에 데이터 저장 (볼륨/바인드 마운트)</a></li>
  <li><a href="https://stackoverflow.com/questions/41935435/understanding-volume-instruction-in-dockerfile" target="_blank">stack overflow: Understanding “VOLUME” instruction in DockerFile</a></li>
</ul>
:ET