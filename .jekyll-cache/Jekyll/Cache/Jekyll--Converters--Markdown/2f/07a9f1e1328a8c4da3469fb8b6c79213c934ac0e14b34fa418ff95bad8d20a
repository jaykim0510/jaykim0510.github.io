I"#<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#checkpoints" id="markdown-toc-checkpoints">Checkpoints</a></li>
  <li><a href="#triggers" id="markdown-toc-triggers">Triggers</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="checkpoints">Checkpoints</h1>

<p>A checkpoint helps build <strong>fault-tolerant and resilient</strong> Spark applications. In Spark Structured Streaming, it maintains intermediate state on HDFS compatible file systems to recover from failures. To specify the checkpoint in a streaming query, we use the <code class="language-plaintext highlighter-rouge">checkpointLocation</code> parameter. The parameter enables the checkpoint and specifies the location where we keep checkpoint information.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resultDF</span>
  <span class="p">.</span><span class="n">writeStream</span>
  <span class="p">.</span><span class="n">outputMode</span><span class="p">(</span><span class="s">"complete"</span><span class="p">)</span>
  <span class="p">.</span><span class="n">option</span><span class="p">(</span><span class="s">"checkpointLocation"</span><span class="p">,</span> <span class="s">"checkpoint"</span><span class="p">)</span>
  <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"console"</span><span class="p">)</span>
  <span class="p">.</span><span class="n">start</span><span class="p">()</span>
  <span class="p">.</span><span class="n">awaitTermination</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/images/spark_stream_3.png" alt="" /></p>

<p>We see a directory named <code class="language-plaintext highlighter-rouge">checkpoint</code> with a bunch of sub-directories and files. This folder contains the state of our streaming application. E.g. the <code class="language-plaintext highlighter-rouge">sources</code> folder contains batches of data processed so far.</p>

<h1 id="triggers">Triggers</h1>

<p>By definition, data continuously flows into a streaming system. The arrival of data is not novel enough to kick off processing. In streaming systems, we need a special event to kick off processing and that event is called a trigger. Let’s discuss a few triggers in Spark Streaming.</p>

<ul>
  <li><strong>Default</strong>: Executes a micro-batch as soon as the previous finishes.</li>
  <li><strong>Fixed interval micro-batches</strong>: Specifies the interval when the micro-batches will execute. For example, 1 minute , 30 seconds or 1 hour etc.</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resultDF</span>
  <span class="p">.</span><span class="n">writeStream</span>
  <span class="p">.</span><span class="n">outputMode</span><span class="p">(</span><span class="s">"complete"</span><span class="p">)</span>
  <span class="p">.</span><span class="n">trigger</span><span class="p">(</span><span class="n">Trigger</span><span class="p">.</span><span class="n">ProcessingTime</span><span class="p">(</span><span class="s">"1 minute"</span><span class="p">))</span>
  <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"console"</span><span class="p">)</span>
  <span class="p">.</span><span class="n">option</span><span class="p">(</span><span class="s">"truncate"</span><span class="p">,</span> <span class="n">false</span><span class="p">)</span>
  <span class="p">.</span><span class="n">start</span><span class="p">()</span>
  <span class="p">.</span><span class="n">awaitTermination</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><strong>One-time micro-batch</strong>: Executes only one micro-batch to process all available data and then stops.</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resultDF</span>
  <span class="p">.</span><span class="n">writeStream</span>
  <span class="p">.</span><span class="n">outputMode</span><span class="p">(</span><span class="s">"complete"</span><span class="p">)</span>
  <span class="p">.</span><span class="n">trigger</span><span class="p">(</span><span class="n">Trigger</span><span class="p">.</span><span class="n">Once</span><span class="p">())</span>
  <span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">"console"</span><span class="p">)</span>
  <span class="p">.</span><span class="n">option</span><span class="p">(</span><span class="s">"truncate"</span><span class="p">,</span> <span class="n">false</span><span class="p">)</span>
  <span class="p">.</span><span class="n">start</span><span class="p">()</span>
  <span class="p">.</span><span class="n">awaitTermination</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://medium.com/expedia-group-tech/apache-spark-structured-streaming-first-streaming-example-1-of-6-e8f3219748ef" target="_blank">Apache Spark Structured Streaming — First Streaming Example (1 of 6)</a></li>
  <li><a href="https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html" target="_blank">Spark 공식문서, Pyspark Structured Streaming Guide</a></li>
</ul>
:ET