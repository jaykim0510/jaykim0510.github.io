I"3v<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#module" id="markdown-toc-module">Module</a>    <ul>
      <li><a href="#module-데코레이터" id="markdown-toc-module-데코레이터">@Module() 데코레이터</a></li>
      <li><a href="#module-공유" id="markdown-toc-module-공유">Module 공유</a></li>
      <li><a href="#global-module" id="markdown-toc-global-module">Global Module</a></li>
    </ul>
  </li>
  <li><a href="#controller" id="markdown-toc-controller">Controller</a>    <ul>
      <li><a href="#routing" id="markdown-toc-routing">Routing</a></li>
      <li><a href="#request-object" id="markdown-toc-request-object">Request Object</a>        <ul>
          <li><a href="#path-parameter" id="markdown-toc-path-parameter">Path Parameter</a></li>
          <li><a href="#query-parameter" id="markdown-toc-query-parameter">Query Parameter</a></li>
        </ul>
      </li>
      <li><a href="#response-object" id="markdown-toc-response-object">Response Object</a></li>
      <li><a href="#status-code" id="markdown-toc-status-code">Status Code</a></li>
      <li><a href="#redirect" id="markdown-toc-redirect">Redirect</a></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="module">Module</h1>

<ul>
  <li>백엔드에서 대부분의 애플리케이션들은 재사용성과 확장성을 위해 코드를 모듈화</li>
  <li>NestJS에서도 <code class="language-plaintext highlighter-rouge">@Module()</code> 데코레이터를 이용해 코드를 쉽게 모듈화하도록 해줌</li>
  <li>모듈화된 application graph의 시작점이 되는 root module은 항상 존재해야함</li>
  <li>(application graph: 모듈의 관계와, 프로바이더의 의존성 관계를 파악하기 위해 사용하는 NestJS의 내부 데이터 구조)</li>
</ul>

<h2 id="module-데코레이터">@Module() 데코레이터</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Module()</code> 데코레이터는 <code class="language-plaintext highlighter-rouge">ModuleMetadata</code>라는 객체를 인자로 받음</li>
  <li><code class="language-plaintext highlighter-rouge">ModuleMetadata</code>는 다음과 같은 프로퍼티를 가짐
    <ul>
      <li><strong>imports</strong>: 이 모듈에서 필요로 하는 프로바이더를 export 하고 있는 모듈들</li>
      <li><strong>controllers</strong>: 이 모듈에서 정의하고 있는 컨트롤러들</li>
      <li><strong>providers</strong>: Nest Injector에 의해 초기화(instantiate) 되고, 사용될 프로바이더들</li>
      <li><strong>exports</strong>: 이 모듈에서 다른 모듈에 제공하는 프로바이더들</li>
    </ul>
  </li>
</ul>

<p>? Guard는 @Injectable() 데코레이터가 붙지만 왜 providers에 추가하지 않아도 괜찮은걸까?</p>

<h2 id="module-공유">Module 공유</h2>

<ul>
  <li>A 모듈에서 B 모듈의 <code class="language-plaintext highlighter-rouge">BService</code> 프로바이더를 사용하고 싶은 경우</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// B.module.ts</span>

<span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
  <span class="na">controllers</span><span class="p">:</span> <span class="p">[</span><span class="nx">BController</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">BService</span><span class="p">],</span>
  <span class="na">exports</span><span class="p">:</span> <span class="p">[</span><span class="nx">BService</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">BModule</span> <span class="p">{}</span>


<span class="c1">// A.module.ts</span>

<span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
  <span class="na">controllers</span><span class="p">:</span> <span class="p">[</span><span class="nx">AController</span><span class="p">],</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span><span class="nx">BModule</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AModule</span> <span class="p">{}</span>
</code></pre></div></div>

<h2 id="global-module">Global Module</h2>

<ul>
  <li>Global module은, 다른 모듈에서 import 없이도 사용할 수 있음</li>
  <li>가능한 Global module은 적게 사용하는 것이 좋음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// User 모듈을 글로벌하게 사용하고 싶은 경우</span>


<span class="c1">// app.module.ts</span>
<span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span><span class="nx">UserModule</span><span class="p">,</span> <span class="nx">ItemModule</span><span class="p">],</span>
  <span class="na">controllers</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppController</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppService</span><span class="p">],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{}</span>


<span class="c1">// user.module.ts</span>
<span class="p">@</span><span class="nd">Global</span><span class="p">()</span>
<span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
    <span class="na">controllers</span><span class="p">:</span> <span class="p">[</span><span class="nx">UserController</span><span class="p">],</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">UserService</span><span class="p">],</span>
    <span class="na">exports</span><span class="p">:</span> <span class="p">[</span><span class="nx">UserService</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserModule</span> <span class="p">{}</span>
</code></pre></div></div>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Item 모듈에서 글로벌 모듈인 User 모듈을 사용하는 예시</span>
<span class="c1">// Item 모듈에서 import 없이도 UserService 프로바이더를 사용할 수 있다</span>

<span class="c1">// item.module.ts</span>
<span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
    <span class="na">controllers</span><span class="p">:</span> <span class="p">[</span><span class="nx">ItemController</span><span class="p">],</span>
    <span class="na">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">ItemService</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemModule</span> <span class="p">{}</span>


<span class="c1">// item.controller.ts</span>
<span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">items</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ItemController</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span>
        <span class="k">private</span> <span class="nx">itemService</span><span class="p">:</span> <span class="nx">ItemService</span><span class="p">,</span>
        <span class="k">private</span> <span class="nx">userService</span><span class="p">:</span> <span class="nx">UserService</span>    
    <span class="p">)</span> <span class="p">{}</span>
    <span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
    <span class="nx">readItem</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">userService</span><span class="p">.</span><span class="nx">readUser</span><span class="p">()</span>
        <span class="kd">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">itemService</span><span class="p">.</span><span class="nx">readItem</span><span class="p">()</span>
        <span class="k">return</span> <span class="nx">user</span> <span class="o">+</span> <span class="nx">item</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="controller">Controller</h1>

<ul>
  <li>요청(Request)을 알맞은 컨트롤러의 알맞은 핸들러로 보내고, 응답(Response)을 유저에게 반환하는 역할</li>
  <li><code class="language-plaintext highlighter-rouge">@Controller()</code> 데코레이터를 사용</li>
</ul>

<h2 id="routing">Routing</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Controller()</code> 의 인자로 관련된 엔드포인트들을 그룹화할 수 있음</li>
  <li><code class="language-plaintext highlighter-rouge">@Get()</code>, <code class="language-plaintext highlighter-rouge">@Post()</code>, ..와 같은 데코레이터의 인자로 각각의 핸들러에 구체적인 엔드포인트를 만들 수 있음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// user.controller.ts</span>


<span class="c1">// http://localhost:3000/users/...</span>
<span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{</span>
  
  <span class="c1">// http://localhost:3000/users/form</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">readUserForm</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">this is form</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="request-object">Request Object</h2>

<ul>
  <li>핸들러는 종종 유저가 보낸 요청 객체에 접근할 수 있어야함</li>
  <li>포괄적인 방법으로 <code class="language-plaintext highlighter-rouge">@Req()</code> 데코레이터로 요청 객체 자체에 접근하는 방법과,</li>
  <li>구체적인 방법으로 <code class="language-plaintext highlighter-rouge">@Body()</code>, <code class="language-plaintext highlighter-rouge">@Param()</code>, <code class="language-plaintext highlighter-rouge">@Query()</code>, <code class="language-plaintext highlighter-rouge">@Header()</code>, <code class="language-plaintext highlighter-rouge">@Session()</code>, <code class="language-plaintext highlighter-rouge">@Ip()</code> 등을 사용할 수도 있음</li>
  <li>Express의 이점을 얻기 위해서는, 타입을 <code class="language-plaintext highlighter-rouge">Request</code> 명시해 주는 것이 좋음 (<code class="language-plaintext highlighter-rouge">import { Request } from 'express';</code>)</li>
</ul>

<p><img src="/images/nest_4.png" alt="" /></p>

<h3 id="path-parameter">Path Parameter</h3>

<ul>
  <li>정적 경로 파라미터와, 동적 경로 파라미터가 있음</li>
  <li>요청이 들어오면 코드가 위에서 부터 실행되기 때문에, 구체적인 정적 경로 파라미터를 가지는 엔드포인트가 먼저 오도록 해야함</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// user.controller.ts</span>

<span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{</span>

  <span class="c1">// 정적 경로 파라미터</span>
  <span class="c1">// http://localhost:3000/users/form</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">form</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">readUserForm</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">this is form</span><span class="dl">'</span>
  <span class="p">}</span>

  <span class="c1">// 동적 경로 파라미터</span>
  <span class="c1">// http://localhost:3000/users/1</span>
  <span class="c1">// http://localhost:3000/users/2</span>
  <span class="c1">// ...</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">:id</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">readUser</span><span class="p">(@</span><span class="nd">Param</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`user id: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="query-parameter">Query Parameter</h3>

<ul>
  <li>key, value 쌍으로 추가 정보를 보낼 수 있음</li>
  <li>쿼리 파라미터로는 엔드포인트를 분기할 수 없음</li>
  <li>요청 객체에 쿼리 파라미터에 값을 주지 않으면 <code class="language-plaintext highlighter-rouge">undefined</code> 가 됨</li>
  <li>디폴트 값 줄 수 있음 (<code class="language-plaintext highlighter-rouge">@Query('id') id: number = 0</code>)</li>
  <li>(Parse 로 시작하는 파이프 (ex. <code class="language-plaintext highlighter-rouge">ParseIntPipe</code>)를 사용할 경우 디폴트 값을 위와 같이 줄 수 없음. 이 때는 <code class="language-plaintext highlighter-rouge">DefaultValuePipe</code>로 디폴트 줘야함)</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// item.controller.ts</span>

<span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">items</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{</span>

  <span class="c1">// 아래의 핸들러는 http://localhost/items/1?category=phone URL도 받아들임</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">:id</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Param</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`item id: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// item.controller.ts</span>

<span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">items</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{</span>

  <span class="c1">// 이렇게 두 개의 핸들러를 만들어도 </span>
  <span class="c1">// http://localhost/items/1?category=phone</span>
  <span class="c1">// http://localhost/items/1</span>
  <span class="c1">// 이 두 개의 URL 모두 무조건 위에서 먼저 만난 핸들러에서 받아들여짐 -&gt; 쿼리 파라미터는 핸들러 분기의 기준이 안됨</span>

  <span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">:id</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Param</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`item id: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span>
  <span class="p">}</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">:id</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Param</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="p">@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">category</span><span class="dl">'</span><span class="p">)</span> <span class="nx">category</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`item id: </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">, category: </span><span class="p">${</span><span class="nx">category</span><span class="p">}</span><span class="s2">`</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">items</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{</span>

  <span class="c1">// http://localhost:3000/items?category=television --&gt; { "category": "television" }</span>
  <span class="c1">// http://localhost:3000/items --&gt; {}</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">category</span><span class="dl">'</span><span class="p">)</span> <span class="nx">category</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">category</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// http://localhost:3000/items?category=television --&gt; { "category": "television" }</span>
  <span class="c1">// http://localhost:3000/items --&gt; { "category": null }</span>
  <span class="c1">// 만약 JSON 객체를 리턴할 때, 값이 없더라도 키 값을 할당하고 싶으면 null을 디폴트로,</span>
  <span class="c1">// 값이 없으면 키 또한 JSON 객체에 할당하고 싶지 않다면 디폴트를 안주는 것이 낫다</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">category</span><span class="dl">'</span><span class="p">)</span> <span class="nx">category</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">category</span> <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// http://localhost:3000/items?id=1 --&gt; { "id": 1 }</span>
  <span class="c1">// http://localhost:3000/items --&gt; { "message": "Validation failed", "error": "Bad Request", "statusCode": 400 }</span>
  <span class="c1">// Parse * Pipe를 쓸 때는, 디폴트를 다음과 같은 방법으로 줄 수 없다</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ParseIntPipe</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// http://localhost:3000/items?id=1 --&gt; { "id": 1 }</span>
  <span class="c1">// http://localhost:3000/items --&gt; { "id": 0 }</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
  <span class="nx">readItem</span><span class="p">(@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">DefaultValuePipe</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nx">ParseIntPipe</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="response-object">Response Object</h2>

<ul>
  <li>응답 객체를 다루는 두 가지 방식이 있음: Standard(권장되는 방식)와, Library-specific</li>
  <li>Library-specific 방식은 응답 객체에 대한 모든 제어를 직접할 수 있다는 장점이 있음</li>
  <li>하지만, Library (Express, Fastify)에 따라 코드가 달라짐</li>
  <li>또한, <code class="language-plaintext highlighter-rouge">@HttpCode()</code>, <code class="language-plaintext highlighter-rouge">@Header()</code>, 포스트 인터셉터(Interceptor)가 제대로 동작하지 않게 됨</li>
  <li>(이 부분은 <code class="language-plaintext highlighter-rouge">{ passthrough: true }</code>를 인자로 넣어주면 해결됨)</li>
  <li>(그래서 쿠키를 설정해야 하는 코드는 위의 옵션을 추가하고 Library-specific 방식을 사용하면서 Standard 방식의 이점도 가져감)</li>
  <li>(Now you can interact with the native response object (for example, set cookies or headers depending on certain conditions), but leave the rest to the framework)</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fully Library-specific 방식</span>
<span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
<span class="nx">readItem</span><span class="p">(@</span><span class="nd">Res</span><span class="p">()</span> <span class="nx">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span> <span class="p">}</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">token</span><span class="p">))</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">CREATED</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Library-specific 방식과 Standard 방식 함께 쓰는 방식</span>
<span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
<span class="p">@</span><span class="nd">HttpCode</span><span class="p">(</span><span class="mi">201</span><span class="p">)</span>
<span class="nx">readItem</span><span class="p">(@</span><span class="nd">Res</span><span class="p">({</span> <span class="na">passthrough</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="nx">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span> <span class="p">}</span>
  <span class="nx">response</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">token</span><span class="p">))</span>
  <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="status-code">Status Code</h2>

<ul>
  <li>200번대: <code class="language-plaintext highlighter-rouge">@HttpCode(201)</code></li>
  <li>300번대: <code class="language-plaintext highlighter-rouge">@Redirect('https://docs.nestjs.com', 302)</code></li>
  <li>400번대: <code class="language-plaintext highlighter-rouge">throw new NotFoundException()</code></li>
  <li>또는 <code class="language-plaintext highlighter-rouge">@Res()</code> 쓰는 경우에는, <code class="language-plaintext highlighter-rouge">res.status().send()</code> 이렇게 쓰면 됨</li>
</ul>

<h2 id="redirect">Redirect</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Redirect(‘리다이렉트할 URL’, 응답 상태 코드)</code></li>
  <li>상태코드가 3xx 여야 리다이렉션이 실제로 일어남 (ex. 200으로 하면 리다이렉션 안됨) (디폴트는 302)</li>
  <li>코드 실행도중 에러나면 리다이렉션 안됨</li>
  <li>코드 실행도중 예외를 발생시키면 리다이렉션 안됨</li>
  <li><code class="language-plaintext highlighter-rouge">return문</code> 실행되지만, 실제로 반환은 되지 않고, 리다이렉션됨</li>
  <li>동적으로 리다이렉션 하고 싶은 경우, <code class="language-plaintext highlighter-rouge">HttpRedirectResponse</code> 인터페이스를 따르는 객체를 리턴하면 됨 (<code class="language-plaintext highlighter-rouge">{ url: 'https://docs.nestjs.com/v5/', statusCode: 301 }</code>)</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// console.log(1)에 1 찍히지만, users로 리다이렉션 하기 때문에 'read user'가 반환됨</span>
<span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
<span class="p">@</span><span class="nd">Redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:3000/users</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">readItem</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">return</span> <span class="dl">'</span><span class="s1">read item</span><span class="dl">'</span>
<span class="p">}</span>

<span class="c1">// NotFoundException 만나기 때문에 리다이렉션 안됨</span>
<span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
<span class="p">@</span><span class="nd">Redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:3000/users</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">readItem</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nx">NotFoundException</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
:ET