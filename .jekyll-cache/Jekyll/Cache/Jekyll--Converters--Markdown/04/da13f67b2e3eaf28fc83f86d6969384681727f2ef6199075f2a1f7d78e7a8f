I"O<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#링크드-리스트" id="markdown-toc-링크드-리스트">링크드 리스트</a></li>
  <li><a href="#배열을-이용한-몇-가지-중요한-문제" id="markdown-toc-배열을-이용한-몇-가지-중요한-문제">배열을 이용한 몇 가지 중요한 문제</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="링크드-리스트">링크드 리스트</h1>

<ul>
  <li>포인터를 기반으로 원소들이 서로 연결되어 있다</li>
  <li>메모리 공간에서 원소들이 서로 흩어져 있다 =&gt; 임의의 원소에 접근하는데 O(n)의 시간복잡도가 걸린다</li>
  <li>정적 배열과 같이 가용용량을 미리 정의할 필요가 없다</li>
  <li>동적 배열과 같이 가용용량이 꽉 찼을 때 다른 메모리 공간으로 옮기고 더블링할 필요도 없다</li>
  <li>하지만 일반적으로 접근/삽입/삭제 연산의 시간복잡도가 모두 O(n)이다</li>
</ul>

<p>하지만 특정 상황에서 유용한 경우가 있다. 시간 복잡도를 조금 더 세분화 해서 살펴보자.</p>

<table>
  <tbody>
    <tr>
      <td><strong>연산</strong></td>
      <td><strong>배열</strong></td>
      <td><strong>싱글 링크드 리스트</strong></td>
      <td><strong>더블리 링크드 리스트</strong></td>
    </tr>
    <tr>
      <td>맨 앞 삽입</td>
      <td>O(n)</td>
      <td>O(1)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>맨 앞 삭제</td>
      <td>O(n)</td>
      <td>O(1)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>맨 뒤 삽입</td>
      <td>O(1)</td>
      <td>O(1)</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>맨 뒤 삭제</td>
      <td>O(1)</td>
      <td>O(n)</td>
      <td>O(1)</td>
    </tr>
  </tbody>
</table>

<p>스택(Stack)과 큐(Queue)는 맨 앞/뒤 삽입/삭제 연산이 활발하다.</p>

<ul>
  <li>스택은 맨 뒤 삽입/삭제가 중요한데, 이는 배열로도 O(1)의 시간 복잡도를 얻을 수 있다</li>
  <li>큐는 맨 뒤 삽입, 맨 앞 삭제가 중요한데 이 때는 링크드 리스트가 필요하다</li>
</ul>

<h1 id="배열을-이용한-몇-가지-중요한-문제">배열을 이용한 몇 가지 중요한 문제</h1>

<ul>
  <li><a href="https://www.geeksforgeeks.org/given-a-linked-list-which-is-sorted-how-will-you-insert-in-sorted-way/">Insertion of a node in Linked List (On the basis of some constraints)</a></li>
  <li><a href="https://www.geeksforgeeks.org/delete-a-given-node-in-linked-list-under-given-constraints/">Delete a given node in Linked List (under given constraints)</a></li>
  <li><a href="https://www.geeksforgeeks.org/compare-two-strings-represented-as-linked-lists/">Compare two strings represented as linked lists</a></li>
  <li><a href="https://www.geeksforgeeks.org/sum-of-two-linked-lists/">Add Two Numbers Represented By Linked Lists</a></li>
  <li><a href="https://www.geeksforgeeks.org/merge-a-linked-list-into-another-linked-list-at-alternate-positions/">Merge A Linked List Into Another Linked List At Alternate Positions</a></li>
  <li><a href="https://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/">Reverse A List In Groups Of Given Size</a></li>
  <li><a href="https://www.geeksforgeeks.org/union-and-intersection-of-two-linked-lists/">Union And Intersection Of 2 Linked Lists</a></li>
  <li><a href="https://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/">Detect And Remove Loop In A Linked List</a></li>
  <li><a href="https://www.geeksforgeeks.org/merge-sort-for-linked-list/">Merge Sort For Linked Lists</a></li>
  <li><a href="https://www.geeksforgeeks.org/select-a-random-node-from-a-singly-linked-list/">Select A Random Node from A Singly Linked List</a></li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://stackoverflow.com/questions/30516897/what-is-the-best-data-structure-to-implement-a-queue" target="_blank">What is the best data structure to implement a queue?</a></li>
  <li><a href="https://www.naukri.com/learning/articles/queue-data-structure-types-implementation-applications/" target="_blank">Queue Data Structure: Types, Implementation, Applications</a></li>
  <li><a href="https://realpython.com/python-deque/" target="_blank">Python’s deque: Implement Efficient Queues and Stacks</a></li>
</ul>
:ET