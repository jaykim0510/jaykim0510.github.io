I"yO<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#쿠버네티스의-오브젝트" id="markdown-toc-쿠버네티스의-오브젝트">쿠버네티스의 오브젝트</a>    <ul>
      <li><a href="#workloads관련-오브젝트" id="markdown-toc-workloads관련-오브젝트">Workloads관련 오브젝트</a>        <ul>
          <li><a href="#pod" id="markdown-toc-pod">Pod</a></li>
          <li><a href="#replicaset" id="markdown-toc-replicaset">ReplicaSet</a></li>
          <li><a href="#deployment" id="markdown-toc-deployment">Deployment</a></li>
        </ul>
      </li>
      <li><a href="#service관련-오브젝트" id="markdown-toc-service관련-오브젝트">Service관련 오브젝트</a>        <ul>
          <li><a href="#service" id="markdown-toc-service">Service</a></li>
          <li><a href="#ingress" id="markdown-toc-ingress">Ingress</a></li>
        </ul>
      </li>
      <li><a href="#config-and-storage관련-오브젝트" id="markdown-toc-config-and-storage관련-오브젝트">Config and Storage관련 오브젝트</a>        <ul>
          <li><a href="#configmap" id="markdown-toc-configmap">ConfigMap</a></li>
          <li><a href="#volume" id="markdown-toc-volume">Volume</a></li>
          <li><a href="#secret" id="markdown-toc-secret">Secret</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#참고자료" id="markdown-toc-참고자료">참고자료</a></li>
</ul>

<hr />

<h1 id="쿠버네티스의-오브젝트">쿠버네티스의 오브젝트</h1>

<h2 id="workloads관련-오브젝트">Workloads관련 오브젝트</h2>
<blockquote>
  <p>Workloads are objects that set deployment rules for pods. Based on these rules, Kubernetes performs the deployment and updates the workload with the current state of the application. Workloads let you define the rules for application scheduling, scaling, and upgrade.</p>
</blockquote>

<p><a href="https://rancher.com/docs/rancher/v2.5/en/k8s-in-rancher/workloads/">(Rancher문서 참고)</a></p>

<p><img src="/images/kube_10.png" alt="" /></p>

<h3 id="pod">Pod</h3>

<p><img src="/images/kube_11.png" alt="" /></p>

<p>Pod는 쿠버네티스에서 배포할 수 있는 가장 작은 단위의 오브젝트로 한 개 이상의 컨테이너와 스토리지, 네트워크 속성을 가집니다. Pod에 속한 컨테이너는 스토리지와 네트워크를 공유하고 서로 localhost로 접근할 수 있습니다. 컨테이너를 하나만 사용하는 경우도 반드시 Pod으로 감싸서 관리합니다.</p>

<p>Pod가 생성되는 과정은 다음과 같습니다.</p>

<p><img src="/images/kube_12.png" alt="" /></p>

<p>Scheduler는 계속 할당할 새로운 Pod가 있는지 체크하고 있으면 노드에 할당합니다. 그러면 노드에 있는 Kubelet은 컨테이너를 생성하고 결과를 API서버에 보고합니다.</p>

<p>🐨 <strong>오브젝트 생성을 위한 YAML파일</strong></p>

<p>Pod를 포함해 쿠버네티스의 오브젝트를 만들기 위해서는 YAML파일이 필요합니다. YAML파일에 오브젝트를 위한 설정들을 작성할 수 있는데, 이 때 필수적으로 사용되는 key값들이 있습니다.</p>

<table>
  <tbody>
    <tr>
      <td><strong>Key</strong></td>
      <td><strong>설명</strong></td>
      <td><strong>예</strong></td>
    </tr>
    <tr>
      <td>apiVersion</td>
      <td>오브젝트 버전</td>
      <td>v1, app/v1, ..</td>
    </tr>
    <tr>
      <td>kind</td>
      <td>오브젝트 종류</td>
      <td>Pod, ReplicaSet, Deployment, ..</td>
    </tr>
    <tr>
      <td>metadata</td>
      <td>메타데이터</td>
      <td>name, label, ..</td>
    </tr>
    <tr>
      <td>spec</td>
      <td>오브젝트 별 상세 설정</td>
      <td>오브젝트마다 다름</td>
    </tr>
  </tbody>
</table>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">echo</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">echo</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">app</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">ghcr.io/subicura/echo:v1</span>
</code></pre></div></div>

<p>Pod의 spec에는 <code class="language-plaintext highlighter-rouge">containers</code>, <code class="language-plaintext highlighter-rouge">volumes</code>, <code class="language-plaintext highlighter-rouge">restartPolicy</code>, <code class="language-plaintext highlighter-rouge">hostname</code>, <code class="language-plaintext highlighter-rouge">hostNetwork</code> 등이 있습니다.<br />
<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/">(Pod공식문서 참고)</a></p>

<h3 id="replicaset">ReplicaSet</h3>

<p><img src="/images/kube_13.png" alt="" /></p>

<p>ReplicaSet은 Pod을 여러 개(한 개 이상) 복제하여 관리하는 오브젝트입니다. Pod을 생성하고 개수를 유지하려면 반드시 ReplicaSet을 사용해야 합니다. 보통 직접적으로 ReplicaSet을 사용하기보다는 Deployment등 다른 오브젝트에 의해서 사용되는 경우가 많습니다.</p>

<p>ReplicaSet은 다음과 같이 동작합니다.</p>

<p><img src="/images/kube_14.png" alt="" /></p>

<p>ReplicaSet controller가 desired state에 맞춰 Pod를 생성합니다. 그러면 Scheduler는 생성된 Pod를 노드에 할당해줍니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ReplicaSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">echo-rs</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">echo</span>
      <span class="na">tier</span><span class="pi">:</span> <span class="s">app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">echo</span>
        <span class="na">tier</span><span class="pi">:</span> <span class="s">app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">echo</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">ghcr.io/subicura/echo:v1</span>
</code></pre></div></div>

<p>ReplicaSet의 spec에는 <code class="language-plaintext highlighter-rouge">replicas</code>, <code class="language-plaintext highlighter-rouge">selector</code>, <code class="language-plaintext highlighter-rouge">template</code>, <code class="language-plaintext highlighter-rouge">minReadySeconds</code>가 있습니다.<br />
<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/#ReplicaSetSpec">(ReplicaSet 공식문서 참고)</a></p>

<h3 id="deployment">Deployment</h3>

<p><img src="/images/kube_18.png" alt="" /></p>

<p>Deployment는 쿠버네티스에서 가장 널리 사용되는 오브젝트입니다. ReplicaSet을 이용하여 Pod을 업데이트하고 이력을 관리하여 롤백Rollback하거나 특정 버전revision으로 돌아갈 수 있습니다.</p>

<p>Deployment 오브젝트가 Pod의 버전을 관리하는 과정은 다음과 같습니다.</p>

<p><img src="/images/kube_17.png" alt="" /></p>

<p>Deployment Controller가 Deploy 조건을 체크하면서 원하는 버전에 맞게 Pod의 버전을 맞춥니다. 이 때 ReplicaSet에 있는 Pod들을 보통 한 번에 바꾸지 않고 조건에 맞게(예를 들어, 25%씩) 바꿔나감으로써 버전을 바꾸더라도 중간에 서비스가 중단되지 않도록 합니다. (무중단배포)</p>

<p><img src="/images/kube_19.png" alt="" /></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">echo-deploy</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">4</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">echo</span>
      <span class="na">tier</span><span class="pi">:</span> <span class="s">app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">echo</span>
        <span class="na">tier</span><span class="pi">:</span> <span class="s">app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">echo</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">ghcr.io/subicura/echo:v2</span>
</code></pre></div></div>

<p>spec에는 <code class="language-plaintext highlighter-rouge">replicas</code>, <code class="language-plaintext highlighter-rouge">selector</code>, <code class="language-plaintext highlighter-rouge">template</code>, <code class="language-plaintext highlighter-rouge">strategy</code>  등이 있습니다.<br />
<a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/#DeploymentSpec">(Deployment 공식문서 참고)</a></p>

<h2 id="service관련-오브젝트">Service관련 오브젝트</h2>
<blockquote>
  <p>In many use cases, a workload has to be accessed by other workloads in the cluster or exposed to the outside world.</p>
</blockquote>

<h3 id="service">Service</h3>

<p><img src="/images/kube_20.png" alt="" /></p>

<p>Service는 네트워크와 관련된 오브젝트입니다. Pod은 자체 IP를 가지고 다른 Pod과 통신할 수 있지만, 쉽게 사라지고 생성되는 특징 때문에 직접 통신하는 방법은 권장하지 않습니다. 쿠버네티스는 Pod과 직접 통신하는 방법 대신, 별도의 고정된 IP를 가진 서비스를 만들고 그 서비스를 통해 Pod에 접근하는 방식을 사용합니다.<br />
Pod을 외부 네트워크와 연결해주고 여러 개의 Pod을 바라보는 내부 로드 밸런서를 생성할 때 사용합니다. 내부 DNS에 서비스 이름을 도메인으로 등록하기 때문에 서비스 디스커버리 역할도 합니다.</p>

<ul>
  <li>ClusterIP: Pod가 동적으로 소멸/생성 되더라도 IP는 고정될 수 있도록 하는 역할</li>
  <li>NodePort: 외부에서 접근가능하도록 하는 포트 역할</li>
  <li>LoadBalancer: 살아있는 노드로 자동으로 연결해주는 역할</li>
</ul>

<p>NodePort는 기본적으로 ClusterIP의 기능을 포함하고 있고, LoadBalancer는 NodePort의 기능을 포함하고 있습니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ClusterIP</span>
<span class="c1"># redis라는 Deployment 오브젝트에 IP할당</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">redis</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">6379</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">counter</span>
    <span class="na">tier</span><span class="pi">:</span> <span class="s">db</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NodePort</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">counter-np</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">NodePort</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">nodePort</span><span class="pi">:</span> <span class="m">31000</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">counter</span>
    <span class="na">tier</span><span class="pi">:</span> <span class="s">app</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># LoadBalancer</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">counter-lb</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">30000</span>
      <span class="na">targetPort</span><span class="pi">:</span> <span class="m">3000</span>
      <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">counter</span>
    <span class="na">tier</span><span class="pi">:</span> <span class="s">app</span>
</code></pre></div></div>

<h3 id="ingress">Ingress</h3>

<p><img src="/images/kube_21.png" alt="" /></p>

<p>Ingress는 경로 기반 라우팅 서비스를 제공해주는 오브젝트입니다.</p>

<p>LoadBalancer는 단점이 있습니다. LoadBalancer는 한 개의 IP주소로 한 개의 서비스만 핸들링할 수 있습니다. 그래서 만약 N개의 서비스를 실행 중이라면 N개의 LoadBalancer가 필요합니다.<br />
하지만 Ingress는 경로 기반 라우팅 서비스를 통해 N개의 service를 하나의 IP주소를 이용하더라도 경로를 통해 분기할 수 있습니다.</p>

<p>Ingress는 Pod, ReplicaSet, Deployment, Service와 달리 별도의 컨트롤러를 설치해야 합니다. 컨트롤러에는 대표적으로 <code class="language-plaintext highlighter-rouge">nginx</code>, <code class="language-plaintext highlighter-rouge">haproxy</code>, <code class="language-plaintext highlighter-rouge">traefik</code>, <code class="language-plaintext highlighter-rouge">alb</code>등이 있습니다.</p>

<p>minikube를 이용할 경우 다음 명령어로 설치할 수 있습니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minikube addons <span class="nb">enable </span>ingress
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">echo-v1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">v1.echo.192.168.64.5.sslip.io</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
            <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">service</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">echo-v1</span>
                <span class="na">port</span><span class="pi">:</span>
                  <span class="na">number</span><span class="pi">:</span> <span class="m">3000</span>
</code></pre></div></div>

<p>spec에는 <code class="language-plaintext highlighter-rouge">rules</code>, <code class="language-plaintext highlighter-rouge">defaultBackend</code> 등이 있습니다.<br />
<a href="https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/">(Ingress 공식문서 참고)</a></p>

<h2 id="config-and-storage관련-오브젝트">Config and Storage관련 오브젝트</h2>

<h3 id="configmap">ConfigMap</h3>
<p>ConfigMap은 설정, 환경 변수들을 담는 오브젝트입니다. 예를 들어 개발/운영에 따라 환경 변수값이 다른 경우, ConfigMap 을 활용해 Pod 생성시 넣어줄 수 있습니다.</p>

<p>여러 가지 방법으로 ConfigMap을 Pod에 적용할 수 있습니다.</p>
<ul>
  <li>디스크 볼륨 마운트</li>
  <li>환경변수로 사용</li>
</ul>

<h3 id="volume">Volume</h3>
<p>Volume은 저장소와 관련된 오브젝트입니다. 호스트 디렉토리를 그대로 사용할 수도 있고 EBS 같은 스토리지를 동적으로 생성하여 사용할 수도 있습니다. 사실상 인기 있는 대부분의 저장 방식을 지원합니다.</p>

<h3 id="secret">Secret</h3>

<h1 id="참고자료">참고자료</h1>
<ul>
  <li><a href="https://subicura.com/2019/05/19/kubernetes-basic-1.html">subicura님의 kubenetes안내서</a></li>
  <li><a href="https://dailyheumsi.tistory.com/208#7.-configmap">하나씩 점을 찍어나가며 블로그</a></li>
  <li><a href="https://kubernetes.io/docs/reference/kubernetes-api/">Kubernetes 공식문서</a></li>
  <li><a href="https://rancher.com/docs/rancher/v2.5/en/k8s-in-rancher/">Rancher 공식문서</a></li>
</ul>
:ET