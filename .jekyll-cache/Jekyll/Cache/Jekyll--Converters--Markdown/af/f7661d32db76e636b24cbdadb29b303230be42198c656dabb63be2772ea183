I"<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#메모리-관리" id="markdown-toc-메모리-관리">메모리 관리</a>    <ul>
      <li><a href="#python-memory-manager" id="markdown-toc-python-memory-manager">Python Memory Manager</a></li>
      <li><a href="#garbage-collection" id="markdown-toc-garbage-collection">Garbage Collection</a></li>
    </ul>
  </li>
  <li><a href="#메모리-할당" id="markdown-toc-메모리-할당">메모리 할당</a>    <ul>
      <li><a href="#stack-영역" id="markdown-toc-stack-영역">Stack 영역</a></li>
      <li><a href="#heap-영역" id="markdown-toc-heap-영역">Heap 영역</a></li>
    </ul>
  </li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />
<p>요즘에는 컴퓨터, 스마트폰을 사용할 때 한가지 프로그램/어플리케이션만 실행하는 사람은 없을 것입니다. 그렇기 때문에 내가 만든 프로그램/어플리케이션이 메모리를 효율적으로 사용하도록 개발하는 것은 중요합니다.</p>

<p>메모리를 효율적으로 사용하는 프로그램/어플리케이션을 만들기 위해서는 메모리 할당에 대해 이해해야합니다. 메모리 할당은 내가 사용하는 프로그래밍 언어, 운영체제, 컴퓨터 아키텍처에 따라 조금씩 다르지만 전체적인 과정은 비슷합니다.</p>

<h1 id="메모리-관리">메모리 관리</h1>
<p>You can think of memory management on two levels. At one level, we have the operating system, which manages how much memory each running application or process can use.</p>

<p>This is one of the most important jobs for the OS—making sure that the memory assigned to your running web browser is not used, say, by your email client. At another level, we have memory management within Python itself.</p>

<p>Python makes sure that any programs you have running run safely and efficiently. It makes sure that memory assigned to one variable is not simultaneously used by another. Exactly how this happens is the focus of this course.</p>

<p><img src="/images/python_1.png" alt="" /></p>

<p>Memory management in Python involves a private heap containing all Python objects and data structures. The management of this private heap is ensured internally by the Python memory manager. The Python memory manager has different components which deal with various dynamic storage management aspects, like sharing, segmentation, preallocation or caching.</p>

<p>At the lowest level, a raw memory allocator ensures that there is enough room in the private heap for storing all Python-related data by interacting with the memory manager of the operating system. On top of the raw memory allocator, several object-specific allocators operate on the same heap and implement distinct memory management policies adapted to the peculiarities of every object type. For example, integer objects are managed differently within the heap than strings, tuples or dictionaries because integers imply different storage requirements and speed/space tradeoffs. The Python memory manager thus delegates some of the work to the object-specific allocators, but ensures that the latter operate within the bounds of the private heap.</p>

<p>It is important to understand that the management of the Python heap is performed by the interpreter itself and that the user has no control over it, even if they regularly manipulate object pointers to memory blocks inside that heap. The allocation of heap space for Python objects and other internal buffers is performed on demand by the Python memory manager through the Python/C API functions listed in this document.</p>

<p>To avoid memory corruption, extension writers should never try to operate on Python objects with the functions exported by the C library: malloc(), calloc(), realloc() and free(). This will result in mixed calls between the C allocator and the Python memory manager with fatal consequences, because they implement different algorithms and operate on different heaps. However, one may safely allocate and release memory blocks with the C library allocator for individual purposes, as shown in the following example:</p>

<p>In this example, the memory request for the I/O buffer is handled by the C library allocator. The Python memory manager is involved only in the allocation of the bytes object returned as a result.</p>

<p>In most situations, however, it is recommended to allocate memory from the Python heap specifically because the latter is under control of the Python memory manager. For example, this is required when the interpreter is extended with new object types written in C. Another reason for using the Python heap is the desire to inform the Python memory manager about the memory needs of the extension module. Even when the requested memory is used exclusively for internal, highly-specific purposes, delegating all memory requests to the Python memory manager causes the interpreter to have a more accurate image of its memory footprint as a whole. Consequently, under certain circumstances, the Python memory manager may or may not trigger appropriate actions, like garbage collection, memory compaction or other preventive procedures. Note that by using the C library allocator as shown in the previous example, the allocated memory for the I/O buffer escapes completely the Python memory manager.</p>

<h2 id="python-memory-manager">Python Memory Manager</h2>

<h2 id="garbage-collection">Garbage Collection</h2>

<h1 id="메모리-할당">메모리 할당</h1>

<h2 id="stack-영역">Stack 영역</h2>

<h2 id="heap-영역">Heap 영역</h2>

<h1 id="참고">참고</h1>
<ul>
  <li><a href="https://medium.datadriveninvestor.com/how-does-memory-allocation-work-in-python-and-other-languages-d2d8a9398543" target="_blank">How does Memory Allocation work in Python (and other languages)?</a></li>
  <li><a href="https://docs.python.org/3/c-api/memory.html#tracemalloc-c-api" target="_blank">Python 공식문서: Memory Management</a></li>
  <li><a href="https://www.programmerinterview.com/data-structures/difference-between-stack-and-heap/" target="_blank">What’s the difference between a stack and a heap?</a></li>
  <li><a href="https://realpython.com/python-memory-management/" target="_blank">RealPython: Memory Management in Python</a></li>
  <li><a href="https://hkim-data.tistory.com/182" target="_blank">python의 메모리 할당과 관리 (Stack &amp; Heap Memory)</a></li>
  <li><a href="https://armontad-1202.tistory.com/entry/파이썬의-메모리-영역" target="_blank">파이썬 메모리 영역</a></li>
</ul>

:ET