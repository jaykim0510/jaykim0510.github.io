I"u<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#cdc" id="markdown-toc-cdc">CDC</a>    <ul>
      <li><a href="#cdc를-구현하는-방법" id="markdown-toc-cdc를-구현하는-방법">CDC를 구현하는 방법</a>        <ul>
          <li><a href="#컬럼-검사" id="markdown-toc-컬럼-검사">컬럼 검사</a></li>
          <li><a href="#테이블-델타" id="markdown-toc-테이블-델타">테이블 델타</a></li>
          <li><a href="#로그-기반" id="markdown-toc-로그-기반">로그 기반</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#debezium" id="markdown-toc-debezium">Debezium</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<p>관계형 데이터베이스에 캡처된 비즈니스 트랜잭션은 비즈니스 운영 상태를 이해하는 데 매우 중요합니다. 데이터의 가치는 시간이 지남에 따라 빠르게 떨어지기 때문에 조직에서는 데이터가 생성될 때 이를 분석할 수 있는 방법이 필요합니다. 운영 데이터베이스의 중단을 방지하기 위해 기업은 일반적으로 분석을 위해 데이터를 데이터 웨어하우스에 복제합니다.</p>

<p>기존에는 배치 기반 방식을 사용하여 하루에 한 번 또는 여러 번 데이터를 이동했습니다. 그러나 배치 이동은 지연 시간을 유발하고 조직에 운영 가치를 감소시킵니다.</p>

<p>CDC(Change Data Capture)는 관계형 데이터베이스에서 데이터 웨어하우스, 데이터 레이크 또는 기타 데이터베이스로 데이터를 거의 실시간으로 이동하기 위한 이상적인 솔루션으로 부상했습니다. 이 게시물에서는 거의 실시간에 가까운 비즈니스 인텔리전스 및 클라우드 마이그레이션에 Change Data Capture가 이상적인 이유와 4가지 다른 Change Data Capture 방법에 대해 알아보겠습니다.</p>

<h1 id="cdc">CDC</h1>
<p>CDC는 데이터베이스에서 데이터에 대한 변경 사항을 식별하고 추적하는 소프트웨어 프로세스입니다. CDC는 새로운 데이터베이스 이벤트가 발생할 때 지속적으로 데이터를 이동하고 처리하여 실시간 또는 거의 실시간에 가까운 데이터 이동을 제공합니다.</p>

<p><img src="/images/cdc_1.png" alt="" /></p>

<p>시간에 민감한 의사 결정이 내려지는 고속 데이터 환경에서 Change Data Capture는 지연 시간이 짧고 안정적이며 확장 가능한 데이터 복제를 달성하는 데 매우 적합합니다.</p>

<p>2025년까지 80% 이상의 기업이 멀티 클라우드 전략을 구현할 계획을 세우고 있는 가운데, 여러 환경에서 데이터를 복제해야 하는 상황에서 비즈니스에 적합한 CDC 방법을 선택하는 것이 그 어느 때보다 중요합니다.</p>

<h2 id="cdc를-구현하는-방법">CDC를 구현하는 방법</h2>

<h3 id="컬럼-검사">컬럼 검사</h3>

<p>By using existing “LAST_UPDATED” or “DATE_MODIFIED” columns, or by adding them if not available in the application, you can create your own change data capture solution at the application level. This approach retrieves only the rows that have been changed since the data was last extracted.</p>

<p>The CDC logic for the technique would be:</p>

<p>Step 1: Get the maximum value of both the target (blue) table’s ‘Created_Time’ and ‘Updated_Time’ columns</p>

<p>Step 2: Select all the rows from the data source with ‘Created_Time’ greater than (&gt;) the target table’s maximum ‘Created_Time’ , which are all the newly created rows since the last CDC process was executed.</p>

<p>Step 3: Select all rows from the source table that have an ‘Updated_Time’ greater than (&gt;) the target table’s maximum ‘Updated_Time’ but less than (&lt;) its maximum ‘Created_Time’. The reason for the exclusion of rows less than the maximum target create date is that they were included in step 2.</p>

<p>Step 4: Insert new rows from step 2 or modify existing rows from step 3 in the target.</p>

<h3 id="테이블-델타">테이블 델타</h3>

<p>SQL문을 사용해서 소스 테이블과 타겟 테이블간의 테이블 델타(table delta 또는 tablediff)를 타겟 테이블에 적용(apply 또는 propagation)</p>

<p><img src="/images/cdc_2.png" alt="" /></p>

<p><a href="https://www.mssqltips.com/sqlservertip/2779/ways-to-compare-and-find-differences-for-sql-server-tables-and-data/" target="_blank"><strong>(Ways to compare and find differences for SQL Server tables and data 참고)</strong></a></p>

<ul>
  <li>장점
    <ul>
      <li>변경된 데이터를 정확히 볼 수 있다</li>
    </ul>
  </li>
  <li>단점
    <ul>
      <li>데이터, 이전 스냅샷, 현재 스냅샷을 모두 저장하고 있어야 해서 용량 측면에서 비효율적</li>
      <li>데이터가 커질수록 변경된 부분 캡처하는데 CPU 자원 사용량이 선형적으로 증가</li>
      <li>캡처하는데 지연이 발생하기 때문에 실시간 데이터 환경에서 활용도 떨어짐</li>
    </ul>
  </li>
</ul>

<h3 id="로그-기반">로그 기반</h3>

<p>데이터베이스에는 충돌 시 데이터베이스를 복구할 수 있는 모든 데이터베이스 이벤트를 저장하는 트랜잭션 로그(redo 로그라고도 함)가 있습니다. 로그 기반 변경 데이터 캡처를 사용하면 삽입, 업데이트 및 삭제를 포함한 새로운 데이터베이스 트랜잭션이 원본 데이터베이스의 기본 트랜잭션 로그에서 읽힙니다.</p>

<p><a href="https://www.striim.com/blog/log-based-change-data-capture/" target="_blank"><strong>(Log-Based Change Data Capture: the Best Method for CDC 참고)</strong></a></p>

<p><img src="/images/cdc_4.png" alt="" /></p>

<p>애플리케이션 수준을 변경하지 않고 운영 테이블을 검색하지 않아도 변경 사항이 캡처됩니다. 이러한 변경 사항은 워크로드를 추가하고 소스 시스템의 성능을 저하시킵니다.</p>

<ul>
  <li>장점
    <ul>
      <li>프로덕션 데이터베이스 시스템에 미치는 영향 최소화</li>
      <li>각 트랜잭션에 대해 추가 쿼리 필요 없음</li>
      <li>여러 시스템에 걸쳐 ACID 신뢰성을 유지할 수 있습니다.</li>
      <li>프로덕션 데이터베이스 시스템의 스키마를 변경할 필요가 없거나 테이블을 추가할 필요가 없음</li>
    </ul>
  </li>
  <li>어려운 점
    <ul>
      <li>데이터베이스의 내부 로깅 형식을 구문 분석하는 것은 복잡합니다. 대부분의 데이터베이스는 형식을 문서화하지 않으며 새로운 릴리스에서 데이터베이스의 변경 사항을 알리지 않습니다. 이 경우 새 데이터베이스 릴리스마다 데이터베이스 로그 구문 분석 논리를 변경해야 할 수 있습니다.</li>
      <li>원본 데이터베이스 변경 이벤트 메타데이터를 관리하는 시스템이 필요합니다.</li>
      <li>검색 가능한 트랜잭션 로그를 생성하는 데 필요한 추가 로그 레벨로 인해 한계 성능 오버헤드가 추가될 수 있음</li>
    </ul>
  </li>
</ul>

<h1 id="debezium">Debezium</h1>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://www.striim.com/blog/change-data-capture-cdc-what-it-is-and-how-it-works/" target="_blank">striim: Change Data Capture (CDC): What it is and How it Works</a></li>
  <li><a href="https://towardsdatascience.com/change-data-capture-cdc-for-data-ingestion-ca81ff5934d2" target="_blank">Farhan Siddiqui, Change Data Capture(CDC) for Data Lake Data Ingestion</a></li>
  <li><a href="https://rockset.com/blog/cdc-mysql-postgres/" target="_blank">How to Implement CDC for MySQL and Postgres</a></li>
  <li><a href="https://www.hvr-software.com/blog/change-data-capture/" target="_blank">/blog What are the Different Methods of Change Data Capture (CDC)?</a></li>
</ul>
:ET