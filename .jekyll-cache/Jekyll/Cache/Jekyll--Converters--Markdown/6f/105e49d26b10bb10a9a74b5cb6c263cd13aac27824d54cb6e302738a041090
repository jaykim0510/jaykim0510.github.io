I"*?<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#volume" id="markdown-toc-volume">Volume</a>    <ul>
      <li><a href="#emptydir" id="markdown-toc-emptydir">emptyDir</a></li>
      <li><a href="#hostpath" id="markdown-toc-hostpath">hostPath</a></li>
    </ul>
  </li>
  <li><a href="#persistent-volume" id="markdown-toc-persistent-volume">Persistent Volume</a>    <ul>
      <li><a href="#매니페스트-파일" id="markdown-toc-매니페스트-파일">매니페스트 파일</a></li>
    </ul>
  </li>
  <li><a href="#persistentvolumeclaim" id="markdown-toc-persistentvolumeclaim">PersistentVolumeClaim</a>    <ul>
      <li><a href="#매니페스트-파일-1" id="markdown-toc-매니페스트-파일-1">매니페스트 파일</a></li>
    </ul>
  </li>
  <li><a href="#storageclass" id="markdown-toc-storageclass">StorageClass</a>    <ul>
      <li><a href="#매니페스트-파일-2" id="markdown-toc-매니페스트-파일-2">매니페스트 파일</a></li>
    </ul>
  </li>
  <li><a href="#스테이트풀셋에서-영구볼륨클레임-사용" id="markdown-toc-스테이트풀셋에서-영구볼륨클레임-사용">스테이트풀셋에서 영구볼륨클레임 사용</a>    <ul>
      <li><a href="#매니페스트-파일-3" id="markdown-toc-매니페스트-파일-3">매니페스트 파일</a></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="volume">Volume</h1>

<ul>
  <li>파드에 정적으로 볼륨을 지정하는 형태</li>
  <li>ex. <code class="language-plaintext highlighter-rouge">emptyDir</code>, <code class="language-plaintext highlighter-rouge">hostPath</code> 등</li>
</ul>

<h2 id="emptydir">emptyDir</h2>

<ul>
  <li>파드용 임시 디스크 영역 (파드가 종료되면 삭제)</li>
  <li>파드안에 직접 지정한다</li>
  <li>호스트의 임시영역을 마운트 할 수도 없고, 호스트에 있는 파일을 참조할 수도 없다</li>
  <li>쿠버네티스 노드의 디스크 영역이 할당된다</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="c1"># 파드명</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="c1"># 사용할 이미지</span>
    <span class="na">name</span><span class="pi">:</span> <span class="c1"># 컨테이너명</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="c1"># 사용할 볼륨명</span>
      <span class="na">mountPath</span><span class="pi">:</span> <span class="c1"># 컨테이너 안에서 마운트할 경로</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="c1"># 볼륨명</span>
    <span class="na">emptyDir</span><span class="pi">:</span>
   <span class="c1">#  medium: memory # 메모리 영역을 사용할 수도 있다</span>
      <span class="na">sizeLimit</span><span class="pi">:</span> <span class="c1"># 사용할 리소스 용량</span>
</code></pre></div></div>

<h2 id="hostpath">hostPath</h2>

<ul>
  <li>마운트가 가능하다 (그래서 호스트 영역 지정해야함)</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="c1"># 파드명</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="c1"># 사용할 이미지</span>
    <span class="na">name</span><span class="pi">:</span> <span class="c1"># 컨테이너명</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="c1"># 사용할 볼륨명</span>
      <span class="na">mountPath</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="c1"># 볼륨명</span>
    <span class="na">hostPath</span><span class="pi">:</span>
      <span class="na">path</span><span class="pi">:</span> <span class="c1"># 마운트할 호스트 경로</span>
      <span class="na">type</span><span class="pi">:</span> <span class="c1"># Directory / DirectoryOrCreate / File</span>
</code></pre></div></div>

<h1 id="persistent-volume">Persistent Volume</h1>

<ul>
  <li>볼륨(Volume)은 파드 안에 직접 지정하는 형태로 연결한다</li>
  <li>영구볼륨은 매니페스트를 통해 개별 리소스를 생성한다</li>
  <li>네트워크를 통해 디스크를 어태치하는 디스크 타입이다</li>
  <li>(미리 영구 디스크를 생성한 후에 적용해야 한다)</li>
  <li>ex. GCE Persistent Disk, AWS Elastic Block Store 등</li>
</ul>

<h2 id="매니페스트-파일">매니페스트 파일</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolume</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>
  <span class="na">labels</span><span class="pi">:</span> <span class="c1"># 볼륨에 레이블링 해두면 나중에 파드에서 요청할 때 알맞은 영구 볼륨 요청할 수 있음</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">capacity</span><span class="pi">:</span>
    <span class="na">storage</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="c1"># 접근 모드: ReadWriteOnce / ReadWriteMany / ReadOnlyMany</span>
              <span class="c1"># ReadWriteOnce: 단일 노드에서 읽기와 쓰기 가능</span>
              <span class="c1"># ReadWriteMany: 여러 노드에서 읽기와 쓰기 가능</span>
              <span class="c1"># ReadOnlyMany: 여러 노드에서 읽기 가능</span>
  <span class="na">persistentVolumneReclaimPolicy</span><span class="pi">:</span> <span class="c1"># 영구 볼륨을 사용한 후 처리방법: Delete / Retain / Recycle</span>
  <span class="na">gcePersistentDisk</span><span class="pi">:</span> <span class="c1"># GCE Perstent Disk 사용하는 경우</span>
    <span class="na">pdName</span><span class="pi">:</span>
</code></pre></div></div>

<h1 id="persistentvolumeclaim">PersistentVolumeClaim</h1>

<ul>
  <li>영구볼륨을 요청하는 리소스</li>
  <li>영구볼륨은 영구볼륨클레임을 통해 사용한다</li>
  <li>영구볼륨클레임에서 지정된 조건을 기반으로 영구볼륨을 요청하면, 스케줄러는 현재 가지고 있는 영구볼륨중에서 적당한 볼륨을 할당한다</li>
</ul>

<h2 id="매니페스트-파일-1">매니페스트 파일</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
    <span class="na">matchExpressions</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span>
      <span class="na">operator</span><span class="pi">:</span>
      <span class="na">values</span><span class="pi">:</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">storageClassName</span><span class="pi">:</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 파드에서 영구볼륨클레임 사용 예시</span>

<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span>
    <span class="na">volumeMounts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">mountPath</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>
    <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
      <span class="na">claimName</span><span class="pi">:</span> <span class="c1"># 영구볼륨클레임명</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 저장소 생성(Local, GCP, AWS 등)
2. PersistentVolume 생성
3. PersistentVolumeClaim 생성
4. 워크로드 오브젝트에서 사용
5. 정적으로 PersistentVolume 할당 (자원 낭비)
</code></pre></div></div>

<h1 id="storageclass">StorageClass</h1>

<ul>
  <li>위의 방법은 사전에 영구 볼륨을 생성해야 하는 번거로움</li>
  <li>용량을 동적으로 확보할 수 없어서 리소스를 낭비할 수 있다</li>
  <li>StorageClass로 어디서(Local, GCP, AWS 등) 저장소를 사용할지만 정의하고, 볼륨의 크기는 PersistentVolumeClaim 에서 동적으로 프로비저닝 하자</li>
  <li>동적 프로비저닝을 이용하면, 영구볼륨클레임이 생성될때 동적으로 영구볼륨을 생성하고 할당한다</li>
  <li>동적 프로비저닝을 사용하려면, 사전에 어떤 영구 볼륨을 생성할지 정의하는 스토리지클래스를 정의해야 한다</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 저장소 생성(Local, GCP, AWS 등)
2. StorageClass 생성
3. PersistentVolumeClaim 생성
4. 워크로드 오브젝트에서 사용
5. 동적으로 PersistentVolume 생성 및 할당
</code></pre></div></div>

<h2 id="매니페스트-파일-2">매니페스트 파일</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">storage.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">StorageClass</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="c1"># 스토리지클래스명 </span>
<span class="na">parameters</span><span class="pi">:</span>
<span class="na">provisioner</span><span class="pi">:</span> <span class="s">kubernetes.io/gce-pd</span>
<span class="na">reclaimPolicy</span><span class="pi">:</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">storageClassName</span><span class="pi">:</span> <span class="c1"># 스토리지클래스명</span>
  <span class="na">accessModes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="s">3Gi</span>
</code></pre></div></div>

<h1 id="스테이트풀셋에서-영구볼륨클레임-사용">스테이트풀셋에서 영구볼륨클레임 사용</h1>

<ul>
  <li>스테이트풀셋에서는 영구 데이터 영역을 사용하는 경우가 많다</li>
  <li><code class="language-plaintext highlighter-rouge">spec.volumeClaimTemplate</code> 항목을 통해 영구볼륨클레임을 별도로 정의하지 않고도, 자동으로 영구볼륨클레임을 생성할 수 있다 (스토리지클래스 + 스테이트풀셋)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 저장소 생성(Local, GCP, AWS 등)
2. StorageClass 생성
3. 워크로드 오브젝트에서 spec.volumeClaimTemplate을 이용해 PersistentVolumeClaim 생성
4. 동적으로 PersistentVolume 생성 및 할당
</code></pre></div></div>

<h2 id="매니페스트-파일-3">매니페스트 파일</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">StatefulSet</span>
<span class="nn">...</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="s">...</span>
    <span class="s">spec</span><span class="err">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span>
        <span class="na">image</span><span class="pi">:</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">pvc-template-volume</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/tmp</span>
  <span class="na">volumeClaimTemplates</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">pvc-template-volume</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">storageClassName</span><span class="pi">:</span>
      <span class="na">accessModes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
      <span class="na">resources</span><span class="pi">:</span>
        <span class="na">requests</span><span class="pi">:</span>
          <span class="na">storage</span><span class="pi">:</span> <span class="s">10Gi</span>
</code></pre></div></div>
:ET