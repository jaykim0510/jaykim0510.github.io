I"(<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#파이썬-데이터는-객체다" id="markdown-toc-파이썬-데이터는-객체다">파이썬 데이터는 객체다</a>    <ul>
      <li><a href="#원시타입과-객체" id="markdown-toc-원시타입과-객체">원시타입과 객체</a></li>
    </ul>
  </li>
  <li><a href="#타입" id="markdown-toc-타입">타입</a></li>
  <li><a href="#가변성" id="markdown-toc-가변성">가변성</a></li>
  <li><a href="#참조" id="markdown-toc-참조">참조</a></li>
  <li><a href="#복사" id="markdown-toc-복사">복사</a>    <ul>
      <li><a href="#alias" id="markdown-toc-alias">Alias</a></li>
      <li><a href="#shallow-copy" id="markdown-toc-shallow-copy">Shallow Copy</a></li>
      <li><a href="#deep-copy" id="markdown-toc-deep-copy">Deep Copy</a></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="파이썬-데이터는-객체다">파이썬 데이터는 객체다</h1>
<p>컴퓨터 메모리를 일련의 긴 선반으로 생각할 수 있습니다. 해 당 메모리 선반 중 각 슬롯은 폭이 1바이트 입니다. 파이썬 프로그램은 운영체제에서 컴퓨터의 일부 메모리에 접근할 수 있습니다. 이 메모리는 프로그램 자체의 코드와 데이터를 위해 사용될 수 있습니다. 파이썬은 값을 직접 처리하는 대신, 메모리에 객체로 래핑합니다.</p>

<p><img src="/images/python_13.png" alt="" /></p>

<h2 id="원시타입과-객체">원시타입과 객체</h2>
<p>C나 자바 같은 언어는 기본적으로 원시 타입을 제공합니다. 원시 타입은 메모리에 정확하게 타입 크기만큼의 공간을 할당하고 그 공간을 오로지 값으로 채워넣습니다. 배열이라면 요소들이 연속된 순서로 메모리에 배치될 것입니다.</p>

<p>객체는 단순히 값 뿐만 아니라 여러 가지 정보를 함께 저장하고, 이를 이용해 여러 가지 작업(비트조작, 시프팅 등)을 수행할 수 있게됩니다. 하지만 이로 인해 메모리 점유율이 늘어나게 되고 계산 속도 또한 감소하게 됩니다.<br />
<img src="/images/python_14.png" alt="" /></p>

<h1 id="타입">타입</h1>

<table>
  <tbody>
    <tr>
      <td><strong>이름</strong></td>
      <td><strong>타입</strong></td>
      <td><strong>가변</strong></td>
    </tr>
    <tr>
      <td>불리언</td>
      <td>bool</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>정수</td>
      <td>int</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>부동소수점</td>
      <td>float</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>복소수</td>
      <td>complex</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>문자열</td>
      <td>str</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>튜플</td>
      <td>tuple</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>바이트</td>
      <td>bytes</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>프로즌 셋</td>
      <td>frozenset</td>
      <td>불변</td>
    </tr>
    <tr>
      <td>리스트</td>
      <td>list</td>
      <td>가변</td>
    </tr>
    <tr>
      <td>바이트 배열</td>
      <td>bytearray</td>
      <td>가변</td>
    </tr>
    <tr>
      <td>셋</td>
      <td>set</td>
      <td>가변</td>
    </tr>
    <tr>
      <td>딕셔너리</td>
      <td>dict</td>
      <td>가변</td>
    </tr>
  </tbody>
</table>

<h1 id="가변성">가변성</h1>
<p>값을 변경할 수 있는 경우를 가변성이라고 합니다. 그러나 파이썬은 강타입 언어이기 때문에 타입을 변경할 수는 없습니다. 즉 객체가 가변성인 경우 값은 변경 가능하지만, 타입은 변경할 수 없습니다. (타입 변경을 하면 무조건 새로운 메모리에 객체가 새로 생성된다는 얘기입니다)</p>

<h1 id="참조">참조</h1>
<p>변수에 값을 할당할 때 알아야 할 중요한 사실은 할당은 값을 복사하는 것이 아니라, 단지 객체에 이름을 붙이는 것일 뿐입니다. 이를 <strong>변수를 통해 객체를 참조한다</strong>라고 합니다. 여기에는 예외가 없으며 심지어 문자와 숫자도 모두 객체다. 차이는 <strong>객체가 불변이냐 가변이냐의 차이일 뿐</strong>입니다.</p>

<p>예를 들어, 왼쪽 그림에서 a가 참조하고 있던 값을 변경하면 정수는 불변 객체이기 때문에 새로운 값이 메모리에 생성되고 a는 새로운 값을 참조합니다.</p>

<p>반면 오른쪽 그림과 같이 가변 객체는 말 그대로 값을 변경할 수 있기 때문에 자신이 참조하고 있던 값을 변경해도 새로운 메모리에 값이 생성되는 것이 아니라 데이터 값을 그 자리에서 바꾸게 됩니다.</p>

<p><img src="/images/참조.png" alt="" /></p>

<p>그럼 만약 불변 객체는 값을 바꿀 때 마다 메모리에 새로운 데이터를 생성하게 되는데 그러면 메모리가 엄청 낭비되지 않을까 라는 생각을 할 수 있습니다. 이를 해결해 주기 위해 파이썬에는 <strong>가비지 컬렉터</strong>가 있고 이는 더 이상 참조되지 않는 객체를 메모리에서 삭제될 수 있도록 도와줍니다.</p>

<h1 id="복사">복사</h1>

<h2 id="alias">Alias</h2>
<p>immutable한 객체인 숫자, 부울, 문자열, 튜플 등의 경우에는 변수의 대입을 통해 복사가 가능합니다.<br />
<img src="/images/복사.png" alt="" /></p>

<p>하지만 다음과 같이 mutable한 객체의 경우에는 복사가 안되고 값이 같이 변경되게 됩니다.<br />
<img src="/images/복사_1.png" alt="" /></p>

<h2 id="shallow-copy">Shallow Copy</h2>
<p>또 하나의 가능한 복사 방법은 얕은 복사입니다. 얕은 복사는 mmutable한 객체에 대해서도 복사가 됩니다. 하지만 이 또한 문제가 발생하는 경우가 있습니다.  <br />
<img src="/images/shallow.png" alt="" /></p>

<p>예를 들어 리스트와 같은 가변 객체 안에 또 가변 객체가 있게 되고 그 원소를 수정하려고 하면 진짜 복사가 아니었던 것이 드러나게 됩니다. 
밑에 그림을 보게 되면  가변 객체 안에 있는 가변 객체 원소를 수정하게 되면 새로운 메모리에 할당하지 않고 그냥 바꾸기 때문에 가만히 있던 변수까지 참조하고 있는 객체의 값이 덩달아 바뀌게 됩니다.<br />
<img src="/images/shallow_1.png" alt="" /></p>

<h2 id="deep-copy">Deep Copy</h2>
<p>따라서 이러한 경우에 필요한 것이 바로 깊은 복사입니다.<br />
<img src="/images/deepcopy.png" alt="" /></p>
:ET