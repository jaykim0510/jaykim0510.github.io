I"7<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#의존성-정의하기" id="markdown-toc-의존성-정의하기">의존성 정의하기</a></li>
  <li><a href="#브랜치-하기" id="markdown-toc-브랜치-하기">브랜치 하기</a></li>
  <li><a href="#태스크-트리거" id="markdown-toc-태스크-트리거">태스크 트리거</a></li>
  <li><a href="#워크플로-트리거" id="markdown-toc-워크플로-트리거">워크플로 트리거</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="의존성-정의하기">의존성 정의하기</h1>

<p><img src="/images/airflow_12.png" alt="" /></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># in general we recommend you use the bitshift operators, as they are easier to read in most cases
</span>
<span class="n">bash_start</span> <span class="o">&gt;&gt;</span> <span class="p">[</span><span class="n">bash_a</span><span class="p">,</span> <span class="n">bash_b</span><span class="p">]</span>
<span class="n">bash_a</span> <span class="o">&gt;&gt;</span> <span class="n">bash_c</span>
<span class="n">bash_b</span> <span class="o">&gt;&gt;</span> <span class="n">bash_d</span>
<span class="p">[</span><span class="n">bash_c</span><span class="p">,</span> <span class="n">bash_d</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">bash_e</span>
<span class="n">bash_e</span> <span class="o">&gt;&gt;</span> <span class="n">bash_f</span> <span class="o">&gt;&gt;</span> <span class="n">bash_g</span>

</code></pre></div></div>

<h1 id="브랜치-하기">브랜치 하기</h1>

<p><img src="/images/airflow_13.png" alt="" /></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">airflow</span> <span class="kn">import</span> <span class="n">DAG</span>
<span class="kn">from</span> <span class="nn">airflow.operators.bash</span> <span class="kn">import</span> <span class="n">BashOperator</span>
<span class="kn">from</span> <span class="nn">airflow.operators.python</span> <span class="kn">import</span> <span class="n">BranchPythonOperator</span>

<span class="k">def</span> <span class="nf">_pick_erp_system</span><span class="p">():</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"bash_a1"</span> <span class="c1"># 리턴할 태스크 ID. 리스트를 넘기면 여러 개의 태스크를 실행할 수도 있다
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"bash_b1"</span>

<span class="k">with</span> <span class="n">DAG</span><span class="p">(</span>
            <span class="n">dag_id</span><span class="o">=</span><span class="s">"test_airflow"</span><span class="p">,</span>
            <span class="n">schedule_interval</span><span class="o">=</span><span class="s">"* * * * *"</span><span class="p">,</span> <span class="c1"># 매분마다 실행
</span>            <span class="n">start_date</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
            <span class="n">catchup</span><span class="o">=</span><span class="bp">False</span>
        <span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
    <span class="n">bash_pick</span> <span class="o">=</span> <span class="n">BranchPythonOperator</span><span class="p">(</span> <span class="c1"># BranchPythonOperator 사용ㄷ
</span>        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_pick"</span><span class="p">,</span> 
        <span class="n">python_callable</span><span class="o">=</span><span class="n">_pick_erp_system</span>
    <span class="p">)</span>
    <span class="n">bash_a1</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_a1"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo A1"</span>
    <span class="p">)</span>
    <span class="n">bash_b1</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_b1"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo B1"</span>
    <span class="p">)</span>
    <span class="n">bash_a2</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_a2"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo A2"</span>
    <span class="p">)</span>
    <span class="n">bash_b2</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_b2"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo B2"</span>
    <span class="p">)</span>
    <span class="n">bash_a3</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_a3"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo A3"</span>
    <span class="p">)</span>
    <span class="n">bash_b3</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_b3"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo B3"</span>
    <span class="p">)</span>


    <span class="n">bash_pick</span> <span class="o">&gt;&gt;</span> <span class="p">[</span><span class="n">bash_a1</span><span class="p">,</span> <span class="n">bash_b1</span><span class="p">]</span>
    <span class="n">bash_a1</span> <span class="o">&gt;&gt;</span> <span class="n">bash_a2</span> <span class="o">&gt;&gt;</span> <span class="n">bash_a3</span>
    <span class="n">bash_b1</span> <span class="o">&gt;&gt;</span> <span class="n">bash_b2</span> <span class="o">&gt;&gt;</span> <span class="n">bash_b3</span>
</code></pre></div></div>

<h1 id="태스크-트리거">태스크 트리거</h1>

<ul>
  <li>업스트림 태스크가 어떤 상태일 때 태스크가 실행되도록 할지 결정한다</li>
  <li>디폴트는 <code class="language-plaintext highlighter-rouge">all_success</code>로, 업스트림 태스크가 모두 성공했을 때 실행된다</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center">트리거 규칙</th>
      <th style="text-align: center">동작</th>
      <th style="text-align: center">사용 사례</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">all_success</td>
      <td style="text-align: center">모든 상위 태스크가 성공하면 트리거 된다</td>
      <td style="text-align: center">일반적인 워크플로에 대한 기본 트리거 규칙</td>
    </tr>
    <tr>
      <td style="text-align: center">all_failed</td>
      <td style="text-align: center">모든 상위 태스크가 실패했거나, 오류가 발생한 경우 트리거 된다</td>
      <td style="text-align: center">오류를 처리하는 태스크의 트리거 규칙</td>
    </tr>
    <tr>
      <td style="text-align: center">all_done</td>
      <td style="text-align: center">결과 상태에 관계없이 모든 부모가 실행을 완료하면 트리거 된다</td>
      <td style="text-align: center">시스템 종료 또는 클러스터 중지하는 태스크의 트리거 규칙</td>
    </tr>
    <tr>
      <td style="text-align: center">one_success</td>
      <td style="text-align: center">한 부모가 성공하자마자 트리거 된다</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">one_failed</td>
      <td style="text-align: center">하나 이상의 상위 태스크가 실패하자마자 트리거 된다</td>
      <td style="text-align: center">알림 또는 롤백과 같은 일부 오류 처리 태스크의 트리거 규칙</td>
    </tr>
    <tr>
      <td style="text-align: center">none_failed</td>
      <td style="text-align: center">실패한 태스크 없이, 모든 상위 태스크가 성공 또는 건너뛴 경우 트리거 된다</td>
      <td style="text-align: center">스킵된 태스크와 성공한 태스크를 결합한 태스크의 트리거 규칙</td>
    </tr>
    <tr>
      <td style="text-align: center">none_skipped</td>
      <td style="text-align: center">스킵한 태스크 없이, 모든 상위 태스크가 성공 또는 실패한 경우 트리거 된다</td>
      <td style="text-align: center"> </td>
    </tr>
    <tr>
      <td style="text-align: center">dummy</td>
      <td style="text-align: center">업스트림 태스크의 상태와 관계없이 트리거 된다</td>
      <td style="text-align: center">테스트 용도</td>
    </tr>
  </tbody>
</table>

<p><img src="/images/airflow_14.png" alt="" /></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">bash_join</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_join"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo JOIN"</span><span class="p">,</span>
        <span class="n">trigger_rule</span><span class="o">=</span><span class="s">"none_failed"</span>
    <span class="p">)</span>
</code></pre></div></div>

<p><img src="/images/airflow_15.png" alt="" /></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">bash_join</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">"bash_join"</span><span class="p">,</span> 
        <span class="n">bash_command</span><span class="o">=</span><span class="s">"echo JOIN"</span><span class="p">,</span>
        <span class="n">trigger_rule</span><span class="o">=</span><span class="s">"none_skipped"</span>
    <span class="p">)</span>
</code></pre></div></div>

<h1 id="워크플로-트리거">워크플로 트리거</h1>

<ul>
  <li><strong>센서</strong>를 이용하면, 고정된 스케줄링 방식이 아닌 <strong>특정 이벤트로 파이프라인을 트리거</strong> 할 수도 있다</li>
  <li>ex. 새로운 데이터가 도착, 공유 드라이브에 파일이 업로드, 코드를 리포지터리로 푸시, Hive 테이블에 파티션이 있을 때와 같은 경우</li>
  <li>센서는 오퍼레이터의 특수 타입(서브클래스)</li>
  <li>센서는 특정 조건이 True인지 지속적으로 확인하고, True이면 태스크가 성공한 것으로 간주된다. False이면 True 또는 타임아웃이 될 때까지 확인</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">airflow.sensors.filesystem</span> <span class="kn">import</span> <span class="n">FileSensor</span>

<span class="n">wait_for_data</span> <span class="o">=</span> <span class="n">FileSensor</span><span class="p">(</span>
    <span class="n">task_id</span><span class="o">=</span><span class="s">"wait_for_data"</span><span class="p">,</span>
    <span class="n">filepath</span><span class="o">=</span><span class="s">"/data/data.csv"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="nn">airflow.sensors.python</span> <span class="kn">import</span> <span class="n">PythonSensor</span>

<span class="k">def</span> <span class="nf">_wait_for_data</span><span class="p">():</span>
    <span class="n">data_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">"/data/data.csv"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">data_path</span>

<span class="n">wait_for_data</span> <span class="o">=</span> <span class="n">PythonSensor</span><span class="p">(</span>
    <span class="n">task_id</span><span class="o">=</span><span class="s">"wait_for_data"</span><span class="p">,</span>
    <span class="n">python_callable</span><span class="o">=</span><span class="n">_wait_for_data</span>
<span class="p">)</span>

</code></pre></div></div>

<h1 id="참고">참고</h1>
:ET