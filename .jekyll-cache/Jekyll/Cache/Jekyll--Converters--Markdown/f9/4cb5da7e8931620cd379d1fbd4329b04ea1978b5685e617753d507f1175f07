I" 
<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#인덱스" id="markdown-toc-인덱스">인덱스</a></li>
  <li><a href="#인덱스-만들기" id="markdown-toc-인덱스-만들기">인덱스 만들기</a></li>
  <li><a href="#인덱스-종류" id="markdown-toc-인덱스-종류">인덱스 종류</a></li>
  <li><a href="#인덱스-특징" id="markdown-toc-인덱스-특징">인덱스 특징</a></li>
</ul>

<hr />

<h1 id="인덱스">인덱스</h1>

<ul>
  <li>Indexes support efficient execution of queries in MongoDB. Without indexes, MongoDB must scan every document in a collection to return query results. If an appropriate index exists for a query, MongoDB uses the index to limit the number of documents it must scan.</li>
  <li>
    <p>Although indexes improve query performance, adding an index has negative performance impact for write operations. For collections with a high write-to-read ratio, indexes are expensive because each insert must also update any indexes.</p>
  </li>
  <li>
    <p>Indexes are special data structures that store a small portion of the collection’s data set in an easy-to-traverse form. MongoDB indexes use a B-tree data structure.</p>
  </li>
  <li>
    <p>The index stores the value of a specific field or set of fields, ordered by the value of the field. The ordering of the index entries supports efficient equality matches and range-based query operations. In addition, MongoDB can return sorted results using the ordering in the index.</p>
  </li>
  <li>MongoDB creates a unique index on the _id field during the creation of a collection. The _id index prevents clients from inserting two documents with the same value for the _id field. You cannot drop this index.</li>
</ul>

<h1 id="인덱스-만들기">인덱스 만들기</h1>

<ul>
  <li>You cannot rename an index once created. Instead, you must drop and recreate the index with a new name.</li>
  <li>The best indexes for your application must take a number of factors into account, including the kinds of queries you expect, the ratio of reads to writes, and the amount of free memory on your system.</li>
  <li>An index that references multiple fields is a compound index. Compound indexes can dramatically improve query response times.</li>
  <li>Index keys correspond to document fields. In most cases, applying the ESR (Equality, Sort, Range) Rule to arrange the index keys helps to create a more efficient compound index.</li>
</ul>

<h1 id="인덱스-종류">인덱스 종류</h1>

<h1 id="인덱스-특징">인덱스 특징</h1>

:ET