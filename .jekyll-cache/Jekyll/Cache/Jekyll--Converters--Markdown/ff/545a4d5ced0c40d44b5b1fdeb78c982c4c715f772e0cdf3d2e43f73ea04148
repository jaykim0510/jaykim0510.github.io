I"s<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#제네릭generic" id="markdown-toc-제네릭generic">제네릭(Generic)</a></li>
  <li><a href="#제네릭-클래스" id="markdown-toc-제네릭-클래스">제네릭 클래스</a></li>
  <li><a href="#제네릭-메서드" id="markdown-toc-제네릭-메서드">제네릭 메서드</a></li>
</ul>

<hr />

<h1 id="제네릭generic">제네릭(Generic)</h1>
<p>제네릭은 메서드나 클래스 안에서 사용되는 객체의 타입을 지정하고 컴파일 시에 체크하도록 하는 기능을 합니다.</p>

<p>이렇게 하면 <code class="language-plaintext highlighter-rouge">String</code> 타입을 받는 메서드, <code class="language-plaintext highlighter-rouge">Integer</code> 타입을 받는 메서드를 각각 따로 정의할 필요가 없고, 제네릭 메서드 하나로 정의할 수 있습니다.</p>

<p>또 타입을 지정함으로써 컴파일 시점에 타입 체크 기능도 해줄 수 있습니다. (오류 중에 가장 좋은 오류는 컴파일 오류)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>제네릭의 장점

- 타입을 메서드나 클래스의 외부에서 동적으로 지정할 수 있다
- 지정한 타입만 사용한다는 보장이 있기 때문에 별다른 형변환이 필요 없어진다
</code></pre></div></div>

<p>제네릭 사용 예시를 보도록 하겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>


<span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
        <span class="c1">// 또는 ArrayList&lt;String&gt; list1 = new ArrayList&lt;&gt;();</span>
        
        <span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
        <span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 컴파일 오류</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"apple"</span><span class="o">);</span>
        <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"value2"</span><span class="o">);</span> <span class="c1">// 컴파일 오류</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">brand</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">year</span><span class="o">;</span>

    <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"차가 출발합니다"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"차가 멈춥니다"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Driver</span><span class="o">&lt;</span><span class="no">C</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">C</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="no">C</span><span class="o">();</span> <span class="c1">// type parameter 'C' cannot be instantiated directly</span>

    <span class="kt">void</span> <span class="nf">driveStart</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">car</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">driveStop</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">car</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>


<span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Driver</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Driver</span><span class="o">&lt;&gt;();</span>

        <span class="n">d</span><span class="o">.</span><span class="na">driveStart</span><span class="o">();</span>
        <span class="n">d</span><span class="o">.</span><span class="na">driveStop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="제네릭-클래스">제네릭 클래스</h1>

<h1 id="제네릭-메서드">제네릭 메서드</h1>
:ET