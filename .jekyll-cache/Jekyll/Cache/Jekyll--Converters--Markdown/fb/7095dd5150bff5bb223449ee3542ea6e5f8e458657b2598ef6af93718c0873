I"l<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#view에서-활용하는-경우" id="markdown-toc-view에서-활용하는-경우">View에서 활용하는 경우</a>    <ul>
      <li><a href="#create" id="markdown-toc-create">Create</a></li>
      <li><a href="#read" id="markdown-toc-read">Read</a></li>
      <li><a href="#삭제" id="markdown-toc-삭제">삭제</a></li>
    </ul>
  </li>
  <li><a href="#template에서-활용하는-경우" id="markdown-toc-template에서-활용하는-경우">Template에서 활용하는 경우</a></li>
  <li><a href="#관계를-사용한-crud" id="markdown-toc-관계를-사용한-crud">관계를 사용한 CRUD</a></li>
</ul>

<hr />

<h1 id="view에서-활용하는-경우">View에서 활용하는 경우</h1>

<ul>
  <li>장고에서 CRUD와 같은 로직은 뷰(View)에서 처리한다</li>
  <li><code class="language-plaintext highlighter-rouge">Skill</code> 이라는 모델을 예시로 든다</li>
</ul>

<h2 id="create">Create</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">create()</code></li>
  <li>필수가 아닌 필드나 자동으로 채워지는 필드 (예: id)는 값을 주지 않아도 된다</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Skill</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">'파이썬'</span><span class="p">,</span> <span class="n">summary</span><span class="o">=</span><span class="s">'쉽고 재밌는 프로그래밍 언어'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="read">Read</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">all()</code></li>
  <li>모델에 해당하는 모든 오브젝트를 쿼리셋(QuerySet)이라는 객체에 담아 리턴한다</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Skill</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">filter()</code></li>
  <li>필터 조건에 해당하는 오브젝트들을 담은 쿼리셋을 리턴한다</li>
  <li><code class="language-plaintext highlighter-rouge">.filter()</code>와 <code class="language-plaintext highlighter-rouge">.all()</code>은 항상 쿼리셋을 리턴한다. (결과가 0개 또는 1개여도 쿼리셋을 리턴)</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Skill</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">Skill</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">title__startswith</span><span class="o">=</span><span class="s">'파'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">get()</code></li>
  <li>조건에 해당하는 오브젝트 1개를 가져온다</li>
  <li>(하나도 해당되지 않거나, 여러 개가 해당되면 에러가 난다)</li>
  <li>오브젝트 자체를 리턴</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">skill</span> <span class="o">=</span> <span class="n">Skill</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="삭제">삭제</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">delete()</code></li>
  <li>데이터를 삭제하려면 먼저 삭제할 데이터를 가져와서 <code class="language-plaintext highlighter-rouge">.delete()</code> 메소드를 호출해 줘야 한다</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">skill</span> <span class="o">=</span> <span class="n">Skill</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>

<span class="c1"># 삭제
</span><span class="n">skill</span><span class="p">.</span><span class="n">delete</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="template에서-활용하는-경우">Template에서 활용하는 경우</h1>

<ul>
  <li>템플릿에서도 CRUD 연산을 할 수 있지만 제한적이다
    <ul>
      <li>Read 정도만 가능하다</li>
      <li><code class="language-plaintext highlighter-rouge">&lt;Model&gt;.objects</code>로 시작하는 연산을 사용할 수 없다</li>
      <li>파라미터가 들어가는 메소드도 사용할 수 없다</li>
    </ul>
  </li>
  <li>파라미터가 들어가지 않는 <code class="language-plaintext highlighter-rouge">.all()</code>, <code class="language-plaintext highlighter-rouge">.count()</code> 같은 메소드는 호출할 수 있다
    <ul>
      <li>(<code class="language-plaintext highlighter-rouge">,</code>)</li>
    </ul>
  </li>
  <li>어떤 파라미터를 전달해줘야 하거나 하는 경우에는 View에서 결과를 만들고 <code class="language-plaintext highlighter-rouge">extra_context</code> 같은 방법을 사용해 전달해야한다</li>
</ul>

<h1 id="관계를-사용한-crud">관계를 사용한 CRUD</h1>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. user가 작성한 리뷰들 필터
</span><span class="n">Review</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">author</span><span class="o">=</span><span class="n">user</span><span class="p">)</span>

<span class="c1"># 2. id 1을 가지고 있는 유저가 작성한 리뷰들 필터
</span><span class="n">Review</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">author__id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># 3. jonghoon이라는 닉네임을 가지고 있는 유저가 작성한 리뷰들 필터
</span><span class="n">Review</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">author__nickname</span><span class="o">=</span><span class="s">"jay"</span><span class="p">)</span>

<span class="c1"># 4. 이메일이 naver.com으로 끝나는 유저들이 작성한 리뷰들 필터
</span><span class="n">Review</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">author__email__endswith</span><span class="o">=</span><span class="s">'naver.com'</span><span class="p">)</span>

<span class="c1"># 5. Comment 모델 -&gt; Review 모델 -&gt; User 모델 -&gt; User 모델의 nickname 속성
</span><span class="n">Comment</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">review__author__nickname</span><span class="o">=</span><span class="s">'jay'</span><span class="p">)</span>
</code></pre></div></div>
:ET