I"<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#object-oriented-programming" id="markdown-toc-object-oriented-programming">Object Oriented Programming</a></li>
  <li><a href="#design-pattern" id="markdown-toc-design-pattern">Design Pattern</a></li>
  <li><a href="#strategy-pattern" id="markdown-toc-strategy-pattern">Strategy Pattern</a></li>
  <li><a href="#singleton-pattern" id="markdown-toc-singleton-pattern">Singleton Pattern</a></li>
  <li><a href="#state-pattern" id="markdown-toc-state-pattern">State Pattern</a></li>
  <li><a href="#observer-pattern" id="markdown-toc-observer-pattern">Observer Pattern</a></li>
  <li><a href="#proxy-pattern" id="markdown-toc-proxy-pattern">Proxy Pattern</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<h1 id="object-oriented-programming">Object Oriented Programming</h1>

<h1 id="design-pattern">Design Pattern</h1>

<h1 id="strategy-pattern">Strategy Pattern</h1>

<ul>
  <li>뭔가를 실행할 때 옵션마다 다르게 실행되면 좋겠어 (특정 메서드를 모드에 따라 다르게 실행하고 싶을 때)</li>
  <li>예를 들어, 검색에 옵션 [뉴스, 이미지, 동영상, 사전] 선택하면 옵션에 맞게 검색 결과를 돌려줘야함</li>
  <li>이 때 검색 버튼에 옵션마다 다르게 실행하도록 하는 코드를 작성하는 것은 객체 지향적이지 않음 -&gt; 검색 기능을 인터페이스해 놓고 옵션마다 다른 구현체가 리턴되도록</li>
</ul>

<h1 id="singleton-pattern">Singleton Pattern</h1>

<ul>
  <li>서버에 객체가 하나만 있으면 좋겠어</li>
  <li>예를 들어, 다크 모드-밝은 모드를 관리하는 객체는 한 개만 -&gt; 페이지 옮겨가더라도 계속 유지</li>
  <li>static 사용 -&gt; 하나의 프로세스에 하나의 객체만 컴파일 단계에 생성</li>
  <li>싱글턴 패턴으로 디자인 할 때에는 멀티 스레드 환경에서 오류가 나지 않도록 유의해야함</li>
</ul>

<h1 id="state-pattern">State Pattern</h1>

<ul>
  <li>같은 버튼이지만 상황에 따라 다르게 동작하면 좋겠어 (특정 메서드를 상황에 따라 실행하는 모드가 달라지도록 하고 싶을 때)</li>
  <li>예를 들어, 전원 버튼은 전원이 켜진 상태에서는 끄는 역할을, 꺼진 상태에서는 키는 역할을 함</li>
</ul>

<h1 id="observer-pattern">Observer Pattern</h1>

<h1 id="proxy-pattern">Proxy Pattern</h1>

<p><img src="/images/backend_2.png" alt="" /></p>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://www.hanbit.co.kr/channel/category/category_view.html?cms_code=CMS8616098823" target="_blank">한빛 출판 네트워크, [Design pattern] 많이 쓰는 14가지 핵심 GoF 디자인 패턴의 종류</a></li>
  <li><a href="https://www.upwork.com/resources/beginners-guide-back-end-development" target="_blank">upwork, A Beginner’s Guide to Back-End Development</a></li>
  <li><a href="https://readystory.tistory.com/116?category=822867" target="_blank">준비된 개발자, [생성 패턴] 싱글톤(Singleton) 패턴을 구현하는 6가지 방법</a></li>
  <li><a href="https://www.youtube.com/watch?v=lJES5TQTTWE" target="_blank">얄팍한 코딩사전 유튜브, 객체지향 디자인패턴 1</a></li>
</ul>
:ET