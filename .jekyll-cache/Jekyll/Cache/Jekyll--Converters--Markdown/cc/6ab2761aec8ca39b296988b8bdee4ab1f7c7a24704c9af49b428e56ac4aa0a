I".4<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#pipes" id="markdown-toc-pipes">Pipes</a>    <ul>
      <li><a href="#built-in-pipes" id="markdown-toc-built-in-pipes">Built-in Pipes</a>        <ul>
          <li><a href="#validationpipe" id="markdown-toc-validationpipe">ValidationPipe</a></li>
          <li><a href="#defaultvaluepipe" id="markdown-toc-defaultvaluepipe">DefaultValuePipe</a></li>
          <li><a href="#parse-pipe" id="markdown-toc-parse-pipe">Parse* Pipe</a></li>
        </ul>
      </li>
      <li><a href="#pipe-적용하기" id="markdown-toc-pipe-적용하기">Pipe 적용하기</a>        <ul>
          <li><a href="#parameter-level-적용-예시" id="markdown-toc-parameter-level-적용-예시">Parameter-level 적용 예시</a></li>
          <li><a href="#global-level-적용-예시" id="markdown-toc-global-level-적용-예시">Global-level 적용 예시</a></li>
        </ul>
      </li>
      <li><a href="#커스텀-파이프-만들기" id="markdown-toc-커스텀-파이프-만들기">커스텀 파이프 만들기</a></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="pipes">Pipes</h1>

<ul>
  <li>들어온 데이터를 검증/변환하는 용도의 클래스</li>
  <li><code class="language-plaintext highlighter-rouge">PipeTransform</code> 를 implements 하면 됨</li>
</ul>

<h2 id="built-in-pipes">Built-in Pipes</h2>

<ul>
  <li>Nest에서 기본적으로 다음과 같은 빌트인 파이프 제공</li>
</ul>

<h3 id="validationpipe">ValidationPipe</h3>

<ul>
  <li>글로벌한 규칙을 적용하고 싶은 경우에 많이 사용</li>
  <li><code class="language-plaintext highlighter-rouge">ValidationPipeOptions</code> 객체를 통해 옵션 전달할 수 있음</li>
  <li>ex. <code class="language-plaintext highlighter-rouge">whitelist</code>, <code class="language-plaintext highlighter-rouge">forbidNonWhitelisted</code>, <code class="language-plaintext highlighter-rouge">transform</code> 등과 같은 인자로 글로벌하게 규칙 적용</li>
  <li>어플리케이션에서 정해둔 인풋 데이터를 <code class="language-plaintext highlighter-rouge">whitelist</code> 라고 함</li>
  <li><code class="language-plaintext highlighter-rouge">whitelist: true</code>
    <ul>
      <li>정해둔 인풋 데이터만 받음</li>
      <li>(정해두지 않은 예상치 않은 인풋 데이터를 허용하면, 보안상 취약점 생길 수 있음)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">forbidNonWhitelisted: true</code>
    <ul>
      <li>정해두지 않은 예상치 않은 인풋 데이터가 들어오면, 400 예외 발생시킴으로써 아예 어플리케이션에서 추가 실행되지 않도록 할 수 있음</li>
      <li>(<code class="language-plaintext highlighter-rouge">whitelist: true</code> 옵션도 함께 줘야 예상대로 동작함)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">transform: true</code>
    <ul>
      <li>타입 힌팅으로 전달해준 타입으로 알아서 변환해줌</li>
      <li>(ex. ParseIntPipe 안써도, int로 타입 힌팅해주면 numeric한 문자열을 정수 타입으로 변환해줌)</li>
    </ul>
  </li>
</ul>

<h3 id="defaultvaluepipe">DefaultValuePipe</h3>

<ul>
  <li>Parse* 파이프를 통과해야 하는 파라미터는 그냥 단순히 =’기본값’ 형태로 디폴트를 줄 수 없음</li>
  <li><code class="language-plaintext highlighter-rouge">DefaultValuePipe</code> 파이프를 사용해 디폴트 값을 줘야함</li>
</ul>

<h3 id="parse-pipe">Parse* Pipe</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ParseIntPipe</code>, <code class="language-plaintext highlighter-rouge">ParseFloatPipe</code>, <code class="language-plaintext highlighter-rouge">ParseBoolPipe</code>, <code class="language-plaintext highlighter-rouge">ParseArrayPipe</code>, <code class="language-plaintext highlighter-rouge">ParseUUIDPipe</code>, <code class="language-plaintext highlighter-rouge">ParseEnumPipe</code>, <code class="language-plaintext highlighter-rouge">ParseFilePipe</code></li>
  <li>Parse* 파이프들은 Int, Float, .. 등으로 데이터를 변환시켜줌으로써 해당 데이터 타입임을 확실할 수 있도록 해줌</li>
  <li>변환 불가능한 타입이면 Bad Request 예외 발생 (ex. ParseIntPipe에 대해 ‘Apple’: 예외 발생, ‘1’: 1로 변환)</li>
  <li>대부분 파라미터에 사용</li>
</ul>

<h2 id="pipe-적용하기">Pipe 적용하기</h2>

<h3 id="parameter-level-적용-예시">Parameter-level 적용 예시</h3>

<ul>
  <li>@Param(), @Query() 등과 같은 데코레이터에 전달</li>
  <li>여러 파이프를 순차적으로 전달할 수도 있음</li>
  <li>의존성 주입 방식으로 그냥 클래스만 전달 할 수도 있고, 옵션을 넣어줌으로써 조금 더 커스텀하게 쓰고 싶은 경우 직접 인스턴스를 전달할 수도 있음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">:id</span><span class="dl">'</span><span class="p">)</span>
<span class="k">async</span> <span class="nx">findOne</span><span class="p">(@</span><span class="nd">Param</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ParseIntPipe</span><span class="p">)</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">catsService</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">:id</span><span class="dl">'</span><span class="p">)</span>
<span class="k">async</span> <span class="nx">findOne</span><span class="p">(</span>
  <span class="p">@</span><span class="nd">Param</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">ParseIntPipe</span><span class="p">({</span> <span class="na">errorHttpStatusCode</span><span class="p">:</span> <span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">NOT_ACCEPTABLE</span> <span class="p">}))</span>
  <span class="nx">id</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">catsService</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Parse* 파이프들은 항상 어떤 값이 들어오기를 기대 -&gt; <code class="language-plaintext highlighter-rouge">null</code>, <code class="language-plaintext highlighter-rouge">undefined</code> 들어오면 예외 발생</li>
  <li>그래서 Parse* 파이프 앞에 먼저 <code class="language-plaintext highlighter-rouge">DefaultValuePipe</code> 파이프 넣어주면 좋음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
<span class="k">async</span> <span class="nx">findAll</span><span class="p">(</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">activeOnly</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">DefaultValuePipe</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span> <span class="nx">ParseBoolPipe</span><span class="p">)</span> <span class="nx">activeOnly</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span>
  <span class="p">@</span><span class="nd">Query</span><span class="p">(</span><span class="dl">'</span><span class="s1">page</span><span class="dl">'</span><span class="p">,</span> <span class="k">new</span> <span class="nx">DefaultValuePipe</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nx">ParseIntPipe</span><span class="p">)</span> <span class="nx">page</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">catsService</span><span class="p">.</span><span class="nx">findAll</span><span class="p">({</span> <span class="nx">activeOnly</span><span class="p">,</span> <span class="nx">page</span> <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="global-level-적용-예시">Global-level 적용 예시</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">useGlobalPipes()</code>를 통해 <code class="language-plaintext highlighter-rouge">main.ts</code> 파일에 적용</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">NestFactory</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">useGlobalPipes</span><span class="p">(</span><span class="k">new</span> <span class="nx">ValidationPipe</span><span class="p">(</span>
  <span class="p">{</span> 
    <span class="na">whitelist</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">forbidNonWhitelisted</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="커스텀-파이프-만들기">커스텀 파이프 만들기</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PipeTransform</code> 을 implements 하면 됨</li>
  <li><code class="language-plaintext highlighter-rouge">transform()</code> 을 구현해야함. 다음의 두 인자를 받음
    <ul>
      <li><code class="language-plaintext highlighter-rouge">value</code>: 파이프를 지나는 데이터</li>
      <li><code class="language-plaintext highlighter-rouge">metadata</code>: 파이프가 적용된 데이터의 메타데이터
        <ul>
          <li><code class="language-plaintext highlighter-rouge">metadata</code> 객체는 다음과 같은 속성을 가짐</li>
          <li><code class="language-plaintext highlighter-rouge">type</code>: 인자가 요청의 어느 부분으로 들어오는지 (‘body’, ‘query’, ‘param’, ‘custom’)</li>
          <li><code class="language-plaintext highlighter-rouge">metatype</code>: 데이터에 선언된 타입 (ex. <code class="language-plaintext highlighter-rouge">@Param('id', ParseIntPipe) id: number</code>) 인 경우 <code class="language-plaintext highlighter-rouge">number</code>)</li>
          <li><code class="language-plaintext highlighter-rouge">data</code>: 데코레이터에 넘겨진 문자열 (ex. <code class="language-plaintext highlighter-rouge">@Param('id', ParseIntPipe) id: number</code>) 인 경우 <code class="language-plaintext highlighter-rouge">id</code>)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">PipeTransform</span><span class="p">,</span> <span class="nx">Injectable</span><span class="p">,</span> <span class="nx">ArgumentMetadata</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/common</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">MyValidationPipe</span> <span class="k">implements</span> <span class="nx">PipeTransform</span> <span class="p">{</span>
  <span class="nx">transform</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="kr">any</span><span class="p">,</span> <span class="nx">metadata</span><span class="p">:</span> <span class="nx">ArgumentMetadata</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET