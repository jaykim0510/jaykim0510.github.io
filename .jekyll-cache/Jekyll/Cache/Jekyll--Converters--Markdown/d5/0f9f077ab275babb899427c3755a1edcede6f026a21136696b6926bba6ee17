I"=<<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#airflow란" id="markdown-toc-airflow란">Airflow란?</a></li>
  <li><a href="#airflow-동작원리" id="markdown-toc-airflow-동작원리">Airflow 동작원리</a></li>
  <li><a href="#dag-skeleton" id="markdown-toc-dag-skeleton">DAG Skeleton</a>    <ul>
      <li><a href="#operators" id="markdown-toc-operators">Operators</a></li>
      <li><a href="#sensors" id="markdown-toc-sensors">Sensors</a></li>
      <li><a href="#dag-만들어보기" id="markdown-toc-dag-만들어보기">DAG 만들어보기</a>        <ul>
          <li><a href="#dag-정의할-때-자주-사용하는-파라미터" id="markdown-toc-dag-정의할-때-자주-사용하는-파라미터">DAG 정의할 때 자주 사용하는 파라미터</a></li>
          <li><a href="#dag를-선언하는-3가지-방법" id="markdown-toc-dag를-선언하는-3가지-방법">DAG를 선언하는 3가지 방법</a></li>
          <li><a href="#dag-작성-예시" id="markdown-toc-dag-작성-예시">DAG 작성 예시</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#dashboard" id="markdown-toc-dashboard">Dashboard</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DAGs, Operators, Tasks, Sensors, Executor, Scheduler
</code></pre></div></div>

<h1 id="airflow란">Airflow란?</h1>

<ul>
  <li>2014년 에어비앤비(Airbnb)에서 시작되어, 현재 아파치(Apache) 재단 탑레벨 프로젝트</li>
  <li>Airflow는 Python 코드로 워크플로우(workflow)를 작성하고, 스케줄링, 모니터링 하는 플랫폼</li>
  <li>Airflow를 통해서 데이터엔지니어링의 ETL 작업을 자동화하고, DAG(Directed Acyclic Graph) 형태의 워크플로우 작성이 가능</li>
  <li>AWS, GCP 모두 Airflow managed service를 제공할 정도로 널리 사용</li>
</ul>

<p><img src="/images/airflow_2.png" alt="" /></p>

<h1 id="airflow-동작원리">Airflow 동작원리</h1>

<p><img src="/images/airflow_1.png" alt="" /></p>

<ul>
  <li>유저는 Web Server를 통해 Airflow를 모니터링, 조작</li>
  <li>유저가 정의한 DAG는 DAGs에 저장</li>
  <li>Scheduler는 DAGs에 저장된 DAG를 주기적으로 실행</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Scheduler가 DAG를 실행하면 DagRun 오브젝트 생성됨
2. DagRun 오브젝트는 안에 정의된 Operator를 Task로 인스턴스화
3. Task들이 Scheduler에 의해 Worker에게 전달됨
</code></pre></div></div>

<p><img src="/images/airflow_3.png" alt="" /></p>

<h1 id="dag-skeleton">DAG Skeleton</h1>

<ul>
  <li>DAG(Directed Acyclic Graph): 워크플로우를 파이썬 언어로 코드화한 것</li>
  <li>Airflow의 핵심은 DAG를 잘 작성하는 것</li>
  <li>DAG는 크게 DAG 선언, Operator, Sensor, Operator간 의존성 주입</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">DAG</span><span class="p">(</span><span class="s">"my-dag"</span><span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
    <span class="n">ping</span> <span class="o">=</span> <span class="n">SimpleHttpOperator</span><span class="p">(</span><span class="n">endpoint</span><span class="o">=</span><span class="s">"http://example.com/update/"</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">EmailOperator</span><span class="p">(</span><span class="n">to</span><span class="o">=</span><span class="s">"admin@example.com"</span><span class="p">,</span> <span class="n">subject</span><span class="o">=</span><span class="s">"Update complete"</span><span class="p">)</span>

    <span class="n">ping</span> <span class="o">&gt;&gt;</span> <span class="n">email</span>
</code></pre></div></div>

<h2 id="operators">Operators</h2>

<ul>
  <li>DAG에 작업(Task)을 템플릿 형태로 미리 정의해둔 것 (Operator, Sensor를 클래스, Task를 객체로 생각할 수 있음)</li>
  <li>에어플로우 설치시 함께 제공되는 built-in Operator와, 필요할 때 별도로 설치 가능한 Operator가 있음</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># built-in

BashOperator: 쉘 커맨드 실행
PythonOperator: 파이썬 함수 호출
EmailOperator: 이메일 전송
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># providers

SimpleHttpOperator: HTTP 메세지 전송
MySqlOperator: SQL문 실행
PostgresOperator
JdbcOperator
DockerOperator
HiveOperator
S3FileTransformOperator
PrestoToMySqlOperator
SlackAPIOperator
</code></pre></div></div>

<h2 id="sensors">Sensors</h2>

<ul>
  <li>Operator의 특별한 타입</li>
  <li>특정 이벤트가 일어나길 기다렸다가, 발생하면 다음 태스크를 진행</li>
  <li>기다리는 이벤트가 단순히 시간 기반일 수도 있고, 아니면 어떤 파일이 될 수도 있음</li>
</ul>

<h2 id="dag-만들어보기">DAG 만들어보기</h2>

<h3 id="dag-정의할-때-자주-사용하는-파라미터">DAG 정의할 때 자주 사용하는 파라미터</h3>
<ul>
  <li>전체 파라미터는 <a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/dag/index.html" target="_blank"><strong>공식문서 참고</strong></a></li>
  <li><strong>dag_id</strong>: The id of the DAG</li>
  <li><strong>schedule_interval</strong>: Defines how often that DAG runs</li>
  <li><strong>start_date</strong>: The timestamp from which the scheduler will attempt to backfill</li>
  <li><strong>default_args</strong>: A dictionary of default parameters to be used as constructor keyword parameters when initialising operators.</li>
  <li><strong>catchup</strong>: Perform scheduler catchup (or only run latest)? Defaults to True</li>
  <li><strong>tags</strong>: List of tags to help filtering DAGs in the UI.</li>
</ul>

<h3 id="dag를-선언하는-3가지-방법">DAG를 선언하는 3가지 방법</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">with</code> 컨텍스트 매니저
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">DAG</span><span class="p">(</span>
  <span class="s">"my_dag_name"</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">pendulum</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tz</span><span class="o">=</span><span class="s">"UTC"</span><span class="p">),</span>
  <span class="n">schedule_interval</span><span class="o">=</span><span class="s">"@daily"</span><span class="p">,</span> <span class="n">catchup</span><span class="o">=</span><span class="bp">False</span>
<span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
  <span class="n">op</span> <span class="o">=</span> <span class="n">EmptyOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="s">"task"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>DAG 인스턴스를 Operator에 직접 전달
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_dag</span> <span class="o">=</span> <span class="n">DAG</span><span class="p">(</span><span class="s">"my_dag_name"</span><span class="p">,</span> <span class="n">start_date</span><span class="o">=</span><span class="n">pendulum</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tz</span><span class="o">=</span><span class="s">"UTC"</span><span class="p">),</span>
           <span class="n">schedule_interval</span><span class="o">=</span><span class="s">"@daily"</span><span class="p">,</span> <span class="n">catchup</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">op</span> <span class="o">=</span> <span class="n">EmptyOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="s">"task"</span><span class="p">,</span> <span class="n">dag</span><span class="o">=</span><span class="n">my_dag</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@dag</code> 데코레이터
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">dag</span><span class="p">(</span><span class="n">start_date</span><span class="o">=</span><span class="n">pendulum</span><span class="p">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2021</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tz</span><span class="o">=</span><span class="s">"UTC"</span><span class="p">),</span>
   <span class="n">schedule_interval</span><span class="o">=</span><span class="s">"@daily"</span><span class="p">,</span> <span class="n">catchup</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">generate_dag</span><span class="p">():</span>
  <span class="n">op</span> <span class="o">=</span> <span class="n">EmptyOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="s">"task"</span><span class="p">)</span>

<span class="n">dag</span> <span class="o">=</span> <span class="n">generate_dag</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="dag-작성-예시">DAG 작성 예시</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">airflow</span> <span class="kn">import</span> <span class="n">DAG</span>
<span class="kn">from</span> <span class="nn">airflow.operators.bash</span> <span class="kn">import</span> <span class="n">BashOperator</span>

<span class="n">default_args</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'start_date'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">with</span> <span class="n">DAG</span><span class="p">(</span><span class="n">dag_id</span><span class="o">=</span><span class="s">'recruitment-airflow'</span><span class="p">,</span>
        <span class="n">schedule_interval</span><span class="o">=</span><span class="s">'@daily'</span><span class="p">,</span>
        <span class="n">default_args</span><span class="o">=</span><span class="n">default_args</span><span class="p">,</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="s">'recruitment'</span><span class="p">],</span>
        <span class="n">catchup</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="k">as</span> <span class="n">dag</span><span class="p">:</span>
    <span class="n">crawling</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'crawling'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'python /opt/pipeline/script/crawlingToMongo.py'</span>
    <span class="p">)</span>
    <span class="n">MongoDBToKafka</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'MongoDBToKafka'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'python /opt/pipeline/script/MongoDBToKafka.py'</span>
    <span class="p">)</span>
    <span class="n">KafkaToS3</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'KafkaToS3'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'python /opt/pipeline/script/KafkaToS3.py'</span>
    <span class="p">)</span>
    <span class="n">S3ToElasticsearch</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'S3ToElasticsearch'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'python /opt/pipeline/script/S3ToElasticsearch.py'</span>
    <span class="p">)</span>
    <span class="n">S3ToMySQL</span> <span class="o">=</span> <span class="n">BashOperator</span><span class="p">(</span>
        <span class="n">task_id</span><span class="o">=</span><span class="s">'S3ToMySQL'</span><span class="p">,</span>
        <span class="n">bash_command</span><span class="o">=</span><span class="s">'python /opt/pipeline/script/S3ToMySQL.py'</span>
    <span class="p">)</span>

    <span class="n">crawling</span> <span class="o">&gt;&gt;</span> <span class="n">MongoDBToKafka</span> <span class="o">&gt;&gt;</span> <span class="n">KafkaToS3</span> <span class="o">&gt;&gt;</span> <span class="p">[</span><span class="n">S3ToElasticsearch</span><span class="p">,</span> <span class="n">S3ToMySQL</span><span class="p">]</span>
</code></pre></div></div>

<h1 id="dashboard">Dashboard</h1>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://airflow.apache.org/docs/apache-airflow/stable/concepts/index.html" target="_blank">Airflow 공식문서</a></li>
  <li><a href="https://www.bucketplace.com/post/2021-04-13-%EB%B2%84%ED%82%B7%ED%94%8C%EB%A0%88%EC%9D%B4%EC%8A%A4-airflow-%EB%8F%84%EC%9E%85%EA%B8%B0/" target="_blank">버킷플레이스 Airflow 도입기</a></li>
  <li><a href="https://magpienote.tistory.com/192" target="_blank">까치의 일상 노트, [Airflow 기본 내용] Airflow란? 구성요소, 구동원리, 개념, 용어 정리</a></li>
  <li><a href="https://velog.io/@makengi/AirFlow-AirFlow-%EC%9A%A9%EC%96%B4-%EC%A0%95%EB%A6%AC" target="_blank">[AirFlow] AirFlow 용어 정리</a></li>
  <li><a href="" target="_blank"></a></li>
  <li><a href="" target="_blank"></a></li>
</ul>
:ET