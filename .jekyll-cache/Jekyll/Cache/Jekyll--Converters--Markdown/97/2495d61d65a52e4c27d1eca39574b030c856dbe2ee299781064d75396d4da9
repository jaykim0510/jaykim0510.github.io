I" <hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#guards" id="markdown-toc-guards">Guards</a>    <ul>
      <li><a href="#guard-만들기" id="markdown-toc-guard-만들기">Guard 만들기</a></li>
      <li><a href="#guard-적용하기" id="markdown-toc-guard-적용하기">Guard 적용하기</a>        <ul>
          <li><a href="#컨트롤러에-적용하고-싶은-경우" id="markdown-toc-컨트롤러에-적용하고-싶은-경우">컨트롤러에 적용하고 싶은 경우</a></li>
          <li><a href="#라우트-핸들러에-적용하고-싶은-경우" id="markdown-toc-라우트-핸들러에-적용하고-싶은-경우">라우트 핸들러에 적용하고 싶은 경우</a></li>
          <li><a href="#글로벌하게-적용하고-싶은-경우" id="markdown-toc-글로벌하게-적용하고-싶은-경우">글로벌하게 적용하고 싶은 경우</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="guards">Guards</h1>

<ul>
  <li>인증/인가 용도의 클래스</li>
  <li><code class="language-plaintext highlighter-rouge">CanActivate</code> 를 implements 하면 됨</li>
  <li>가드 또한 <code class="language-plaintext highlighter-rouge">constructor()</code> 생성자 함수로 의존성 주입할 수 있음</li>
</ul>

<h2 id="guard-만들기">Guard 만들기</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CanActivate</code> 를 implements -&gt; <code class="language-plaintext highlighter-rouge">canActivate()</code> 메서드 구현해야함</li>
  <li><code class="language-plaintext highlighter-rouge">canActivate()</code> 함수는 boolean을 리턴해야함
    <ul>
      <li>true면 요청을 처리함</li>
      <li>false면 요청을 거부함</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">canActivate()</code> 함수는 Execution Context가 인자로 제공됨 -&gt; 이를 통해 요청 객체를 참조할 수 있음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span><span class="p">,</span> <span class="nx">CanActivate</span><span class="p">,</span> <span class="nx">ExecutionContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Observable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">rxjs</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">RolesGuard</span> <span class="k">implements</span> <span class="nx">CanActivate</span> <span class="p">{</span>
  <span class="nx">canActivate</span><span class="p">(</span>
    <span class="nx">context</span><span class="p">:</span> <span class="nx">ExecutionContext</span><span class="p">,</span>
  <span class="p">):</span> <span class="nx">boolean</span> <span class="o">|</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="nx">boolean</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">switchToHttp</span><span class="p">().</span><span class="nx">getRequest</span><span class="p">()</span>
    <span class="kd">const</span> <span class="nx">isAdmin</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">roles</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span>
    <span class="k">return</span> <span class="nx">isAdmin</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="guard-적용하기">Guard 적용하기</h2>

<h3 id="컨트롤러에-적용하고-싶은-경우">컨트롤러에 적용하고 싶은 경우</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">)</span>
<span class="p">@</span><span class="nd">UseGuards</span><span class="p">(</span><span class="nx">RolesGuard</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{}</span>
</code></pre></div></div>

<h3 id="라우트-핸들러에-적용하고-싶은-경우">라우트 핸들러에 적용하고 싶은 경우</h3>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">UserController</span> <span class="p">{</span>

  <span class="p">@</span><span class="nd">UseGuards</span><span class="p">(</span><span class="nx">RolesGuard</span><span class="p">)</span>
  <span class="p">@</span><span class="nd">Get</span><span class="p">()</span>
  <span class="nx">readUser</span><span class="p">()</span> <span class="p">{}</span>

<span class="p">}</span>
</code></pre></div></div>

<h3 id="글로벌하게-적용하고-싶은-경우">글로벌하게 적용하고 싶은 경우</h3>

<ul>
  <li>의존성 주입이 적용되지 않은 방법</li>
  <li>모듈 밖에서 가드가 등록되었기 때문에 의존성 주입이 적용되지 않음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">NestFactory</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">AppModule</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">useGlobalGuards</span><span class="p">(</span><span class="k">new</span> <span class="nx">RolesGuard</span><span class="p">());</span>
</code></pre></div></div>

<ul>
  <li>의존성 주입이 적용되는 방법</li>
  <li>아무 모듈중 하나에 다음과 같은 방법으로 의존성 주입할 수 있음</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Module</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">APP_GUARD</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/core</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Module</span><span class="p">({</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">provide</span><span class="p">:</span> <span class="nx">APP_GUARD</span><span class="p">,</span>
      <span class="na">useClass</span><span class="p">:</span> <span class="nx">RolesGuard</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">],</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{}</span>
</code></pre></div></div>

:ET