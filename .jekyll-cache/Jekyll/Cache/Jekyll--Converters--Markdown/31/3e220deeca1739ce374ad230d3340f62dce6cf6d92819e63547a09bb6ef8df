I"UI<hr />
<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#http-api-rest-api" id="markdown-toc-http-api-rest-api">HTTP API? REST API?</a></li>
  <li><a href="#rest-api" id="markdown-toc-rest-api">REST API</a></li>
  <li><a href="#restful" id="markdown-toc-restful">RESTful</a>    <ul>
      <li><a href="#uri-규칙" id="markdown-toc-uri-규칙">URI 규칙</a></li>
      <li><a href="#http-method-활용" id="markdown-toc-http-method-활용">HTTP Method 활용</a></li>
    </ul>
  </li>
  <li><a href="#rest와-restful의-개념" id="markdown-toc-rest와-restful의-개념">REST와 RESTful의 개념</a></li>
  <li><a href="#참고" id="markdown-toc-참고">참고</a></li>
</ul>
<hr />

<h1 id="http-api-rest-api">HTTP API? REST API?</h1>
<p>HTTP API와 REST API는 사실 거의 같은 의미로 사용됩니다. 그런데 디테일하게 들어가면 차이가 있습니다. HTTP API는 HTTP를 사용해서 서로 정해둔 스펙으로 데이터를 주고 받으며 통신하는 것으로 이해하시면 됩니다. 그래서 상당히 넓은 의미로 사용됩니다. 반면에 REST API는 HTTP API에 여러가지 <strong>제약 조건이 추가</strong>됩니다.</p>

<p>REST는 다음 4가지 제약조건을 만족해야 합니다.</p>

<ul>
  <li>자원의 식별</li>
  <li>메시지를 통한 리소스 조작</li>
  <li>자기서술적 메서지</li>
  <li>애플리케이션의 상태에 대한 엔진으로서 하이퍼미디어</li>
</ul>

<p>여러가지가 있지만 대표적으로 구현하기 어려운 부분이 마지막에 있는 부분인데요. 이것은 HTML처럼 하이퍼링크가 추가되어서 다음에 어떤 API를 호출해야 하는지를 해당 링크를 통해서 받을 수 있어야 합니다.</p>

<p>그리고 이런 부분을 완벽하게 지키면서 개발하는 것을 RESTful API라고 하는데요. 실무에서 이런 방법으로 개발하는 것은 현실적으로 어렵고, 또 추가 개발 비용대비 효과가 있는 것도 아닙니다.</p>

<p>그런데 이미 많은 사람들이 해당 조건을 지키지 않아도 REST API라고 하기 때문에, HTTP API나 REST API를 거의 같은 의미로 사용하고 있습니다. 하지만 앞서 말씀드린 것 처럼 엄격하게 위의 내용들을 모두 지켜야 REST API라고 할 수 있습니다.(하지만 다들 HTTP API를 REST API라고 이미 하고 있기 때문에, 누군가 REST API라고 하면 그냥 아~ HTTP API를 이야기 하는구나 라고 생각하고 들으시면 됩니다. 물론 엄격하게는 다릅니다.)</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/RP_f5dMoHFc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h1 id="rest-api">REST API</h1>

<ul>
  <li><strong>REpresentational State Transfer</strong></li>
  <li>프론트엔드에서 백엔드의 데이터를 가져올 때 가장 많이 사용하는 자원 식별/처리 방식</li>
  <li>URI로 자원을 요청하여 특정 형태로 표현</li>
  <li>HTTP API를 활용해 행동을 표현</li>
  <li>
    <p>REST API의 요청에 대한 응답은 대체로 JSON으로 표현</p>
  </li>
  <li>REST API는 무상태(Stateless)환경에서 동작하는 것을 전제로 함</li>
  <li>따라서 보안 및 인증에 대해서는 JWT(JSON Web Token), OAuth와 같은 토큰 인증이 사용</li>
  <li>상태 유지를 위한 세션(Sessions)은 사용하지 않음</li>
  <li>자주 사용하는 자원에 대해서는 ETag, Last-Modified 헤더를 통한 캐싱도 가능</li>
</ul>

<h1 id="restful">RESTful</h1>

<ul>
  <li>URI로 자원을 표현하고, HTTP Method로 행동을 표현</li>
</ul>

<h2 id="uri-규칙">URI 규칙</h2>

<table>
  <tbody>
    <tr>
      <td><strong>규칙</strong></td>
      <td><strong>좋은 예</strong></td>
      <td><strong>나쁜 예</strong></td>
    </tr>
    <tr>
      <td>마지막이 /로 끝나면 안된다</td>
      <td>http://api.test.com/users</td>
      <td>http://api.test.com/users/</td>
    </tr>
    <tr>
      <td>_대신 -를 사용한다</td>
      <td>http://api.test.com/tag/rest-api</td>
      <td>http://api.test.com/tag/rest_api</td>
    </tr>
    <tr>
      <td>소문자로 구성한다</td>
      <td>http://api.test.com/tag/rest-api</td>
      <td>http://api.test.com/tag/REST-api</td>
    </tr>
    <tr>
      <td>동사 URI로 포함시키지 않는다</td>
      <td>http://api.test.com/user/1</td>
      <td>http://api.test.com/delete-user/1</td>
    </tr>
    <tr>
      <td>파일 확장자는 표시하지 않는다</td>
      <td>http://api.test.com/users/1/profile</td>
      <td>http://api.test.com/users/1/profile.png</td>
    </tr>
  </tbody>
</table>

<h2 id="http-method-활용">HTTP Method 활용</h2>

<ul>
  <li>행위에 대한 표현은 URI에서 하지 않고 HTTP Method를 이용하도록 한다</li>
  <li>가장 많이 사용하는 메서드는 GET, POST, PUT, DELETE 이다</li>
</ul>

<p><img src="/images/rest_1.png" alt="" /></p>

<table>
  <tbody>
    <tr>
      <td>상태코드</td>
      <td>설명</td>
    </tr>
    <tr>
      <td>200 OK</td>
      <td>요청이 올바르게 수행되었음(GET, PUT)</td>
    </tr>
    <tr>
      <td>201 Created</td>
      <td>서버가 새로운 리소스를 생성했음(POST)</td>
    </tr>
    <tr>
      <td>204 No Content</td>
      <td>응답할 데이터가 없음(HTTP Body가 없음) (DELETE, PUT)</td>
    </tr>
    <tr>
      <td>400 Bad Request</td>
      <td>요청이 잘못되었음</td>
    </tr>
    <tr>
      <td>401 Unauthorized</td>
      <td>인증(로그인)이 필요함</td>
    </tr>
    <tr>
      <td>403 Forbidden</td>
      <td>로그인 되었으나 해당 자원에 대한 권한이 없음</td>
    </tr>
    <tr>
      <td>404 Not Found</td>
      <td>존재하지 않는 자원에 대해 요청했음 (URI가 잘못된 경우?)</td>
    </tr>
    <tr>
      <td>405 Method Not Allowed</td>
      <td>자원이 지원하지 않는 메소드임 (Method가 잘못된 경우?)</td>
    </tr>
    <tr>
      <td>409 Confilct</td>
      <td>비지니스 로직상 요청을 처리하지 못한 경우</td>
    </tr>
    <tr>
      <td>429 Too Many Requests</td>
      <td>요청을 너무 많이한 경우</td>
    </tr>
  </tbody>
</table>

<h1 id="rest와-restful의-개념">REST와 RESTful의 개념</h1>
<ul>
  <li>REST란
    <ul>
      <li>REST의 정의
        <ul>
          <li>“Representational State Transfer(대표적인 상태 전달)”의 약자</li>
          <li>월드 와이드 웹(www)과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 개발 아키텍처의 한 형식
            <ul>
              <li>REST는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일이다.</li>
              <li>REST는 네트워크 상에서 Client와 Server 사이의 통신 방식 중 하나이다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>REST의 구체적인 개념
        <ul>
          <li><strong>HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(Post, Get, Put, Delete)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.</strong>
            <ul>
              <li>즉, REST는 자원 기반의 구조(ROA, Resource Oriented Architecture) 설계의 중심에 Resource가 있고 HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍쳐를 의미한다.</li>
              <li>웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여한다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>REST 장단점
        <ul>
          <li>장점
            <ul>
              <li>여러 가지 서비스 디자인에서 생길 수 있는 문제를 최소화해준다.</li>
              <li>Hypermedia API의 기본을 충실히 지키면서 범용성을 보장한다.</li>
              <li>HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.</li>
            </ul>
          </li>
          <li>단점
            <ul>
              <li>브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 값이 왠지 더 어렵게 느껴진다.</li>
              <li>구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.
                <ul>
                  <li>PUT, DELETE를 사용하지 못하는 점</li>
                  <li>pushState를 지원하지 않는 점</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>REST가 필요한 이유
        <ul>
          <li>‘애플리케이션 분리 및 통합’</li>
          <li>‘다양한 클라이언트의 등장’</li>
          <li>즉, 최근의 서버 프로그램은 다양한 브라우저와 안드로이폰, 아이폰과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.</li>
        </ul>
      </li>
      <li>REST 구성 요소
        <ol>
          <li>자원(Resource): URI
            <ul>
              <li>모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.</li>
              <li>자원을 구별하는 ID는 ‘/groups/:group_id’와 같은 HTTP <strong>URI</strong> 다.</li>
              <li>Client는 URI를 이용해서 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 Server에 요청한다.</li>
            </ul>
          </li>
          <li>행위(Verb): HTTP Method
            <ul>
              <li>HTTP 프로토콜의 Method를 사용한다.</li>
              <li>HTTP 프로토콜은 <strong>GET, POST, PUT, DELETE, HEAD</strong> 와 같은 메서드를 제공한다.</li>
            </ul>
          </li>
          <li>표현(Representation of Resource)
            <ul>
              <li>Client가 자원의 상태(정보)에 대한 조작을 요청하면 Server는 이에 적절한 응답(Representation)을 보낸다.</li>
              <li>REST에서 하나의 자원은 <strong>JSON, XML, TEXT, RSS</strong> 등 여러 형태의 Representation으로 나타내어 질 수 있다.</li>
              <li>JSON 혹은 XML를 통해 데이터를 주고 받는 것이 일반적이다.</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>REST 특징
        <ol>
          <li>Server-Client(서버-클라이언트 구조)</li>
          <li>Stateless(무상태)</li>
          <li>Cacheable(캐시 처리 가능)</li>
          <li>Layered System(계층화)</li>
          <li>Code-On-Demand(optional)</li>
          <li>Uniform Interface(인터페이스 일관성)</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>REST API
    <ul>
      <li>REST API의 정의
        <ul>
          <li>REST 기반으로 서비스 API를 구현한 것</li>
          <li>최근 OpenAPI(누구나 사용할 수 있도록 공개된 API: 구글 맵, 공공 데이터 등), 마이크로 서비스(하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처) 등을 제공하는 업체 대부분은 REST API를 제공한다.</li>
        </ul>
      </li>
      <li>REST API의 특징
        <ul>
          <li>사내 시스템들도 REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다.</li>
          <li>REST는 HTTP 표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램 언어로 클라이언트, 서버를 구현할 수 있다.</li>
          <li>즉, REST API를 제작하면 델파이 클라이언트 뿐 아니라, 자바, C#, 웹 등을 이용해 클라이언트를 제작할 수 있다.</li>
        </ul>
      </li>
      <li>REST API 설계 <strong>기본 규칙</strong>
        <ol>
          <li>URI는 정보의 자원을 표현해야 한다.
            <ul>
              <li>resource는 동사보다는 명사를 사용한다.</li>
              <li>resource는 영어 소문자 복수형을 사용하여 표현한다.</li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">GET /Member/1</code> -&gt; <code class="language-plaintext highlighter-rouge">GET /members/1</code></li>
            </ul>
          </li>
          <li>자원에 대한 행위는 HTTP Method(GET, PUT, POST, DELETE 등)로 표현한다.
            <ul>
              <li>URI에 HTTP Method가 들어가면 안된다.</li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">GET /members/delete/1</code> -&gt; <code class="language-plaintext highlighter-rouge">DELETE /members/1</code></li>
              <li>URI에 행위에 대한 동사 표현이 들어가면 안된다.</li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">GET /members/show/1</code> -&gt; <code class="language-plaintext highlighter-rouge">GET /members/1</code></li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">GET /members/insert/2</code> -&gt; <code class="language-plaintext highlighter-rouge">POST /members/2</code></li>
            </ul>
          </li>
        </ol>
      </li>
      <li>REST API 설계 규칙
        <ol>
          <li>슬래시 구분자(/ )는 계층 관계를 나타내는데 사용한다.
            <ul>
              <li>Ex) <code class="language-plaintext highlighter-rouge">http://restapi.example.com/houses/apartments</code></li>
            </ul>
          </li>
          <li>URI 마지막 문자로 슬래시(/ )를 포함하지 않는다.
            <ul>
              <li>URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.</li>
              <li>REST API는 분명한 URI를 만들어 통신을 해야 하기 때문에 혼동을 주지 않도록 URI 경로의 마지막에는 슬래시(/)를 사용하지 않는다.</li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">http://restapi.example.com/houses/apartments/ (X)</code></li>
            </ul>
          </li>
          <li>하이픈(- )은 URI 가독성을 높이는데 사용
            <ul>
              <li>불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 사용해 가독성을 높인다.</li>
            </ul>
          </li>
          <li>밑줄(_ )은 URI에 사용하지 않는다.
            <ul>
              <li>밑줄은 보기 어렵거나 밑줄 때문에 문자가 가려지기도 하므로 가독성을 위해 밑줄은 사용하지 않는다.</li>
            </ul>
          </li>
          <li>URI 경로에는 소문자가 적합하다.
            <ul>
              <li>URI 경로에 대문자 사용은 피하도록 한다.</li>
              <li>RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문</li>
            </ul>
          </li>
          <li>파일확장자는 URI에 포함하지 않는다.
            <ul>
              <li>REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.</li>
              <li>Accept header를 사용한다.</li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">http://restapi.example.com/members/soccer/345/photo.jpg (X)</code></li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">GET / members/soccer/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg (O)</code></li>
            </ul>
          </li>
          <li>리소스 간에는 연관 관계가 있는 경우
            <ul>
              <li>/리소스명/리소스 ID/관계가 있는 다른 리소스명</li>
              <li>Ex) <code class="language-plaintext highlighter-rouge">GET : /users/{userid}/devices (일반적으로 소유 ‘has’의 관계를 표현할 때)</code></li>
            </ul>
          </li>
          <li>:id는 하나의 특정 resource를 나타내는 고유값
            <ul>
              <li>Ex) student를 생성하는 route: POST /students</li>
              <li>Ex) id=12인 student를 삭제하는 route: DELETE /students/12</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>RESTful
    <ul>
      <li>RESTful의 개념
        <ul>
          <li>RESTful은 일반적으로 REST라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어이다.
            <ul>
              <li>즉, REST 원리를 따르는 시스템은 RESTful이란 용어로 지칭된다.</li>
            </ul>
          </li>
          <li>RESTful은 REST를 REST답게 쓰기 위한 방법으로, 누군가가 공식적으로 발표한 것이 아니다.</li>
        </ul>
      </li>
      <li>RESTful의 목적
        <ul>
          <li>이해하기 쉽고 사용하기 쉬운 REST API를 만드는 것</li>
          <li>RESTful API를 구현하는 근본적인 목적이 퍼포먼스 향상에 있는게 아니라, 일관적인 컨벤션을 통한 API의 이해도 및 호환성을 높이는게 주 동기이니, 퍼포먼스가 중요한 상황에서는 굳이 RESTful API를 구현하실 필요는 없습니다.</li>
        </ul>
      </li>
      <li>RESTful 하지 못한 경우
        <ul>
          <li>Ex1) CRUD 기능을 모두 POST로만 처리하는 API</li>
          <li>Ex2) route에 resource, id 외의 정보가 들어가는 경우(/students/updateName)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="참고">참고</h1>

<ul>
  <li><a href="https://www.inflearn.com/questions/126743" target="_blank">이영한님의 HTTP API와 REST API의 차이에 관한 질문에 대한 답변</a></li>
  <li><a href="https://github.com/WeareSoft/tech-interview/blob/master/contents/network.md#http%EC%99%80-https-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95" target="_blank">WeareSoft/tech-interview</a></li>
  <li><a href="https://restfulapi.net/" target="_blank">REST 논문을 정리한 자료</a></li>
  <li><a href="https://pronist.dev/146" target="_blank">정상우, REST를 보다 RESTful 하게 API 만들기</a></li>
  <li><a href="https://ko.wikipedia.org/wiki/REST" target="_blank">위키백과 REST</a></li>
</ul>
:ET