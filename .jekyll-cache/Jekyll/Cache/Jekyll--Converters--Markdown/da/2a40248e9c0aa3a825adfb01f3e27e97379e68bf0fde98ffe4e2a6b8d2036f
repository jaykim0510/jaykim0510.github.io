I"<h1 id="들어가기-전에">들어가기 전에</h1>

<h2 id="도커의-등장">도커의 등장</h2>
<p>2013년 도커가 등장하기 전까지 서버 관리는 굉장히 어렵고 컨트롤하기 어려운 것으로 여겨졌습니다. 하나의 서비스를 제공하기 위해서는 보통 수십에서 수백개의 애플리케이션이 서로 연결되어 동작하는데, 이 때 오류가 나게 되면 어디서 문제가 생긴건지 파악하기가 쉽지 않았습니다.</p>

<p>이러한 문제를 해결하기 위해 사람들은 <strong>가상화 기술</strong> 을 이용해 서버를 애플리케이션별로 격리시키고자 하였습니다. 이 때 크게 두가지 방법으로 접근할 수 있는데, 하나는 <strong>가상머신</strong> 을 이용해 컴퓨팅 리소스를 따로 분리하여 사용하도록 하는 것이었습니다. 하지만 이 방법은 컴퓨팅 성능을 떨어트립니다.<br />
두 번째 방법은 LXC(LinuX Containers)라는 <strong>리눅스 커널 기술</strong> 로 기존의 하드웨어 레벨에서 하던 방식을 운영체제 레벨에서 해결하도록 했습니다. 이렇게 하면 컴퓨팅 성능도 떨어트리지 않으면서, 파일시스템, 리소스(CPU, 메모리, 네트워크)를 분리할 수 있습니다. 하지만 이 방법은 사용하기에는 운영체제에 대한 깊은 이해를 필요로 해서 많은 개발자들이 쉽게 쓰기는 힘들었습니다.</p>

<p>이 때 등장한 것이 바로 도커입니다. 도커가 등장하게 되면서 <strong>컨테이너 기술</strong> 에 대한 접근성이 훨씬 좋아지게 되자, 개발자들은 이제 모든 애플리케이션을 컨테이너화하여 사용하기 시작했습니다. 이렇게 도커는 인프라 세계를 컨테이너 세상으로 바꿔버렸습니다. 수많은 애플리케이션이 컨테이너로 배포되고 도커파일을 만들어 이미지를 빌드하고 컨테이너를 배포하는 게 흔한 개발 프로세스가 되었습니다.</p>

<p>(도커에 관한 더 자세한 내용은 <a href="">여기</a>를 참고하시기 바랍니다)</p>

<p>이제 모든 것들을 컨테이너화하기 시작하면서 우리의 서비스는 다음과 같은 모습을 가지게 되었습니다.</p>

<p><img src="/images/kube_1.png" alt="" /></p>

<p>이렇게 서비스 하나를 배포하기 위해 수많은 컨테이너를 띄우고, 연결하고, 버전업을 해야하는 상황이 생긴겁니다. 그래서 개발자들은 이제 컨테이너들을 동시에 띄우고 관리까지 해주는 <strong>컨테이너 오케스트레이션</strong> 기술이 필요해지게 되었습니다.</p>

<p><img src="/images/kube_2.png" alt="" /></p>

<h1 id="kubernetes">Kubernetes</h1>

<h2 id="쿠버네티스란">쿠버네티스란</h2>

<p><strong>쿠버네티스는 컨테이너를 쉽고 빠르게 배포/확장하고 관리를 자동화해주는 오픈소스 플랫폼입니다.</strong></p>

<p>쿠버네티스는 단순한 컨테이너 플랫폼을 넘어 마이크로서비스, 클라우드 플랫폼을 지향하고 컨테이너로 이루어진 것들을 손쉽게 담고 관리할 수 있는 그릇 역할을 합니다. 또한 CI/CD, 머신러닝 등 다양한 기능이 쿠버네티스 플랫폼 위에서 동작합니다.</p>

<p>쿠버네티스는 컨테이너 규모, 컨테이너의 상태, 네트워크, 스토리지, 버전과 같은 것들을 관리하며 이를 자동화합니다.</p>

<p><img src="/images/kube_3.png" alt="" width="50%" /></p>

<h2 id="쿠버네티스-아키텍쳐">쿠버네티스 아키텍쳐</h2>

<p><img src="/images/kube_5.png" alt="" /></p>

<ul>
  <li>마스터: 전체 클러스터를 관리하는 서버</li>
  <li>노드: 컨테이너가 배포되는 서버</li>
</ul>

<p><img src="/images/kube_4.png" alt="" /></p>
:ET