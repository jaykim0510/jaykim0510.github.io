I"<hr />

<p id="toc"><strong>Table of Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#배열" id="markdown-toc-배열">배열</a></li>
  <li><a href="#파이썬의-배열" id="markdown-toc-파이썬의-배열">파이썬의 배열</a>    <ul>
      <li><a href="#배열을-이용한-몇-가지-중요한-문제" id="markdown-toc-배열을-이용한-몇-가지-중요한-문제">배열을 이용한 몇 가지 중요한 문제</a></li>
      <li><a href="#유용한-모듈" id="markdown-toc-유용한-모듈">유용한 모듈</a>        <ul>
          <li><a href="#itertools" id="markdown-toc-itertools">itertools</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="배열">배열</h1>

<p>자료구조는 크게 <strong>메모리 공간 기반의 연속 방식</strong>과 <strong>포인터 기반의 연결 방식</strong>으로 나뉜다. <strong>배열은 이 중에서 연속 방식의 가장 기본이 되는 자료형</strong>이다. 연결 방식의 대표적인 자료구조는 링크드 리스트이다.</p>

<p>추상자료형(스택, 큐, 트리, 그래프 등)은 대부분 배열과 연결리스트를 기반으로 구현되어 있다.</p>

<p>배열은 논리적 저장 순서와 물리적 저장 순서가 일치한다. 따라서 인덱스(index)로 해당 원소(element)에 접근할 수 있다. 그렇기 때문에 찾고자 하는 원소의 인덱스 값을 알고 있으면 O(1)에 해당 원소로 접근할 수 있다. 즉 random access 가 가능하다는 장점이 있는 것이다.</p>

<p>하지만 삭제 또는 삽입의 과정에서는 해당 원소에 접근하여 작업을 완료한 뒤(O(1)), 또 한 가지의 작업을 추가적으로 해줘야 하기 때문에, 시간이 더 걸린다. 만약 배열의 원소 중 어느 원소를 삭제했다고 했을 때, 배열의 연속적인 특징이 깨지게 된다. 즉 빈 공간이 생기는 것이다. 따라서 삭제한 원소보다 큰 인덱스를 갖는 원소들을 shift해줘야 하는 비용(cost)이 발생하고 이 경우의 시간 복잡도는 O(n)가 된다. 그렇기 때문에 Array 자료구조에서 삭제 기능에 대한 time complexity 의 worst case 는 O(n)이 된다.</p>

<p>삽입의 경우도 마찬가지이다. 만약 첫번째 자리에 새로운 원소를 추가하고자 한다면 모든 원소들의 인덱스를 1 씩 shift 해줘야 하므로 이 경우도 O(n)의 시간을 요구하게 된다.</p>

<p>주요 연산의 시간 복잡도는 다음과 같다.</p>

<table>
  <tbody>
    <tr>
      <td><strong>연산</strong></td>
      <td><strong>시간 복잡도</strong></td>
    </tr>
    <tr>
      <td>접근</td>
      <td>O(1)</td>
    </tr>
    <tr>
      <td>탐색</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>삽입</td>
      <td>맨 앞: O(n)  임의: O(n)  맨 뒤: O(1)</td>
    </tr>
    <tr>
      <td>삭제</td>
      <td>맨 앞: O(n)  임의: O(n)  맨 뒤: O(1)</td>
    </tr>
  </tbody>
</table>

<h1 id="파이썬의-배열">파이썬의 배열</h1>

<p>파이썬에서는 정확히 배열, 연결 리스트라는 자료형은 따로 없습니다. 하지만 더욱 편리한 리스트라는 자료형이 있습니다. <strong>리스트 자료형은 배열과 연결 리스트의 장점을 모두 합쳐놓은 파이썬만의 자료형</strong>입니다.</p>

<p><img src="/images/python_19.png" alt="" /></p>

<p>파이썬 리스트는 그 자체로 정말 유용한 메소드들을 많이 보유하고 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="o">--------------------------------------------------------------------------------------------------</span>
<span class="s">'append'</span><span class="p">,</span> <span class="s">'clear'</span><span class="p">,</span> <span class="s">'copy'</span><span class="p">,</span> <span class="s">'count'</span><span class="p">,</span> <span class="s">'extend'</span><span class="p">,</span> <span class="s">'index'</span><span class="p">,</span> <span class="s">'insert'</span><span class="p">,</span> <span class="s">'pop'</span><span class="p">,</span> <span class="s">'remove'</span><span class="p">,</span> <span class="s">'reverse'</span><span class="p">,</span> <span class="s">'sort'</span>

</code></pre></div></div>

<h2 id="배열을-이용한-몇-가지-중요한-문제">배열을 이용한 몇 가지 중요한 문제</h2>

<h2 id="유용한-모듈">유용한 모듈</h2>
<h3 id="itertools">itertools</h3>

<p>배열은 대표적인 시퀀스 자료형입니다. 그렇기 때문에 배열안의 원소들을 순회하는 경우가 많습니다. 이 때 파이썬의 <code class="language-plaintext highlighter-rouge">itertools</code> 모듈을 적절히 사용하면 코드를 훨씬 더 간결하고 가독성 높게 작성할 수 있습니다.</p>

:ET